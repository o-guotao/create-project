export const mockList = [
  {
    id: '13_1711164564.112',
    type: 'feed',
    offset: 13,
    verb: 'TOPIC_ACKNOWLEDGED_ARTICLE',
    created_time: 1711164564,
    updated_time: 1711164564,
    target: {
      id: 688204023,
      type: 'article',
      url: 'https://api.zhihu.com/articles/688204023',
      author: {
        id: 'da30398b2fcdc1ecf31e65257615fba2',
        url: 'https://api.zhihu.com/people/da30398b2fcdc1ecf31e65257615fba2',
        user_type: 'people',
        url_token: '45-95-89-33',
        name: '知知',
        headline: '',
        avatar_url:
          'https://picx.zhimg.com/50/v2-d03f60fadb06249fc9d75a05dfae9151_l.jpg?source=b6762063',
        is_org: false,
        gender: 0,
        followers_count: 13,
        is_following: false,
        is_followed: false,
      },
      title: '【Vue3】保姆级毫无废话的进阶到实战教程 - 01',
      comment_permission: 'all',
      created: 1710988237,
      updated: 1710988237,
      voteup_count: 4,
      voting: 0,
      comment_count: 0,
      linkbox: {
        category: '',
        pic: '',
        title: '',
        url: '',
      },
      excerpt:
        '作为一个 React、Vue 双修选手，在 Vue 3 逐渐稳定下来之后，是时候摸摸 Vue 3 了。Vue3 的变化不可谓不大，所以，本系列主要通过对 Vue3 中的一些 Big Changes 做详细的介绍，然后封装一个比较通用的业务脚手架，里面会增加很多非常有用的小技巧，让你在 Vue 3 的世界里纵享丝滑 ~第一篇将着重介绍一些 Vue3 中重要的变化和概念 ~ 1、新建项目找个可以开机的电脑，在终端输入： 打开链接 http://127.0.0.1:5173，你的眼睛就会…',
      excerpt_new:
        '作为一个 React、Vue 双修选手，在 Vue 3 逐渐稳定下来之后，是时候摸摸 Vue 3 了。Vue3 的变化不可谓不大，所以，本系列主要通过对 Vue3 中的一些 Big Changes 做详细的介绍，然后封装一个比较通用的业务脚手架，里面会增加很多非常有用的小技巧，让你在 Vue 3 的世界里纵享丝滑 ~第一篇将着重介绍一些 Vue3 中重要的变化和概念 ~ 1、新建项目找个可以开机的电脑，在终端输入： 打开链接 http://127.0.0.1:5173，你的眼睛就会…',
      preview_type: 'default',
      preview_text: '',
      content:
        '<blockquote data-pid="byOzjGfn">作为一个 <code>React</code>、<code>Vue</code> 双修选手，在 <code>Vue 3</code> 逐渐稳定下来之后，是时候摸摸 Vue 3 了。<b>Vue3 的变化不可谓不大</b>，所以，本系列主要通过对 Vue3 中的一些 <code>Big Changes</code> 做详细的介绍，然后封装一个比较通用的业务脚手架，里面会增加很多非常有用的小技巧，让你在 Vue 3 的世界里纵享丝滑 ~</blockquote><p data-pid="GcDLdVL0">第一篇将着重介绍一些 Vue3 中重要的变化和概念 ~</p><h2><b>1、新建项目</b></h2><p data-pid="lNfdvprt">找个可以开机的电脑，在终端输入：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic4.zhimg.com/v2-0430d16775415b86fbd68873bf3fc06f_b.jpg" data-caption="" data-size="normal" data-rawwidth="1040" data-rawheight="1106" data-original-token="v2-ee3cfeb112fef433874165dc35fe012c" class="origin_image zh-lightbox-thumb" width="1040" data-original="https://pic4.zhimg.com/v2-0430d16775415b86fbd68873bf3fc06f_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="wYMVB8AF">打开链接 <code>http://127.0.0.1:5173</code>，你的眼睛就会看到：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic2.zhimg.com/v2-33fd236ff61ab18e4b66c0470b8989d7_b.jpg" data-caption="" data-size="normal" data-rawwidth="3024" data-rawheight="1699" data-original-token="v2-19c862ae5b017a749a3ace8eecd6d8d2" class="origin_image zh-lightbox-thumb" width="3024" data-original="https://pic2.zhimg.com/v2-33fd236ff61ab18e4b66c0470b8989d7_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="tNlPlXIV">代表项目初始化成功，你真棒！</p><p data-pid="4VFZ7yzc">你的目录会长这个样子：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic4.zhimg.com/v2-4839cddc157d0bcdfc5afc9ae8070d37_b.jpg" data-caption="" data-size="normal" data-rawwidth="655" data-rawheight="561" data-original-token="v2-95e2b62e3d2c2a81280b2a97e3faf550" class="origin_image zh-lightbox-thumb" width="655" data-original="https://pic4.zhimg.com/v2-4839cddc157d0bcdfc5afc9ae8070d37_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><blockquote data-pid="X3-SmT0e"><b><code>注意</code></b>：记笔记，小技巧学起来，在 vscode 终端中使用 <code>tree</code> 指令打印当前项目的文件树：</blockquote><div class="highlight"><pre><code class="language-yaml"><span class="l">yaml</span><span class="w">\n</span><span class="w"></span><span class="l">复制代码tree -I &#34;node_modules|.vscode|cypress&#34; &gt; tree.txt</span></code></pre></div><p data-pid="Pxevh1MP">这个命令会做两件事:</p><ol><li data-pid="c48pueQO">使用 <code>tree</code> 命令输出目录树结构，同时排除 <code>node_modules</code>、<code>.vscode</code> 和 <code>cypress</code> 文件夹<br/></li></ol><ul><li data-pid="ppwMhvwt"><code>tree</code> 命令可以输出目录的树形结构</li><li data-pid="-fYMxWup"><code>-I</code> 参数用于排除某些文件夹不显示</li><li data-pid="9PmvDd6U">在排除参数中用 <code>|</code> 分隔多个要排除的文件夹名</li></ul><p class="ztext-empty-paragraph"><br/></p><ol><li data-pid="WeeUe10Y">使用 <code>&#39;&gt;&#39;</code> 符号将标准输出重定向到 <code>tree.txt</code> 文件（没有就会自动生成一个）</li></ol><p data-pid="nrk3626y">这样 <code>tree</code> 命令的输出就会被写入到 <code>tree.txt</code> 文件中，而不是打印到终端屏幕上。在项目中执行，然后你就会在项目根目录中看到一个 <code>tree.txt</code> 文件:</p><div class="highlight"><pre><code class="language-text">yml复制代码.\n├── README.md\n├── cypress.config.ts\n├── dist\n│   ├── assets\n│   │   ├── AboutView-4d995ba2.css\n│   │   ├── AboutView-675ecf4b.js\n│   │   ├── index-9f680dd7.css\n│   │   ├── index-d5df9149.js\n│   │   └── logo-277e0e97.svg\n│   ├── favicon.ico\n│   └── index.html\n├── env.d.ts\n├── index.html\n├── package.json\n├── pnpm-lock.yaml\n├── public\n│   └── favicon.ico\n├── src\n│   ├── App.vue\n│   ├── assets\n│   │   ├── base.css\n│   │   ├── logo.svg\n│   │   └── main.css\n│   ├── components\n│   │   ├── HelloWorld.vue\n│   │   ├── TheWelcome.vue\n│   │   ├── WelcomeItem.vue\n│   │   ├── __tests__\n│   │   │   └── HelloWorld.spec.ts\n│   │   └── icons\n│   │       ├── IconCommunity.vue\n│   │       ├── IconDocumentation.vue\n│   │       ├── IconEcosystem.vue\n│   │       ├── IconSupport.vue\n│   │       └── IconTooling.vue\n│   ├── main.ts\n│   ├── router\n│   │   └── index.ts\n│   ├── stores\n│   │   └── counter.ts\n│   └── views\n│       ├── AboutView.vue\n│       └── HomeView.vue\n├── tree.txt\n├── tsconfig.app.json\n├── tsconfig.json\n├── tsconfig.node.json\n├── tsconfig.vitest.json\n├── vite.config.ts\n└── vitest.config.ts</code></pre></div><p data-pid="bYqKwz7r">简单介绍一下重要的文件/文件夹：</p><ul><li data-pid="OE-1zfz-"><code>public</code><br/></li><ul><li data-pid="WYBmNd3W"><b>里面的东西不会经过编译和打包</b>，所以放在 public 内的东西 ”<b>不要引用</b>“；</li><li data-pid="JnSqzyXw">通常会放置( 不被JavaScript ) 引用的静态资源，例如：网页标题栏 icon，即 <code>favicon.ico</code>；</li><li data-pid="0cqq44xI">打包的时候，里面的东西会直接被复制一份，<b>放在根目录内</b>，所以要引用 public 内的资源时，要使用根目录绝对路径，比如：要取 <code>public/favicon.ico</code> ，你应写成 <code>/favicon.ico</code>；</li></ul></ul><p class="ztext-empty-paragraph"><br/></p><ul><li data-pid="LedUkIQY"><b><code>assets</code></b>：放静态资源，如：图片、CSS</li><li data-pid="g9JpaKpe"><b><code>components</code></b>：放公用组件</li><li data-pid="3tAIgp4x"><b><code>stores</code></b>：与 <code>Pinia</code> 状态管理器有关</li><li data-pid="ArQwCZ27"><b><code>router</code></b>：与 <code>Vue Router</code> 路由管理有关</li><li data-pid="5h-e5TeW"><b><code>views</code></b>：放路由组件</li></ul><h2><b>2、深入认识 npm xxx</b></h2><p data-pid="m0Lsh48M">在 <code>package.json</code> 的 <code>scripts</code> 中常用的有三个指令：</p><ul><li data-pid="HnyTifoZ"><code>npm run dev</code>｜<code>npx vite</code>：启动项目本地服务，并提供 <code>Hot Module Replacement (HMR)</code>，可以在更新代码后即时更新页面；</li></ul><blockquote data-pid="q_-dXZ0N">是的，在项目根目录下 <code>npx vite</code> 也可以启动项目！</blockquote><ul><li data-pid="tkhbbwN7"><code>npm run build</code>｜<code>npx vite build</code>：项目打包</li></ul><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic4.zhimg.com/v2-6e31bbf3422d79263d2acf42d3b8d9e7_b.jpg" data-caption="" data-size="normal" data-rawwidth="655" data-rawheight="251" data-original-token="v2-85caed4378b1ca9743b10aaaea2643e3" class="origin_image zh-lightbox-thumb" width="655" data-original="https://pic4.zhimg.com/v2-6e31bbf3422d79263d2acf42d3b8d9e7_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><ul><li data-pid="hyLPU-Rx"><code>npm run preview</code>｜<code>npx vite preview --port 4173</code>：启动一个本地服务，预览打包后的 <b>dist</b> 内容，可以在正式布署前检查打包后的内容是否有问题</li></ul><h2><b>3、为什么要打包？</b></h2><p data-pid="WNsXQpg4">Vue3项目打包的主要目:</p><ol><li data-pid="oPjbJPNF"><b>必要的语法编译</b><br/></li></ol><ul><li data-pid="3bQ0A-xh">浏览器不认识 <code>vue</code> 文件，需要编译成浏览器能读懂的 <code>js</code> 和 <code>css</code></li><li data-pid="h2wmbvcX">浏览器不认识的新 ES 语法，需要 <code>polyfill</code>。</li></ul><p class="ztext-empty-paragraph"><br/></p><ol><li data-pid="tmCClNE3"><b>Minify 代码</b>：去除无用代码，节省浏览器解析的时间<br/></li></ol><ul><li data-pid="4FBj8pcU">在不影响程序运行的前提下，去除不必要的空白字元、注解，将变量名称、函数名称、参数名称缩短等等，减少部署后的代码体积。</li></ul><p class="ztext-empty-paragraph"><br/></p><ol><li data-pid="JGQOu7gH"><b>整合第三方模块</b>：打包可以将引入的各种第三方模块打包合并到一起，作为一个整体进行部署。通过 npm 或yarn 安装所需的第三方库，实际都放在 <code>node_modules</code> 内，却可以透过 <code>import from &#34;xxx&#34;</code> 直接使用，不需要写出该库的完整路径，这是打包工具的功劳。</li><li data-pid="C0KmX55j"><b>性能优化</b>：通过打包合并文件，减少页面 HTTP 请求数量，加快加载速度。</li><li data-pid="GzvWoAYA"><b>代码保护</b>：源码经过打包后会进行压缩和混淆，可以起到一定的代码保护作用。</li><li data-pid="UnkArNf0"><b>兼容性优化</b>：打包可以将代码转换为主流浏览器都能识别的语法，优化不同浏览器的兼容性。</li><li data-pid="qS-jsqZD"><b>部署方便</b>：打包后生成的静态资源文件可以很方便地部署到各种环境。</li><li data-pid="SRuNRoYk"><b>开启gzip压缩</b>：打包过程可以进行gzip压缩，优化静态资源文件的体积。</li><li data-pid="9W69SAK0"><b>分析代码</b>：通过分析打包后的文件，可以清晰看到项目中不同文件的组成和大小。</li></ol><p data-pid="f2v8vIOa">打包主要是为了优化性能、安全性、扩展性、部署便利性等等，实际项目部署中也是必要的步骤。</p><h2><b>4、Option API 和Composition API 区别</b></h2><p data-pid="f5LVBKIH"><code>Vue 3</code> 提供 <code>Option API</code> 和 <code>Composition API</code> 两种写法，<code>Option API</code> 是延续自 <code>Vue 2</code> 的写法，<code>Composition API</code> 则是跟着 <code>Vue 3</code> 一起推出的新写法。</p><p data-pid="t-G62nMs"><code>Option API</code> 和 <code>Composition API</code> 主要差别有两个：</p><ol><li data-pid="bBH_TrGZ"><b>管理逻辑代码的方式</b>，也就是<code>&lt;script&gt;</code>的部分，模板 <code>template</code> 和 <code>style</code> 的用法是一样的。</li><li data-pid="rwMQR5UY"><b>Composables</b> (Vue 官网翻译成 <b>组合式函数</b>)</li></ol><p data-pid="EsqOTv6x">这里引用 <code>FU</code> 大神在 <code>Vueconf</code> 上的一个解释：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://picx.zhimg.com/v2-47c73c2aa742eeee51d78ab666585259_b.jpg" data-caption="" data-size="normal" data-rawwidth="2846" data-rawheight="1580" data-original-token="v2-e329d0c5a65ad075f2d58cd7b08a05a3" class="origin_image zh-lightbox-thumb" width="2846" data-original="https://picx.zhimg.com/v2-47c73c2aa742eeee51d78ab666585259_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic2.zhimg.com/v2-04eff84e7e7d7197769715b01bcdbddb_b.jpg" data-caption="" data-size="normal" data-rawwidth="2606" data-rawheight="1104" data-original-token="v2-134ba439e930a10865987d3accb989ee" class="origin_image zh-lightbox-thumb" width="2606" data-original="https://pic2.zhimg.com/v2-04eff84e7e7d7197769715b01bcdbddb_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><h2><b>4.1 Option API</b></h2><p data-pid="AHCVKlW4">所谓的 <code>Option</code> (选项)，就是 Vue 将代码根据特性不同，分类成 <code>data</code>、<code>method</code>、计算属性(<code>computed</code>)、生命周期......不同选项，让开发者通过选项 (<code>Option</code>) 的方式，来定义组件内的逻辑。</p><p data-pid="71xyWHfU">代码一般会根据选项式 API 被分成几个区块，比如这样：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic3.zhimg.com/v2-ca1f8cd1a17803555ed7bda771b5e8bc_b.jpg" data-caption="" data-size="normal" data-rawwidth="1040" data-rawheight="1692" data-original-token="v2-1a10958656ecdf8e3c3be5fe5e712f86" class="origin_image zh-lightbox-thumb" width="1040" data-original="https://pic3.zhimg.com/v2-ca1f8cd1a17803555ed7bda771b5e8bc_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><h2><b>4.2 Composition API</b></h2><p data-pid="m9djoY_C">在 <code>Composition API</code> 搭配 <code>&lt;script setup&gt;</code> 的情况下，可以将所有逻辑代码直接写在<code>&lt;script&gt;</code>内，就跟写原生 Javascript 的感觉很像，几乎没有什么特殊规则，交由开发者自行管理。</p><p data-pid="Syu0MFkX">使用 <code>Composition API</code> 时，通常会根据「功能」来管理逻辑代码，一个功能使用到的 data、method，声明位置可以比较靠近，对于大的、复杂的组件来说，会提升可读性。</p><p data-pid="_QCkiPmD"><code>Composition API</code> 的代码一般是这样：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pica.zhimg.com/v2-677b5fa521ae55ab5c9decfaa3a567c4_b.jpg" data-caption="" data-size="normal" data-rawwidth="1040" data-rawheight="1376" data-original-token="v2-bd120716ee0f2b621912d86d7563ddc7" class="origin_image zh-lightbox-thumb" width="1040" data-original="https://pica.zhimg.com/v2-677b5fa521ae55ab5c9decfaa3a567c4_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><h2><b>4.3 两者区别</b></h2><ul><li data-pid="lPUut3bw"><b><code>Option API</code></b>：有既定规则，代码按照<b>选项</b>分区管理</li><li data-pid="wvl7ym8y"><b><code>Composition API</code></b>：较为弹性、自由，代码通常按照<b>功能逻辑</b>分区管理，(或随开发者偏好)</li></ul><p data-pid="BhTlFril">两种方式都有人喜欢，没有绝对的好坏。  其实 <code>「自由/ 弹性」</code> 在程式码管理上是把双刃剑，更考验开发者管理代码的能力；也有开发者偏好在订好的规则下进行开发，两者并没有优劣，而是风格差异。</p><ul><li data-pid="RNSEh3Tf"><code>Composition API</code> 形式下，需要由开发者自己利用 <code>reactive()</code> 和 <code>ref()</code> 定义 data 是否有响应性，在其他地方取 data 时，也就要根据 <code>reactive()</code> 和 <code>ref()</code> 的规则进行取值和操作。</li><li data-pid="PtNS6tyA"><code>Option API</code> 形式下，Vue 已经帮开发者做好了响应式，自动为 <code>data</code> 中的数据加上响应性，其他选项要取用 <code>data</code> 内的数据时，用 <code>this.变量名</code> 取得即可。</li></ul><p data-pid="qPGJFPe8">但整个两者背后的响应式机制是一样的，核心概念不变，而是根据Vue 定义的写法不同，有不同的使用方式，所以 Vue 官网将教学指南分成两种 API 形式。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic3.zhimg.com/v2-b73881650c6f4f141e44c88e6f371b1c_b.jpg" data-caption="" data-size="normal" data-rawwidth="2916" data-rawheight="1092" data-original-token="v2-e3533b9e9ec54c751832aa1d97de7e0d" class="origin_image zh-lightbox-thumb" width="2916" data-original="https://pic3.zhimg.com/v2-b73881650c6f4f141e44c88e6f371b1c_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="d4vyJQQ6"><b>复杂组件的情况下，<code>Composition API</code> 可读性更好</b></p><ul><li data-pid="p1Hoq8tG">在开发比较小的组件时，两者的可读性其实没有太大的差异。</li><li data-pid="SuyURvgk">但随着组件越大、越复杂，功能用到几个不同的 Option，逻辑就会被分散在不同 Option 的区块，随着组件长大，可读性会变差，要管理一个功能时，需要在不同的 Option 区块之间切换。</li></ul><p data-pid="tidFxGaf">官网也给了这两者的直观上的区别：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-ca56c93542e2777c45d3c3722db0c3d8_b.jpg" data-caption="" data-size="normal" data-rawwidth="1200" data-rawheight="1201" data-original-token="v2-eeae1a1ebcbc2b4ce754249a3843d1f8" class="origin_image zh-lightbox-thumb" width="1200" data-original="https://pic1.zhimg.com/v2-ca56c93542e2777c45d3c3722db0c3d8_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="S83dylGh">建议是都能熟悉使用，不然你怎么看懂别人的 shishan 代码呢？</p><h2><b>5、使用 <code>Composition API</code> 封装自定义 <code>Hooks</code></b></h2><p data-pid="rFEXjshB">在 Vue 3 中，可以使用 <code>Composition API</code> 来封装可重用的逻辑，类似于 React 中的 Hooks。</p><p data-pid="wmjIz49i">通过自定义 Hooks，我们可以将可重用的逻辑封装起来，并在多个组件中共享使用。这样可以提高代码的可维护性、重用性和可读性，避免了代码重复，并且使组件更加关注自身的业务逻辑。并且 hook 具有良好的命名空间和类型推导，易于测试等特性。</p><h2><b>5.1 <code>useWindowSize</code></b></h2><p data-pid="f_-04kgu">下面封装一个 <code>useWindowSize</code> 的自定义 Hooks，用于获取当前窗口的宽度和高度：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic2.zhimg.com/v2-1153358cc622ce6cf8a9695a599de697_b.jpg" data-caption="" data-size="normal" data-rawwidth="1040" data-rawheight="1242" data-original-token="v2-0d3f74323c387a67a65409cff37beb31" class="origin_image zh-lightbox-thumb" width="1040" data-original="https://pic2.zhimg.com/v2-1153358cc622ce6cf8a9695a599de697_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="frAWALjb">将窗口大小的逻辑封装成一个可重用的函数，并且与具体的组件解耦。其他组件只需要导入并调用 <code>useWindowSize</code>，就可以获取窗口大小，而不需要重复编写监听器和逻辑。</p><p data-pid="H1O7bGta">比如，你就可以在组件中这样使用 <code>useWindowSize</code>：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pica.zhimg.com/v2-e559e4f92670ffaec8d49b55ca4f8a64_b.jpg" data-caption="" data-size="normal" data-rawwidth="1040" data-rawheight="1152" data-original-token="v2-2114d467514e69a067aa8fee3b865b8f" class="origin_image zh-lightbox-thumb" width="1040" data-original="https://pica.zhimg.com/v2-e559e4f92670ffaec8d49b55ca4f8a64_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><h2><b>5.2 <code>useFetch</code> 和 <code>usePagination</code></b></h2><p data-pid="lLXkgZ5w">下面再来封装两个非常常用的自定义 Hooks：<code>usePagination</code> 和 <code>useFetch</code>。</p><div class="highlight"><pre><code class="language-js"><span class="nx">js复制代码import</span> <span class="p">{</span> <span class="nx">ref</span><span class="p">,</span> <span class="nx">computed</span><span class="p">,</span> <span class="nx">onMounted</span><span class="p">,</span> <span class="nx">isRef</span><span class="p">,</span> <span class="nx">watch</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;vue&#34;</span><span class="p">;</span>\n<span class="err">​</span>\n<span class="kr">export</span> <span class="kd">function</span> <span class="nx">usePagination</span><span class="p">(</span><span class="nx">endpoint</span><span class="p">)</span> <span class="p">{</span>\n  <span class="kr">const</span> <span class="nx">currentPage</span> <span class="o">=</span> <span class="nx">ref</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>\n  <span class="kr">const</span> <span class="nx">paginatedEndpoint</span> <span class="o">=</span> <span class="nx">computed</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="sb">`</span><span class="si">${</span><span class="nx">endpoint</span><span class="si">}</span><span class="sb">?page=</span><span class="si">${</span><span class="nx">currentPage</span><span class="p">.</span><span class="nx">value</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span>\n  <span class="p">});</span>\n<span class="err">​</span>\n  <span class="kd">function</span> <span class="nx">nextPage</span><span class="p">()</span> <span class="p">{</span>\n    <span class="nx">currentPage</span><span class="p">.</span><span class="nx">value</span><span class="o">++</span><span class="p">;</span>\n  <span class="p">}</span>\n<span class="err">​</span>\n  <span class="kd">function</span> <span class="nx">prevPage</span><span class="p">()</span> <span class="p">{</span>\n    <span class="k">if</span> <span class="p">(</span><span class="nx">currentPage</span><span class="p">.</span><span class="nx">value</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>\n      <span class="k">return</span><span class="p">;</span>\n    <span class="p">}</span>\n<span class="err">​</span>\n    <span class="nx">currentPage</span><span class="p">.</span><span class="nx">value</span><span class="o">--</span><span class="p">;</span>\n  <span class="p">}</span>\n<span class="err">​</span>\n  <span class="k">return</span> <span class="p">{</span>\n    <span class="nx">endpoint</span><span class="o">:</span> <span class="nx">paginatedEndpoint</span><span class="p">,</span>\n    <span class="nx">nextPage</span><span class="p">,</span>\n    <span class="nx">prevPage</span>\n  <span class="p">};</span>\n<span class="p">}</span>\n<span class="err">​</span>\n<span class="kr">export</span> <span class="kd">function</span> <span class="nx">useFetch</span><span class="p">(</span><span class="nx">endpoint</span><span class="p">)</span> <span class="p">{</span>\n  <span class="kr">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">ref</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>\n  <span class="kr">const</span> <span class="nx">loading</span> <span class="o">=</span> <span class="nx">ref</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>\n  <span class="kr">const</span> <span class="nx">error</span> <span class="o">=</span> <span class="nx">ref</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>\n<span class="err">​</span>\n  <span class="kd">function</span> <span class="nx">fetchData</span><span class="p">()</span> <span class="p">{</span>\n    <span class="nx">loading</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>\n    <span class="c1">// 也可以使用 axios\n</span><span class="c1"></span>    <span class="k">return</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">isRef</span><span class="p">(</span><span class="nx">endpoint</span><span class="p">)</span> <span class="o">?</span> <span class="nx">endpoint</span><span class="p">.</span><span class="nx">value</span> <span class="o">:</span> <span class="nx">endpoint</span><span class="p">,</span> <span class="p">{</span>\n      <span class="nx">method</span><span class="o">:</span> <span class="s2">&#34;get&#34;</span><span class="p">,</span>\n      <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span>\n        <span class="s2">&#34;content-type&#34;</span><span class="o">:</span> <span class="s2">&#34;application/json&#34;</span>\n      <span class="p">}</span>\n    <span class="p">})</span>\n      <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="c1">// 非 200 响应码\n</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">res</span><span class="p">.</span><span class="nx">ok</span><span class="p">)</span> <span class="p">{</span>\n          <span class="kr">const</span> <span class="nx">error</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">statusText</span><span class="p">);</span>\n          <span class="nx">error</span><span class="p">.</span><span class="nx">json</span> <span class="o">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>\n          <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>\n        <span class="p">}</span>\n<span class="err">​</span>\n        <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>\n      <span class="p">})</span>\n      <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">json</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="nx">data</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">json</span><span class="p">;</span>\n      <span class="p">})</span>\n      <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="nx">error</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">err</span><span class="p">;</span>\n        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">json</span><span class="p">)</span> <span class="p">{</span>\n          <span class="k">return</span> <span class="nx">err</span><span class="p">.</span><span class="nx">json</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">json</span> <span class="p">=&gt;</span> <span class="p">{</span>\n            <span class="nx">error</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">message</span><span class="p">;</span>\n          <span class="p">});</span>\n        <span class="p">}</span>\n      <span class="p">})</span>\n      <span class="p">.</span><span class="k">finally</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="nx">loading</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>\n      <span class="p">});</span>\n  <span class="p">}</span>\n<span class="err">​</span>\n  <span class="nx">onMounted</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">fetchData</span><span class="p">();</span>\n  <span class="p">});</span>\n<span class="err">​</span>\n  <span class="k">if</span> <span class="p">(</span><span class="nx">isRef</span><span class="p">(</span><span class="nx">endpoint</span><span class="p">))</span> <span class="p">{</span>\n    <span class="nx">watch</span><span class="p">(</span><span class="nx">endpoint</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="c1">// 重新请求数据\n</span><span class="c1"></span>      <span class="nx">fetchData</span><span class="p">();</span>\n    <span class="p">});</span>\n  <span class="p">}</span>\n<span class="err">​</span>\n  <span class="k">return</span> <span class="p">{</span>\n    <span class="nx">data</span><span class="p">,</span>\n    <span class="nx">loading</span><span class="p">,</span>\n    <span class="nx">error</span>\n  <span class="p">};</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="2p6ZtSbw">下面逐个分析这两个 Hooks 的封装思路：</p><p data-pid="bcU7ZBiz"><b>1. usePagination:</b></p><p data-pid="cpyTp6yd">这个自定义 Hook 用于处理分页逻辑。它接收一个 <code>endpoint</code> 参数，表示分页请求的接口。</p><ul><li data-pid="QQKtA1SB"><code>currentPage</code> 是一个响应式引用（ref），用于存储当前页码，默认为 1。</li><li data-pid="IskgwnjH"><code>paginatedEndpoint</code> 是一个计算属性（computed），根据当前页码和 <code>endpoint</code> 拼接出分页请求的完整接口。</li><li data-pid="scUG0cqr"><code>nextPage</code> 函数用于增加当前页码，即跳转到下一页。</li><li data-pid="S5hPBsOG"><code>prevPage</code> 函数用于减少当前页码，即回到上一页。</li></ul><p data-pid="pw-uUcwd">最后，返回了一个对象，包含了 <code>paginatedEndpoint</code>、<code>nextPage</code> 和 <code>prevPage</code>。这样，在多个组件中可以方便地使用分页功能，而不需要重复编写逻辑。通过修改 <code>currentPage</code> 的值，可以轻松地切换页码，并且 <code>paginatedEndpoint</code> 会自动更新，以便发起正确的分页请求。</p><p data-pid="vqCZyeoa"><b>2. useFetch:</b></p><p data-pid="Y6RbznU7">这个自定义 Hook 用于发送异步请求并处理响应数据。它接收一个 <code>endpoint</code> 参数，表示请求的接口。</p><ul><li data-pid="XM6fvHpU"><code>data</code>、<code>loading</code> 和 <code>error</code> 都是响应式引用（ref），分别用于存储请求的响应数据、加载状态和错误信息。</li><li data-pid="MYt77Vou"><code>fetchData</code> 函数用于发送请求。在函数内部，首先将 <code>loading</code> 置为 <code>true</code>，表示请求正在进行中。然后使用 Fetch API 发起请求，并根据请求的状态进行相应的处理：<br/></li><ul><li data-pid="mLHTKVBS">如果响应状态码不是 200，抛出一个带有状态文本的错误。</li><li data-pid="ux9y8VJC">如果响应状态码为 200，将响应数据解析为 JSON，并将其赋值给 <code>data</code>。</li><li data-pid="9HioE9Sr">如果发生错误，将错误信息存储在 <code>error</code> 中，并尝试提取自定义的 JSON 错误响应。</li></ul></ul><p class="ztext-empty-paragraph"><br/></p><ul><li data-pid="cnDsayXf"><code>onMounted</code> 钩子在组件挂载后调用 <code>fetchData</code> 函数，即在组件加载时发送请求。</li><li data-pid="JBMPfGtO">如果 <code>endpoint</code> 是响应式引用，则使用 <code>watch</code> 监听 <code>endpoint</code> 的变化，并在变化时重新调用 <code>fetchData</code>，以重新获取数据。</li></ul><p data-pid="WZAAklvG">最后，返回一个对象，包含了 <code>data</code>、<code>loading</code> 和 <code>error</code>。这样，在组件中发送请求变得更加简单。通过调用 <code>fetchData</code> 函数，可以发起请求并获取响应数据，同时也可以监控请求的加载状态和错误信息。这样，组件可以更专注于业务逻辑，而不需要过多关注请求的细节。</p><p data-pid="8yKWk_Ub">怎么使用呢？</p><div class="highlight"><pre><code class="language-js"><span class="nx">js复制代码</span><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">setup</span><span class="o">&gt;</span>\n<span class="kr">import</span> <span class="p">{</span> <span class="nx">usePagination</span><span class="p">,</span> <span class="nx">useFetch</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;./hooks&#39;</span>\n<span class="err">​</span>\n<span class="kr">const</span> <span class="nx">endpoint</span> <span class="o">=</span> <span class="s1">&#39;https://example.com/api&#39;</span> \n<span class="err">​</span>\n<span class="kr">const</span> <span class="p">{</span> \n  <span class="nx">endpoint</span><span class="o">:</span> <span class="nx">paginatedEndpoint</span><span class="p">,</span>\n  <span class="nx">nextPage</span><span class="p">,</span>\n  <span class="nx">prevPage</span>\n<span class="p">}</span> <span class="o">=</span> <span class="nx">usePagination</span><span class="p">(</span><span class="nx">endpoint</span><span class="p">)</span>\n<span class="err">​</span>\n<span class="kr">const</span> <span class="p">{</span>\n  <span class="nx">data</span><span class="p">,</span>\n  <span class="nx">loading</span><span class="p">,</span>\n  <span class="nx">error</span>\n<span class="p">}</span> <span class="o">=</span> <span class="nx">useFetch</span><span class="p">(</span><span class="nx">paginatedEndpoint</span><span class="p">)</span>\n<span class="err">​</span>\n<span class="kd">function</span> <span class="nx">handleNextPage</span><span class="p">()</span> <span class="p">{</span>\n  <span class="nx">nextPage</span><span class="p">()</span>\n<span class="p">}</span>\n<span class="err">​</span>\n<span class="kd">function</span> <span class="nx">handlePrevPage</span><span class="p">()</span> <span class="p">{</span>\n  <span class="nx">prevPage</span><span class="p">()</span>\n<span class="p">}</span>\n<span class="o">&lt;</span><span class="err">/script&gt;</span>\n<span class="err">​</span>\n<span class="o">&lt;</span><span class="nx">template</span><span class="o">&gt;</span>\n  <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>\n    <span class="o">&lt;</span><span class="nx">button</span> <span class="err">@</span><span class="nx">click</span><span class="o">=</span><span class="s2">&#34;handlePrevPage&#34;</span><span class="o">&gt;</span><span class="nx">Prev</span><span class="o">&lt;</span><span class="err">/button&gt; </span>\n    <span class="o">&lt;</span><span class="nx">button</span> <span class="err">@</span><span class="nx">click</span><span class="o">=</span><span class="s2">&#34;handleNextPage&#34;</span><span class="o">&gt;</span><span class="nx">Next</span><span class="o">&lt;</span><span class="err">/button&gt;</span>\n<span class="err">​</span>\n    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">v</span><span class="o">-</span><span class="k">if</span><span class="o">=</span><span class="s2">&#34;loading&#34;</span><span class="o">&gt;</span><span class="nx">Loading</span><span class="p">...</span><span class="o">&lt;</span><span class="err">/div&gt;</span>\n<span class="err">​</span>\n    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">v</span><span class="o">-</span><span class="k">if</span><span class="o">=</span><span class="s2">&#34;data&#34;</span><span class="o">&gt;</span>\n      <span class="c">&lt;!--</span> <span class="nx">display</span> <span class="nx">data</span> <span class="o">--&gt;</span>\n    <span class="o">&lt;</span><span class="err">/div&gt;</span>\n<span class="err">​</span>\n    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">v</span><span class="o">-</span><span class="k">if</span><span class="o">=</span><span class="s2">&#34;error&#34;</span><span class="o">&gt;</span>\n      <span class="nb">Error</span><span class="o">:</span> <span class="p">{{</span> <span class="nx">error</span> <span class="p">}}</span>\n    <span class="o">&lt;</span><span class="err">/div&gt;</span>\n  <span class="o">&lt;</span><span class="err">/div&gt;</span>\n<span class="o">&lt;</span><span class="err">/template&gt;</span>\n</code></pre></div><h2><b>6、几个重要的东西</b></h2><h2><b>6.1 <code>setup()</code> 和 <code>&lt;script setup&gt;</code></b></h2><p data-pid="bQG8w8MG">在最新的 <code>Composition API</code> 中引入 <code>&lt;script setup&gt;</code>，其设计理念是去除不必要的包装器和其他旧的组件选项，这样就能更简单、更集中地编写组件。你可以认为 <code>&lt;script setup&gt;</code> 是 <code>setup()</code> 的语法糖，比如：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic3.zhimg.com/v2-0f8b1ec66e39bd2a2abc770b6d202ac2_b.jpg" data-caption="" data-size="normal" data-rawwidth="1040" data-rawheight="1016" data-original-token="v2-63408c4368c9e511cebb25efa38efb25" class="origin_image zh-lightbox-thumb" width="1040" data-original="https://pic3.zhimg.com/v2-0f8b1ec66e39bd2a2abc770b6d202ac2_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="bdED_OW0">使用 <code>&lt;script setup&gt;</code> 语法糖，我们可以更简洁地编写组件逻辑。不再需要写多余的 <code>return</code> 语句：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic4.zhimg.com/v2-683935bbedbc32ec5b209bf4e6ab6703_b.jpg" data-caption="" data-size="normal" data-rawwidth="1040" data-rawheight="612" data-original-token="v2-68badb5206795ec60c311a4679220b71" class="origin_image zh-lightbox-thumb" width="1040" data-original="https://pic4.zhimg.com/v2-683935bbedbc32ec5b209bf4e6ab6703_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="s1sdHd8i">对比一下：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pica.zhimg.com/v2-4636ea259a64326bfc77d9c239c460de_b.jpg" data-caption="" data-size="normal" data-rawwidth="2402" data-rawheight="1282" data-original-token="v2-3330f9d61899187e0f16385e38429572" class="origin_image zh-lightbox-thumb" width="2402" data-original="https://pica.zhimg.com/v2-4636ea259a64326bfc77d9c239c460de_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><h2><b>6.2 <code>defineProps</code> 和 <code>defineEmits</code></b></h2><p data-pid="ypvZm3Xo">要声明 props 和 emits 等选项，我们必须使用 <code>&lt;script setup&gt;</code> 中自动提供的所谓编译器宏 <code>defineProps</code> 和 <code>defineEmits</code>：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://picx.zhimg.com/v2-75a27ba83b01769fa2ac8fb4ad9004bb_b.jpg" data-caption="" data-size="normal" data-rawwidth="1040" data-rawheight="522" data-original-token="v2-cbc39eed6938af078cb6d33c1cddcc7e" class="origin_image zh-lightbox-thumb" width="1040" data-original="https://picx.zhimg.com/v2-75a27ba83b01769fa2ac8fb4ad9004bb_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="2ILfPSuX">这两个函数不需要导入，在预处理 <code>&lt;script setup&gt;</code> 时会自动编译。</p><p data-pid="hjEMyH5a">如果你使用了 TypeScript，那么最好也声明一下 props 和 emits 的类型：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://picx.zhimg.com/v2-c4035cb8726de02bd28363da574129a1_b.jpg" data-caption="" data-size="normal" data-rawwidth="1040" data-rawheight="612" data-original-token="v2-a4200351571b515ca8acabb5b46ecc65" class="origin_image zh-lightbox-thumb" width="1040" data-original="https://picx.zhimg.com/v2-c4035cb8726de02bd28363da574129a1_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><h2><b>6.3 多个 <code>script</code></b></h2><p data-pid="SaSDWRHi">在某些情况下，我们有可能希望在组件中声明一些自定义选项，比如自定义组件名称，<code>&lt;script setup&gt;</code> 实现不了的，可以用另外一种传统的写法，在编译 <code>*.vue</code> 文件时，这两个区块会自动合并。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic2.zhimg.com/v2-9dd2d4e7e30cd930715321518eb8afaf_b.jpg" data-caption="" data-size="normal" data-rawwidth="1040" data-rawheight="836" data-original-token="v2-a286f571f0efe07563317c8890fc227b" class="origin_image zh-lightbox-thumb" width="1040" data-original="https://pic2.zhimg.com/v2-9dd2d4e7e30cd930715321518eb8afaf_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><h2><b>6.4 defineOptions</b></h2><blockquote data-pid="MspGY5Dd">评论区有同学提到一个比较新的 Option：<code>defineOptions</code>。</blockquote><p data-pid="zH9mlm8V">在 <code>Vue 3.3+</code> 以后，<code>defineOptions</code> 这个宏可以用来直接在 <code>&lt;script setup&gt;</code> 中声明组件选项，而不必使用 6.3 中那种多个 <code>&lt;script&gt;</code> 块的方式了：</p><div class="highlight"><pre><code class="language-ts"><span class="nx">ts复制代码</span><span class="p">&lt;</span><span class="nt">script</span> <span class="na">setup</span><span class="p">&gt;</span>\n<span class="nx">defineOptions</span><span class="p">({</span>\n  <span class="nx">inheritAttrs</span>: <span class="kt">false</span><span class="p">,</span>\n  <span class="nx">customOptions</span><span class="o">:</span> <span class="p">{</span>\n    <span class="cm">/* ... */</span>\n  <span class="p">}</span>\n<span class="p">})</span>\n<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>\n</code></pre></div><ul><li data-pid="sLF1iGtz">仅支持 Vue 3.3+。</li><li data-pid="RHvdq509">这是一个宏定义，选项将会被提升到模块作用域中，无法访问 <code>&lt;script setup&gt;</code> 中不是字面常数的局部变量。</li></ul><p data-pid="FQ9DDNa1">比如：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic3.zhimg.com/v2-455f047de1e61cce447b8de1ca04653e_b.jpg" data-caption="" data-size="normal" data-rawwidth="929" data-rawheight="517" data-original-token="v2-6a7f5bb549b2060ac13b9ed066bc84bb" class="origin_image zh-lightbox-thumb" width="929" data-original="https://pic3.zhimg.com/v2-455f047de1e61cce447b8de1ca04653e_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="Cxkmbb48">在浏览器的 Vue Devtools 中：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic2.zhimg.com/v2-0efc84480e8a61c5a1c74b2965afe2ab_b.jpg" data-caption="" data-size="normal" data-rawwidth="2436" data-rawheight="988" data-original-token="v2-148c0cfda03ae3cb7c8a02c5eb478743" class="origin_image zh-lightbox-thumb" width="2436" data-original="https://pic2.zhimg.com/v2-0efc84480e8a61c5a1c74b2965afe2ab_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><blockquote data-pid="-28kGwY1">更详细的可以看一下官方文档：<a href="https://link.zhihu.com/?target=https%3A//link.juejin.cn/%3Ftarget%3Dhttps%253A%252F%252Fvue-macros.sxzz.moe%252Fmacros%252Fdefine-options.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">vue-macros: define-options</a></blockquote><h2><b>6.5 <code>defineExpose</code></b></h2><p data-pid="26LZcX_G">在 Vue 3 的 <code>Composition API</code> 中，<code>defineExpose</code> 用于将组件的一部分内容公开给父组件。你可以指定哪些属性、方法或其他内容可以被父组件访问和使用。比如：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-e80e5c03aa4962b5774831dfeb7bf3ee_b.jpg" data-caption="" data-size="normal" data-rawwidth="1040" data-rawheight="1466" data-original-token="v2-caa3323f0fc5b40153a1e89893fc7071" class="origin_image zh-lightbox-thumb" width="1040" data-original="https://pic1.zhimg.com/v2-e80e5c03aa4962b5774831dfeb7bf3ee_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="wxLjmJsB">定义了一些。</p><p data-pid="-puI0WLk">使用 <code>defineExpose</code> 函数将内部的属性 <code>exposedValue</code> 和一个方法 <code>exposedMethod</code> 暴露出去。在模板中，我们可以像使用普通的属性和方法一样使用这些暴露的内容。在点击按钮时，调用了 <code>exposedMethod</code> 方法。</p><p data-pid="CqCfKSpY">父组件可以像下面这样访问和使用子组件暴露的内容：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic3.zhimg.com/v2-e49c96e39841b5583fb6dc824e838582_b.jpg" data-caption="" data-size="normal" data-rawwidth="1040" data-rawheight="1062" data-original-token="v2-2b2fac428fffb21708c8aff0d864de53" class="origin_image zh-lightbox-thumb" width="1040" data-original="https://pic3.zhimg.com/v2-e49c96e39841b5583fb6dc824e838582_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="j5tltDBR">在父组件中，需要使用 <code>ref</code> 创建了一个对子组件的引用 <code>childComponent</code>。然后，我们可以通过 <code>childComponent.value</code> 来访问子组件实例，并调用其公开的方法 <code>exposedMethod</code>。</p><h2><b>6.6 defineSlots</b></h2><p data-pid="myeGWD-R">这个宏可以用于为 IDE 提供插槽名称和 props 类型检查的类型提示。</p><p data-pid="HbkHodgT"><code>defineSlots()</code> 只接受类型参数，没有运行时参数。类型参数应该是一个类型字面量，其中属性键是插槽名称，值类型是插槽函数。函数的第一个参数是插槽期望接收的 props，其类型将用于模板中的插槽 props。返回类型目前被忽略，可以是 <code>any</code>，但我们将来可能会利用它来检查插槽内容。</p><p data-pid="kxZHktGc">它还返回 <code>slots</code> 对象，该对象等同于在 setup 上下文中暴露或由 <code>useSlots()</code> 返回的 <code>slots</code> 对象。</p><div class="highlight"><pre><code class="language-ts"><span class="nx">ts复制代码</span><span class="p">&lt;</span><span class="nt">script</span> <span class="na">setup</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;ts&#34;</span><span class="p">&gt;</span>\n<span class="kr">const</span> <span class="nx">slots</span> <span class="o">=</span> <span class="nx">defineSlots</span><span class="o">&lt;</span><span class="p">{</span>\n  <span class="k">default</span><span class="p">(</span><span class="nx">props</span><span class="o">:</span> <span class="p">{</span> <span class="nx">msg</span>: <span class="kt">string</span> <span class="p">})</span><span class="o">:</span> <span class="kt">any</span>\n<span class="p">}</span><span class="o">&gt;</span><span class="p">()</span>\n<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>\n</code></pre></div><ul><li data-pid="xx3VXIYp">仅支持 Vue 3.3+。</li></ul><h2><b>6.7 <code>Suspense</code></b></h2><p data-pid="ntOa87KQ">在组件中，我们通常需要异步请求数据，比如在 <code>&lt;script setup&gt;</code> 的顶层使用了 <code>await</code>。以这种方式定义的组件必须与 <code>Suspense</code> 组件一起使用（React 有的我也要有？），这样 Vue 才能解决异步问题并正确加载组件。</p><p data-pid="gXA2AhEx"><code>&lt;Suspense&gt;</code> 是一个内置组件，用来在组件树中协调对异步依赖的处理。它让我们可以在组件树上层等待下层的多个嵌套异步依赖项解析完成，并可以在等待时渲染一个加载状态。</p><div class="highlight"><pre><code class="language-ts"><span class="nx">ts复制代码</span><span class="p">&lt;</span><span class="nt">script</span> <span class="na">setup</span><span class="p">&gt;</span>\n<span class="kr">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="sb">`/users/1`</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">d</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">d</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>\n<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>\n<span class="nx">ts复制代码</span><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>\n  <span class="p">&lt;</span><span class="nt">Suspense</span><span class="p">&gt;</span>\n    <span class="p">&lt;</span><span class="nt">AsyncComponent</span> <span class="p">/&gt;</span>\n  <span class="p">&lt;/</span><span class="nt">Suspense</span><span class="p">&gt;</span>\n<span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>\n</code></pre></div><blockquote data-pid="v6hfzc_V">不过需要注意：<code>&lt;Suspense&gt;</code> 还是一项实验性功能。它不一定会最终成为稳定功能，并且在稳定之前相关 API 也可能会发生变化。</blockquote><h2><b>7、SFC</b></h2><p data-pid="hrtUR75A">在 Vue 3 中，SFC（<code>Single File Component</code>，单文件组件）是一种将模板、脚本和样式封装在一个单独的文件中的开发模式。SFC 提供了一种组织和编写 Vue 组件的便捷方式，并提供了更好的可读性和可维护性。</p><p data-pid="YhChrau6">一个典型的 Vue 3 <code>SFC</code> 包含三个部分：</p><ul><li data-pid="rfCg07rT"><b>模板</b>（<code>template</code>）：每个 <code>.vue</code> 文件最多只能有一个<code>&lt;template&gt;</code>，内容会被 <code>@vue/compiler-dom</code> 预编译成 JavaScript 的渲染函数。</li><li data-pid="uzpbXieW"><b>脚本</b>（<code>script</code>）：每个<code>.vue</code>最多只能有一个<code>&lt;script&gt;</code>(不包含<code>&lt;script setup&gt;</code>)</li><li data-pid="y1O_ljLm"><b>样式</b>（<code>style</code>）：每个<code>.vue</code>可以有多个<code>&lt;style&gt;</code>，样式可以是普通的 CSS，也可以使用预处理器（如 Sass、Less）或 <code>CSS-in-JS</code> 库（如 CSS Modules）来编写。</li></ul><p data-pid="OxObPBvt">以下是一个示例 SFC 文件的结构：</p><div class="highlight"><pre><code class="language-ts"><span class="nx">ts复制代码</span><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>\n  <span class="c">&lt;!--</span> <span class="err">模板内容</span> <span class="o">--&gt;</span>\n<span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>\n<span class="err">​</span>\n<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>\n<span class="c1">// 脚本内容\n</span><span class="c1"></span><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>\n<span class="err">​</span>\n<span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>\n<span class="cm">/* 样式内容 */</span>\n<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>\n</code></pre></div><p data-pid="zemhH0dO"><b>因为浏览器并不认识<code>.vue</code>档</b>，所以在开发的时候，我们不能像以前一样直接通过 <code>live server</code> 在浏览器上预览项目，这也是为什么我们需要用到 <code>Vite</code> 或 <code>Vue Cli</code> 等建构工具，建构工具会根据 Vue 提供的 loader -<code>@vue/compiler-sfc</code> 来编译 <code>.vue</code> 文件。</p><p data-pid="_PuTIvPj">Vue 3 的编译器会解析 SFC 的模板、脚本和样式部分，并将它们转换为可执行的渲染函数、JavaScript 代码和样式。这样，开发人员可以通过单个文件来组织组件的结构和逻辑，提高代码的可维护性和可读性，并且在构建过程中，Vue 3 的编译器会将 SFC 转换为可执行的 Vue 组件，使其能够在浏览器中运行。</p><p data-pid="fM9UnGtB">打开浏览器的控制台，你就会发现，虽然它还有<code>.vue</code>，但你再仔细看看它，它已经是<code>js</code>了：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic3.zhimg.com/v2-c198019ec67305aaa5a0ce960f190fc2_b.jpg" data-caption="" data-size="normal" data-rawwidth="3024" data-rawheight="1653" data-original-token="v2-3464199d61f1c1731e4ddf8dd3a0c340" class="origin_image zh-lightbox-thumb" width="3024" data-original="https://pic3.zhimg.com/v2-c198019ec67305aaa5a0ce960f190fc2_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><h2><b>参考</b></h2><ul><li data-pid="ZbjSvFvr"><a href="https://link.zhihu.com/?target=https%3A//link.juejin.cn/%3Ftarget%3Dhttps%253A%252F%252Fcn.vuejs.org%252F" class=" wrap external" target="_blank" rel="nofollow noreferrer">Vue 中文官方文档</a></li></ul><p class="ztext-empty-paragraph"><br/></p><blockquote data-pid="GNMCCp2U">作者：_你当像鸟飞往你的山 链接：<a href="https://link.zhihu.com/?target=https%3A//juejin.cn/post/7277089907973603388" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">juejin.cn/post/72770899</span><span class="invisible">07973603388</span><span class="ellipsis"></span></a> 来源：稀土掘金 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</blockquote>',
      is_labeled: false,
      visited_count: 280,
      thumbnails: [
        'https://pica.zhimg.com/50/v2-dd3b64559109eb3fa26c765eed496f57_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-97f9e9b69bc7820a90eded323f58bf38_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-ef9d21a386545fd4bc89147330d6e7df_720w.jpg?source=b6762063',
        'https://pica.zhimg.com/50/v2-8c305360054f846be2f227279a47cf23_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-506860c54dc8766af99545cf0df18556_720w.jpg?source=b6762063',
        'https://pic1.zhimg.com/50/v2-269937a48b9a71007a2bf7a99e5df781_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-4afb8bfa37537f803871d5b829f36a99_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-4e74cd9e67d5d2ce7afd8dbaf9d2f866_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-03ddb15b07a5568cb19e489cf00226b3_720w.jpg?source=b6762063',
        'https://pica.zhimg.com/50/v2-d1586c0757a02ea1e5334f13d29aa75a_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-4d6adf7d881c03471eeda6498562ca1d_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-00cf3fc5135709bc9933833a0085223b_720w.jpg?source=b6762063',
        'https://pic1.zhimg.com/50/v2-54cd8145a2d74c59f8612218d0bab5ed_720w.jpg?source=b6762063',
        'https://pic1.zhimg.com/50/v2-3669e5c0ad2d02dba73c25418cd9de44_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-6217f6579fcee1a3ae5fec4ff648d4eb_720w.jpg?source=b6762063',
        'https://pic1.zhimg.com/50/v2-06eeaa9562f175ae9d14d8f10226f963_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-c37a9bcf8a1a9c1a60b80a93ab3dc086_720w.jpg?source=b6762063',
      ],
      favorite_count: 21,
    },
    brief: '{"source": "TS", "type": "article", "id": 688204023}',
    attached_info:
      'CtMECJ31v++gwcOjlQEQBxoJMjQxMDY0NTM2IM237q8GKAQwAEANSiMKGFRTX1NPVVJDRV9XQVJNX1VQX0JPT1NUMhIBMBgAIAA6AEoiChdUU19TT1VSQ0VfV0FSTVVQX1JVQ0VORRIBMBgAIAA6AGIgY2NkZDU1YTFkZjRmNGQyZTNmOTc5Yzc5ZWFkMmIwNzNyCTY4ODIwNDAyM6oBCXJlY29tbWVuZMIBIGRhMzAzOThiMmZjZGMxZWNmMzFlNjUyNTc2MTVmYmEy8gEKCAwSBk5vcm1hbPIBKAgKEiQ3OWY3YmIwYy0xMDIzLTQxMDQtYmMyYy01NDc1MzM1MGQyZGPyAQUICxIBM4ICAIgCr8fsyuYxkgIgZGEzMDM5OGIyZmNkYzFlY2YzMWU2NTI1NzYxNWZiYTKaAgDaAhhUU19TT1VSQ0VfV0FSTV9VUF9CT09TVDLoAgP6AgtOT1JNQUxfRkxPV4oDIDE4YWRhN2ZkYjRhNTRjOTg5MzU2YTQwZWQ2Y2IwZjhimgMNCgJ2MBAAGgVvdGhlcqgDmALYAwDqAwt0ZXh0X3J1Y2VuZfoDEBIMVU5LTk9XTl9NT0RFIACABACIBACSBAZOb3JtYWyaBAEzoAQAqAQAsAQAugQCYWnCBAM0MDDIBADSBA/mjqjojZDlt7Lmm7TmlrDYBADwBAD5BAAAAECi4qE/gQUAAAAAAAAAAIkF+fX8fGmfpD+SBQnmrabkvq/ljLqaBQNkZnSiBQNkZnSyBQExuQUAAAAAAAAAANAFAOAFAOgFAPAFA5ICJAoJMjQxMDY0NTM2Egk2ODgyMDQwMjMYByIKSU1BR0VfVEVYVA==',
    action_card: false,
  },
  {
    id: '14_1711164564.773',
    type: 'feed',
    offset: 14,
    verb: 'TOPIC_ACKNOWLEDGED_ANSWER',
    created_time: 1711164564,
    updated_time: 1711164564,
    target: {
      id: 2905217793,
      type: 'answer',
      url: 'https://api.zhihu.com/answers/2905217793',
      author: {
        id: '04423b1644e9be38b02232c27f30058a',
        url: 'https://api.zhihu.com/people/04423b1644e9be38b02232c27f30058a',
        user_type: 'people',
        url_token: 'king-sun-98',
        name: '化学TeacherLi',
        headline: '',
        avatar_url:
          'https://picx.zhimg.com/50/657db81437b6d24d8d8eb1d6e4d6d57f_l.jpg?source=b6762063',
        is_org: false,
        gender: 0,
        followers_count: 4441,
        is_following: false,
        is_followed: false,
      },
      created_time: 1677033935,
      updated_time: 1704610092,
      voteup_count: 362,
      thanks_count: 233,
      comment_count: 37,
      is_copyable: true,
      question: {
        id: 22097309,
        type: 'question',
        url: 'https://api.zhihu.com/questions/22097309',
        author: {
          id: '8788d6062dfa79e6a29e269b885a4db1',
          url: 'https://api.zhihu.com/people/8788d6062dfa79e6a29e269b885a4db1',
          user_type: 'people',
          url_token: 'zhou-meng-long-12',
          name: '周朦胧',
          headline: '',
          avatar_url:
            'https://pic1.zhimg.com/50/6a70080d0_l.jpg?source=b6762063',
          is_org: false,
          gender: 1,
          followers_count: 0,
          is_following: false,
          is_followed: false,
        },
        title: '装修后有什么除甲醛最好的方法？',
        created: 1385184828,
        answer_count: 0,
        follower_count: 0,
        comment_count: 6,
        bound_topic_ids: [1280, 1282],
        is_following: false,
        excerpt: '',
        relationship: {
          is_author: false,
        },
        detail: '',
        question_type: 'normal',
      },
      excerpt:
        '作为一个化学老师， 在除甲醛方面可以说是专业的，只要根据甲醛的特性，运用科学的方法，就能将甲醛快速清除！今天就给大家深度剖析一下除甲醛这件事，我敢说，看完这篇文章， 绝对能让大家避免90%以上的除甲醛智商税。 知识点一：什么是甲醛？甲醛，化学式HCHO或CH₂O，式量30.03，又称蚁醛。 它是无色有刺激性的气体，对人的眼、鼻等都有刺激作用。40%的甲醛水溶液就是实验室中经常用到的福尔马林，也就是保存尸体标本、杀菌消…',
      excerpt_new:
        '作为一个化学老师， 在除甲醛方面可以说是专业的，只要根据甲醛的特性，运用科学的方法，就能将甲醛快速清除！今天就给大家深度剖析一下除甲醛这件事，我敢说，看完这篇文章， 绝对能让大家避免90%以上的除甲醛智商税。 知识点一：什么是甲醛？甲醛，化学式HCHO或CH₂O，式量30.03，又称蚁醛。 它是无色有刺激性的气体，对人的眼、鼻等都有刺激作用。40%的甲醛水溶液就是实验室中经常用到的福尔马林，也就是保存尸体标本、杀菌消…',
      preview_type: 'default',
      preview_text: '',
      reshipment_settings: 'allowed',
      content:
        '<p data-pid="Ni6z1Wgo">作为一个化学老师，<b>在除甲醛方面可以说是专业的，只要根据甲醛的特性，运用科学的方法，就能将甲醛快速清除！</b></p><p data-pid="GtUf299k">今天就给大家深度剖析一下除甲醛这件事，我敢说，看完这篇文章，<b>绝对能让大家避免90%以上的除甲醛智商税。</b></p><figure data-size="normal"><img src="https://pica.zhimg.com/v2-a6186493069d87d8b292710e6fcd15f6_b.jpg" data-rawwidth="271" data-rawheight="322" data-size="normal" data-caption="" data-original-token="v2-1760b382ae972c2333d342f907198d30" data-default-watermark-src="https://pic1.zhimg.com/v2-fbf27fbb8ead9e909acdf7caf90970e0_b.jpg" class="content_image" width="271"/></figure><p data-pid="rRb7zchj"><b>知识点一：什么是甲醛？</b></p><p data-pid="rAgkUGhs">甲醛，化学式HCHO或CH₂O，式量30.03，又称蚁醛。</p><p data-pid="k86NeHqr">它是无色有刺激性的气体，对人的眼、鼻等都有刺激作用。40%的甲醛水溶液就是实验室中经常用到的福尔马林，也就是保存尸体标本、杀菌消毒的溶液。</p><p data-pid="Brey01mC">早在2017年，世界卫生组织国际癌症研究机构就将甲醛放在了一类致癌物列表中，换句话说就是甲醛有毒哦！~</p><p data-pid="wtAriaW9"><b>知识点二：甲醛是怎么和家装扯上关系的？</b></p><p data-pid="JARsgqOU">甲醛可用于合成树脂、塑料、橡胶、皮革、造纸、染料、制药、建筑材料以及防腐剂、粘合剂、胶水等。而各种装修材料(人造板材、墙纸、家具、地毯等）都会使用大量的粘合剂或胶水，所以室内装修不可避免的就会含有甲醛。</p><p data-pid="qZYJp_Q2"><b>知识点三：除甲醛误区</b></p><p data-pid="smsRpJCY">针对甲醛，多才多艺的网友们也是想尽了各种各样的办法。但是！很多除甲醛的方法看似是妙招，但其实都是自欺欺人!</p><p data-pid="aCnRNnjS"><b>知识点四：科学的除醛方法</b></p><p data-pid="pMvcl11V">除甲醛还是不要相信那些小偏方了，我要们相信科学！相信科学！相信科学！（重要的事情必须说三遍!!!)</p><p data-pid="NxGaHbXr">想要科学有效的清除甲醛，需要针对不同状态的甲醛，分别进行治理，才能达到最佳效果！室内的甲醛一般分为游离态，附着态，结合态三种状态，下面就针对不同状态的甲醛进行逐一破解。</p><figure data-size="normal"><img src="https://pica.zhimg.com/v2-a71e3f76dfd9aa821a87f35bdf375eda_b.jpg" data-rawwidth="307" data-rawheight="291" data-size="normal" data-caption="" data-original-token="v2-f22cab3607fae410830cc05a611771e4" data-default-watermark-src="https://pic1.zhimg.com/v2-eb2bec34350c7398ff7ee0298c5a5d5c_b.jpg" class="content_image" width="307"/></figure><p data-pid="W9PcY7vZ"><b>误区1：菠萝皮、柚子皮</b></p><p data-pid="VsEspDXE">堪称骨灰级的迷信无知的方法，现实版的掩耳盗铃！很多人以为家里没有味道了，都是柚子皮的清香，那甲醛肯定也都清除了，简直大错特错！这只是果皮通过自己身的味道把甲醛的味道掩盖住了而已，实际上卵用没有，甲醛一点也没少!</p><p data-pid="x0_EZaEo"><b>误区2：醋</b></p><p data-pid="ec_mJEF4">看到这个我更是呵呵了，它和果皮简直是有异曲同工之妙啊，而相信这种方法的人也emmmm.....我就不多说了，我怕有人抬杠啊，醋也是通过自身强烈的气味把甲醛的味道掩盖了而已，央视早就实验证明过，用醋除甲醛是完全无效的！</p><p data-pid="kPHqBd0e"><b>误区3：茶叶</b></p><p data-pid="a7MmKMJt">民间妙招中还有茶叶除甲醛一说，将干的茶叶放置在鞋柜或者冰箱里就可以除味除湿，放在刚装修的房子里还可以吸附甲醛。这个说法完全是错误的，可能有些人认为茶叶的孔隙多，应该具备一定的吸附能力，但事实上茶叶的孔隙过大，无法留住甲醛分子，甲醛只是在其中来回穿梭，所以再多的茶叶也不能除甲醛，所以茶叶除甲醛哒咩！！~</p><figure data-size="normal"><img src="https://pica.zhimg.com/v2-ffc4e2f01fda60e7ede84befed87fcf6_b.jpg" data-rawwidth="276" data-rawheight="272" data-size="normal" data-caption="" data-original-token="v2-68dedb7eef9f2e350f1cb221a8f35130" data-default-watermark-src="https://pic2.zhimg.com/v2-1b84d52c41b89d5c3008dac1edf7423f_b.jpg" class="content_image" width="276"/></figure><p data-pid="tnc5-oWg"><b>另外我总结了几个有效方法，重点在方法一、方法三【敲重点！】</b></p><h3><b>方法一：化学分解</b></h3><p data-pid="oUh9D7ay">这一方法主要针对的是结合态的甲醛，即板材内部的甲醛。这类甲醛会持续挥发成游离态甲醛，是最难清除的，这也是室内甲醛能释放长达3-15年的主要原因，<b>对于这类甲醛使用沐光蓝是个不错的选择。</b></p><figure data-size="normal"><img src="https://pica.zhimg.com/v2-e5984c0a81cbbc0ba4fded500cf98b7e_b.jpg" data-rawwidth="536" data-rawheight="703" data-size="normal" data-caption="" data-original-token="v2-466ad3786637e13c440a1377bcd9fbb5" data-default-watermark-src="https://pic4.zhimg.com/v2-db49d6a6615cadfbde5b0f427e263ec7_b.jpg" class="origin_image zh-lightbox-thumb" width="536" data-original="https://pica.zhimg.com/v2-e5984c0a81cbbc0ba4fded500cf98b7e_r.jpg"/></figure><p data-pid="ibNKNd2y">它是一种比光触媒更为优质的除甲醛产品，<b>不会受到任何环境因素的影响，可以渗透到板材内部将甲醛催发出来</b>，并24小时持续分解甲醛等有害物质，而且<b>不会产生二次污染</b>，能从根源上解决室内装修污染问题，也不会破坏任何家具板材、影响美观。<b>可以去看看这款，最快最有效的除醛！</b></p><p data-pid="N_aSWpEy"><b>------------更新---------</b></p><p data-pid="b8RZN1NU"><b>了解我的宝子都知道，我今年的教学任务特别的重，我在线的时间是有限的，导致大量私信没时间回复，在此先给大家道个歉。我今天把链接公布出来，大家有用的自己拿走，私信我就不一一回复了。</b></p><p data-pid="7V_7ju2e"><b>-------------更新--------</b></p><a data-draft-node="block" data-draft-type="link-card" href="https://xg.zhihu.com/plugin/ae29189cbbef1c24313b5bffae0bdfd7?BIZ=ECOMMERCE" class="internal"><span class="invisible">https://</span><span class="visible">xg.zhihu.com/plugin/ae2</span><span class="invisible">9189cbbef1c24313b5bffae0bdfd7?BIZ=ECOMMERCE</span><span class="ellipsis"></span></a><h3><b>方法二：物理吸附</b></h3><p data-pid="VD5b5415">这一方法既能治理游离态的甲醛，还能<b>治理附着在家具板材表面的甲醛</b>，但是普通吸附材料只能吸附不能分解，而<b>睿石则具有吸附和分解的双重功效</b>，其内部拥有规则的蜂窝状空隙，比面积庞大，<b>可以主动的将甲醛吸附，并分解成水和二氧化碳，其吸附能力强，是传统吸附材料的十几倍，免晒免换使用期限长达3年，性价比高。</b></p><figure data-size="normal"><img src="https://pic3.zhimg.com/v2-453bd148a0492fd06f74d74f11c07850_b.jpg" data-rawwidth="502" data-rawheight="578" data-size="normal" data-caption="" data-qrcode-action="none" data-original-token="v2-b8586cfc0c909704bce84e3bb1c37c6e" data-default-watermark-src="https://pic2.zhimg.com/v2-932246eb41f3aaae437fa24e6d995659_b.jpg" class="origin_image zh-lightbox-thumb" width="502" data-original="https://pic3.zhimg.com/v2-453bd148a0492fd06f74d74f11c07850_r.jpg"/></figure><p data-pid="r0lfX4YE"><b>在选择时需注意它是灰色的矿石，呈不规则形状，不是圆形颗粒。它是这样事滴↓↓↓它是一种天然矿石，在对治理甲醛有效外对人体无害，母婴级别的，所以还是很推荐的！</b></p><a data-draft-node="block" data-draft-type="link-card" href="https://xg.zhihu.com/plugin/f8ed6c279a20951ad20585fbe857c4c8?BIZ=ECOMMERCE" class="internal"><span class="invisible">https://</span><span class="visible">xg.zhihu.com/plugin/f8e</span><span class="invisible">d6c279a20951ad20585fbe857c4c8?BIZ=ECOMMERCE</span><span class="ellipsis"></span></a><p data-pid="67mJW55a"><b>方法三：高温高湿</b></p><p data-pid="wAMToJd2">这一方法对结合态的甲醛有着催发的效果，因为甲醛在高温高湿的环境下易挥发。所以可以利用空调制热、加湿器、蒸汽拖把等来增加室内的温度与湿度，让甲醛更快更多的释放出来，接着打开窗户让甲醛排出去。</p><p data-pid="Ck20Ghv2">但是在使用这一方法时需要注意，在“闷”的过程中，家里不要留人，另外这一方法清除甲醛的效果有限，因为甲醛释放到一定程度时就会停止，所以仅能作为辅助方法使用！</p><figure data-size="normal"><img src="https://pica.zhimg.com/v2-2ab0b52f3a16c9e3cd0036e41ef6b716_b.jpg" data-rawwidth="298" data-rawheight="269" data-size="normal" data-caption="" data-original-token="v2-b2aad3249ec7c6fcec44e56bc4b1261d" data-default-watermark-src="https://picx.zhimg.com/v2-75ce49a3fe133c2f7bd173fa274c6a49_b.jpg" class="content_image" width="298"/></figure><h3><b>方法四：通风</b></h3><p data-pid="LRXeEOyQ">这一方法主要针对的是游离态的甲醛，即挥发到空气中的甲醛，这种状态的甲醛是最好清除的，最简单常用的方法就是通风了。</p><figure data-size="normal"><img src="https://picx.zhimg.com/v2-6b9adf6355e7a669afb0696259c7046f_b.jpg" data-rawwidth="459" data-rawheight="548" data-size="normal" data-caption="" data-original-token="v2-239ae7c3f33aa537eb3c48c39f4a6f01" class="origin_image zh-lightbox-thumb" width="459" data-original="https://picx.zhimg.com/v2-6b9adf6355e7a669afb0696259c7046f_r.jpg"/></figure><p data-pid="w_6yKg4C">打开门窗使空气自然循环，通过空气流通将游离态的甲醛排放到外面，简单而有效。最好尽量保持室内长时间开窗通风，也可以用电风扇辅助加速室内外空气对流，这样能更快速的将甲醛排放到室外，新买来的家具也可以放在通风出口处，甲醛异味会直接排除在室外。不过想要通过开窗通风完全的去除甲醛是不可能的，<b>它只能在除甲醛时起到辅助的作用。</b></p><h3><b>方法五：专业除甲醛机构</b></h3><p data-pid="Lmsu1mt_">现在网上有很多极端人士说除甲醛公司就是骗人的，再此我要说句公道话，在任何一个行业，都有专业和非专业的，有正品和水货，我们不能因为个别公司就否定整个除甲醛行业。</p><p data-pid="G-IWddPj">存在即合理，要不然除甲醛公司也不能存活至今，专业的除甲醛公司不仅设备、技术全面先进，而且能根据室内不同类别的甲醛释放源，使用不同作用原理的除醛产品，配套专业的工具和物理工艺，以达到最佳的治理效果。不过专业的除甲醛服务收费都是不低的，一般是几千元起，适合不差钱又着急入住的土豪。如果有人一定要请专业的除甲醛公司的话，我推荐银盾除甲醛公司，我推荐这个机构</p><p data-pid="hxUz4i9U">没有其他原因，只是我曾经了解过他们的除醛技术，我从化学专业的角度来看，他们的除醛技术是高效而安全的，仅此而已。</p><p data-pid="e6fQctiz"><b>快速性价比又高，我还是推荐他两搭配起来用！一催一吸强强联手！</b></p><a data-draft-node="block" data-draft-type="link-card" href="https://xg.zhihu.com/plugin/f8ed6c279a20951ad20585fbe857c4c8?BIZ=ECOMMERCE" class="internal"><span class="invisible">https://</span><span class="visible">xg.zhihu.com/plugin/f8e</span><span class="invisible">d6c279a20951ad20585fbe857c4c8?BIZ=ECOMMERCE</span><span class="ellipsis"></span></a><a data-draft-node="block" data-draft-type="link-card" href="https://xg.zhihu.com/plugin/ae29189cbbef1c24313b5bffae0bdfd7?BIZ=ECOMMERCE" class="internal"><span class="invisible">https://</span><span class="visible">xg.zhihu.com/plugin/ae2</span><span class="invisible">9189cbbef1c24313b5bffae0bdfd7?BIZ=ECOMMERCE</span><span class="ellipsis"></span></a><p data-pid="L-KxWYV6">以上就是今天要说的全部内容啦，希望能帮到有需要的朋友，码字不易，分享免费，觉得有用的话，麻烦动动你的小手点赞收藏一下！！！</p><figure data-size="normal"><img src="https://picx.zhimg.com/v2-729ab3acaf3bfcc20ca3a2148e5ff3e9_b.jpg" data-rawwidth="261" data-rawheight="280" data-size="normal" data-caption="" data-original-token="v2-9311cb1c70cf6a91dbd2f699030a567d" data-default-watermark-src="https://pic2.zhimg.com/v2-1e018a904f1aab8db942bf54ffde3413_b.jpg" class="content_image" width="261"/></figure><p data-pid="08HSsCDc"><b>大家评论区都说的是什么狼虎之词啊？我可是一条评论都没删！</b><br/> </p>',
      relationship: {
        is_thanked: false,
        is_nothelp: false,
        voting: 0,
      },
      is_labeled: false,
      visited_count: 451692,
      favorite_count: 1177,
      answer_type: 'normal',
    },
    brief: '{"source": "TS", "type": "answer", "id": 2905217793}',
    attached_info:
      'CrYFCJ31v++gwcOjlQEQBBoJNTU4MzA1NzkxIM+D1p8GKOoCMCVADkoZCg5Qcm9tb3Rpb25FeHRyYRIBMBgAIAA6AFoHMTAxOTcyMGIgY2NkZDU1YTFkZjRmNGQyZTNmOTc5Yzc5ZWFkMmIwNzNyCjI5MDUyMTc3OTOKAQgyMjA5NzMwOaoBCXJlY29tbWVuZMIBIDA0NDIzYjE2NDRlOWJlMzhiMDIyMzJjMjdmMzAwNThh8gEJCAwSBVpQbHVz8gEoCAkSJDM5YTM4YWM5LTQ0MTgtNGExNC04OTY4LWEzMWNlOTMyZGNiNPIBKAgKEiRlOTViOTc3My1lM2JlLTRmOTYtODcxNS1hYzJkNzI5OGE2ZTLyAQUICxIBM/IBCAgIEgR0cnVlggIAiAKvx+zK5jGSAiAwNDQyM2IxNjQ0ZTliZTM4YjAyMjMyYzI3ZjMwMDU4YZoCAMoCG09sZENvbnRlbnRSZWR1Y2U1V2VpZ2h0UnVsZcoCF1pwbHVzR3JTY29yZVdlaWdodFJ1bGUxygIOQ3VycmVuY3lSYW5rZXLKAg5zbG90SW5zZXJ0UnVsZdoCDlByb21vdGlvbkV4dHJh6AID+gILTk9STUFMX0ZMT1eKAyAxOGFkYTdmZGI0YTU0Yzk4OTM1NmE0MGVkNmNiMGY4YpoDDQoCdjAQABoFb3RoZXKoA+zIG9gDAPoDEBIMVU5LTk9XTl9NT0RFIACABAGIBACSBAVaUGx1c5oEATOgBACoBACwBAC6BAZtYW51YWzCBAMxNTXIBADSBA/mjqjojZDlt7Lmm7TmlrDYBADwBAD5BAAAAACECJA/gQWRzhQouQNOQIkF+fX8fGmfpD+SBQnmrabkvq/ljLqaBQNkZnSiBQNkZnSyBQExuQVdR+gCbhgMQNAFAOAFAOgFAPAFA5ICJQoJNTU4MzA1NzkxEgoyOTA1MjE3NzkzGAQiCklNQUdFX1RFWFQ=',
    action_card: false,
    promotion_extra:
      '{"is_card":true,"id":"2696207","topstory_info":"bid=0&pctr=0.02225556969642639&price=123.73390502888617&pv_id=39a38ac9-4418-4a14-8968-a31ce932dcb4","parameters":"plugcb=https%3A%2F%2Fsugar.zhihu.com%2Fplutus_adreaper_callback%3Fcid%3D2696207%26ccid%3D988580%26zoneid%3D10012%26adid%3D2748092%26sid%3D39a38ac9-4418-4a14-8968-a31ce932dcb4%26adsource%3Dzhi_plus%26ocpxs%3D1%26ocpxp%3D2046%26dynamictitle%3D1595065270518947840%26mixinfo%3D__MIX__INFO__%26campaignid%3D1827093%26cbed%3DCidJdwhlOyYvRm9CBhJpAlkpTTgdcWhlfWRiSQBneQFTdQ15DXJicHgTZlcHdX5zTncLJkwxBSwhQjsTFGJ-FVgEFHsWdm55fRFqVgBldQJadQt6DWZoA2sXYAhSIC9vCSMceApmaQF_C2ZRCWl_A1N3DnMNdGN1fx13VXJ1fgIJKlY-HXFoZX1kY0IDE2kCWSBaOltmaHJrFhNWFGIPFVl3Ti9RJDI0K0ENAVAzOF8ZYAt4HXAbcWsXEUIDYi9fGDFmLFkgLi88AGBVFGMNAU5yfWxZKmdyeRFqVwhialEZLgR7HiIsKXMQYF8JYngWCj9QdwlzanF8AzAIXiQlVFZ1HyhIfmxwYBVgXgFodABYdQl7C3VtdWhGMw4MYXQCXHUAeR4gOy5zQzMLQjVqUw8xUHcNdmJzfhBlXgB2L1QfNgR7HiA-NDoYYkFSNyUNW2NaIlp-amYtTG9SBGh_AF5yAHseIDYzcxZiVwRmalMENgR8CG1qcncVal8BY3wAWnYPfQ1lOS86GGdBUiAlDU0mSTgFcXdxaEYgDgxieglddwl9HiAufXcdalIJYGpTHzEEeh4gLjlzRDwURjU-Fg8mTzgFc3RwfhVmVQdofghTcwh4C3Vvd3wXZUFUMzxTGHgJbF0gKiM6GGJBVzMlVFZjUCkFcnwpLUo8Dgx2JVcYeAlsVDYzfXcRYlYGYXsDX2NWKUg7PS8vSW9WBHYjUxs9SXcKc252aEoxF0kjcQFNKlo8Sn5qbn4Ua14GY3gIXXMPewFya3B_AyIPUm19Fhs3XChIfmtyegthXwJnfQNdcgp-AXFrdGhVIA4MYXwAWXcNfB4zKCl8GGNVBGB_BE03SThRfm14eBBqQUI5cQNSJApyWSBjbXoRY18cZC0BX2gBcw57dyF9FDECCGN-VAgnDWxLKjd9eB1jUAFgfAhffQl7DHJrcH4VZUFCP3ECTTFKJQVyfDUnS29WAWB8AVt1AXseNSApcwMoF10lP0AfeAlsQjMpLHMV0IK_CRj-PpI%3D%26cmixid%3D%26cmixvs%3D","sign":"9fd8cdb1-2852-4cb7-8f2f-8a29477105b7","mobile_experiment":null,"new_asset":"","click_tracks":["https://sugar.zhihu.com/ad-track/zplus_log?ar=0.015657484531402588&cc=510100&cdtiso=0.11945976388578958&cl=&cla=3&cmi=&cmv=&cost=&currency=1&cv=&dts=1711164563&ed=CidJdwhlOyYvRm9CBhJpAlkpTTgdcWhlfWRiSQBneQFTdQ15DXJicHgTZlcHdX5zTncLJkwxBSwhQjsTFGJ-FVgEFHsWdm55fRFqVgBldQJadQt6DWZoA2sXYAhSIC9vCSMceApmaQF_C2ZRCWl_A1N3DnMNdGN1fx13VXJ1fgIJKlY-HXFoZX1kY0IDE2kCWSBaOltmaHJrFhNWFGIPFVl3Ti9RJDI0K0ENAVAzOF8ZYAt4HXAbcWsXEUIDYi9fGDFmLFkgLi88AGBVFGMNAU5yfWxZKmdyeRFqVwhialEZLgR7HiIsKXMQYF8JYngWCj9QdwlzanF8AzAIXiQlVFZ1HyhIfmxwYBVgXgFodABYdQl7C3VtdWhGMw4MYXQCXHUAeR4gOy5zQzMLQjVqUw8xUHcNdmJzfhBlXgB2L1QfNgR7HiA-NDoYYkFSNyUNW2NaIlp-amYtTG9SBGh_AF5yAHseIDYzcxZiVwRmalMENgR8CG1qcncVal8BY3wAWnYPfQ1lOS86GGdBUiAlDU0mSTgFcXdxaEYgDgxieglddwl9HiAufXcdalIJYGpTHzEEeh4gLjlzRDwURjU-Fg8mTzgFc3RwfhVmVQdofghTcwh4C3Vvd3wXZUFUMzxTGHgJbF0gKiM6GGJBVzMlVFZjUCkFcnwpLUo8Dgx2JVcYeAlsVDYzfXcRYlYGYXsDX2NWKUg7PS8vSW9WBHYjUxs9SXcKc252aEoxF0kjcQFNKlo8Sn5qbn4Ua14GY3gIXXMPewFya3B_AyIPUm19Fhs3XChIfmtyegthXwJnfQNdcgp-AXFrdGhVIA4MYXwAWXcNfB4zKCl8GGNVBGB_BE03SThRfm14eBBqQUI5cQNSJApyWSBjbXoRY18cZC0BX2gBcw57dyF9FDECCGN-VAgnDWxLKjd9eB1jUAFgfAhffQl7DHJrcH4VZUFCP3ECTTFKJQVyfDUnS29WAWB8AVt1AXseNSApcwMoF10lP0AfeAlsQjMpLHMV0IK_CRj-PpI=&exp=false&hp=0&isy=__IMAGE_STYLE__&iti=__IS_THREE_IMAGE__&mcdti=1595065270518947840&mcdtt=1&mix=__MIX__INFO__&obf=&octr=0.015657484531402588&pt=3&ri=feed-root:currency:efb126c1-e43c-436c-992f-bb787d00859a&tev=0&tso=0&ui=218.88.27.228&zk=&zpluspt=0&zpt=&zri=-7690162402365539683&at=CjEEKVQqOSuIYIdBvEo7Wg=="],"view_tracks":["https://sugar.zhihu.com/ad-track/zplus_log?ar=0.015657484531402588&cc=510100&cdtiso=0.11945976388578958&cl=&cla=3&cmi=&cmv=&cost=&currency=1&cv=&dts=1711164563&ed=CidJdwhlOyYvRm9CBhJpAlkpTTgdcWhlfWRiSQBneQFTdQ15DXJicHgTZlcHdX5zTncLJkwxBSwhQjsTFGJ-FVgEFHsWdm55fRFqVgBldQJadQt6DWZoA2sXYAhSIC9vCSMceApmaQF_C2ZRCWl_A1N3DnMNdGN1fx13VXJ1fgIJKlY-HXFoZX1kY0IDE2kCWSBaOltmaHJrFhNWFGIPFVl3Ti9RJDI0K0ENAVAzOF8ZYAt4HXAbcWsXEUIDYi9fGDFmLFkgLi88AGBVFGMNAU5yfWxZKmdyeRFqVwhialEZLgR7HiIsKXMQYF8JYngWCj9QdwlzanF8AzAIXiQlVFZ1HyhIfmxwYBVgXgFodABYdQl7C3VtdWhGMw4MYXQCXHUAeR4gOy5zQzMLQjVqUw8xUHcNdmJzfhBlXgB2L1QfNgR7HiA-NDoYYkFSNyUNW2NaIlp-amYtTG9SBGh_AF5yAHseIDYzcxZiVwRmalMENgR8CG1qcncVal8BY3wAWnYPfQ1lOS86GGdBUiAlDU0mSTgFcXdxaEYgDgxieglddwl9HiAufXcdalIJYGpTHzEEeh4gLjlzRDwURjU-Fg8mTzgFc3RwfhVmVQdofghTcwh4C3Vvd3wXZUFUMzxTGHgJbF0gKiM6GGJBVzMlVFZjUCkFcnwpLUo8Dgx2JVcYeAlsVDYzfXcRYlYGYXsDX2NWKUg7PS8vSW9WBHYjUxs9SXcKc252aEoxF0kjcQFNKlo8Sn5qbn4Ua14GY3gIXXMPewFya3B_AyIPUm19Fhs3XChIfmtyegthXwJnfQNdcgp-AXFrdGhVIA4MYXwAWXcNfB4zKCl8GGNVBGB_BE03SThRfm14eBBqQUI5cQNSJApyWSBjbXoRY18cZC0BX2gBcw57dyF9FDECCGN-VAgnDWxLKjd9eB1jUAFgfAhffQl7DHJrcH4VZUFCP3ECTTFKJQVyfDUnS29WAWB8AVt1AXseNSApcwMoF10lP0AfeAlsQjMpLHMV0IK_CRj-PpI=&exp=false&hp=0&isy=__IMAGE_STYLE__&iti=__IS_THREE_IMAGE__&mcdti=1595065270518947840&mcdtt=1&mix=__MIX__INFO__&obf=&octr=0.015657484531402588&pt=3&ri=feed-root:currency:efb126c1-e43c-436c-992f-bb787d00859a&tev=0&tso=0&ui=218.88.27.228&zk=&zpluspt=0&zpt=&zri=-7690162402365539683&at=CjEEPFEmLWm8-o_znDYB"],"view_x_tracks":["https://sugar.zhihu.com/ad-track/zplus_log?ar=0.015657484531402588&cc=510100&cdtiso=0.11945976388578958&cl=&cla=3&cmi=&cmv=&cost=&currency=1&cv=&dts=1711164563&ed=CidJdwhlOyYvRm9CBhJpAlkpTTgdcWhlfWRiSQBneQFTdQ15DXJicHgTZlcHdX5zTncLJkwxBSwhQjsTFGJ-FVgEFHsWdm55fRFqVgBldQJadQt6DWZoA2sXYAhSIC9vCSMceApmaQF_C2ZRCWl_A1N3DnMNdGN1fx13VXJ1fgIJKlY-HXFoZX1kY0IDE2kCWSBaOltmaHJrFhNWFGIPFVl3Ti9RJDI0K0ENAVAzOF8ZYAt4HXAbcWsXEUIDYi9fGDFmLFkgLi88AGBVFGMNAU5yfWxZKmdyeRFqVwhialEZLgR7HiIsKXMQYF8JYngWCj9QdwlzanF8AzAIXiQlVFZ1HyhIfmxwYBVgXgFodABYdQl7C3VtdWhGMw4MYXQCXHUAeR4gOy5zQzMLQjVqUw8xUHcNdmJzfhBlXgB2L1QfNgR7HiA-NDoYYkFSNyUNW2NaIlp-amYtTG9SBGh_AF5yAHseIDYzcxZiVwRmalMENgR8CG1qcncVal8BY3wAWnYPfQ1lOS86GGdBUiAlDU0mSTgFcXdxaEYgDgxieglddwl9HiAufXcdalIJYGpTHzEEeh4gLjlzRDwURjU-Fg8mTzgFc3RwfhVmVQdofghTcwh4C3Vvd3wXZUFUMzxTGHgJbF0gKiM6GGJBVzMlVFZjUCkFcnwpLUo8Dgx2JVcYeAlsVDYzfXcRYlYGYXsDX2NWKUg7PS8vSW9WBHYjUxs9SXcKc252aEoxF0kjcQFNKlo8Sn5qbn4Ua14GY3gIXXMPewFya3B_AyIPUm19Fhs3XChIfmtyegthXwJnfQNdcgp-AXFrdGhVIA4MYXwAWXcNfB4zKCl8GGNVBGB_BE03SThRfm14eBBqQUI5cQNSJApyWSBjbXoRY18cZC0BX2gBcw57dyF9FDECCGN-VAgnDWxLKjd9eB1jUAFgfAhffQl7DHJrcH4VZUFCP3ECTTFKJQVyfDUnS29WAWB8AVt1AXseNSApcwMoF10lP0AfeAlsQjMpLHMV0IK_CRj-PpI=&exp=false&hp=0&isy=__IMAGE_STYLE__&iti=__IS_THREE_IMAGE__&mcdti=1595065270518947840&mcdtt=1&mix=__MIX__INFO__&obf=&octr=0.015657484531402588&pt=3&ri=feed-root:currency:efb126c1-e43c-436c-992f-bb787d00859a&tev=0&tso=0&ui=218.88.27.228&zk=&zpluspt=0&zpt=&zri=-7690162402365539683&at=CjEEPFEmLR820zpS4V8L1jE="],"deliver_x_tracks":["http://proxy-ad-track-zplus:10000/ad-track/zplus_log?ar=0.015657484531402588&cc=510100&cdtiso=0.11945976388578958&cl=&cla=3&cmi=&cmv=&cost=&currency=1&cv=&dts=1711164563&ed=CidJdwhlOyYvRm9CBhJpAlkpTTgdcWhlfWRiSQBneQFTdQ15DXJicHgTZlcHdX5zTncLJkwxBSwhQjsTFGJ-FVgEFHsWdm55fRFqVgBldQJadQt6DWZoA2sXYAhSIC9vCSMceApmaQF_C2ZRCWl_A1N3DnMNdGN1fx13VXJ1fgIJKlY-HXFoZX1kY0IDE2kCWSBaOltmaHJrFhNWFGIPFVl3Ti9RJDI0K0ENAVAzOF8ZYAt4HXAbcWsXEUIDYi9fGDFmLFkgLi88AGBVFGMNAU5yfWxZKmdyeRFqVwhialEZLgR7HiIsKXMQYF8JYngWCj9QdwlzanF8AzAIXiQlVFZ1HyhIfmxwYBVgXgFodABYdQl7C3VtdWhGMw4MYXQCXHUAeR4gOy5zQzMLQjVqUw8xUHcNdmJzfhBlXgB2L1QfNgR7HiA-NDoYYkFSNyUNW2NaIlp-amYtTG9SBGh_AF5yAHseIDYzcxZiVwRmalMENgR8CG1qcncVal8BY3wAWnYPfQ1lOS86GGdBUiAlDU0mSTgFcXdxaEYgDgxieglddwl9HiAufXcdalIJYGpTHzEEeh4gLjlzRDwURjU-Fg8mTzgFc3RwfhVmVQdofghTcwh4C3Vvd3wXZUFUMzxTGHgJbF0gKiM6GGJBVzMlVFZjUCkFcnwpLUo8Dgx2JVcYeAlsVDYzfXcRYlYGYXsDX2NWKUg7PS8vSW9WBHYjUxs9SXcKc252aEoxF0kjcQFNKlo8Sn5qbn4Ua14GY3gIXXMPewFya3B_AyIPUm19Fhs3XChIfmtyegthXwJnfQNdcgp-AXFrdGhVIA4MYXwAWXcNfB4zKCl8GGNVBGB_BE03SThRfm14eBBqQUI5cQNSJApyWSBjbXoRY18cZC0BX2gBcw57dyF9FDECCGN-VAgnDWxLKjd9eB1jUAFgfAhffQl7DHJrcH4VZUFCP3ECTTFKJQVyfDUnS29WAWB8AVt1AXseNSApcwMoF10lP0AfeAlsQjMpLHMV0IK_CRj-PpI=&exp=false&hp=0&isy=__IMAGE_STYLE__&iti=__IS_THREE_IMAGE__&mcdti=1595065270518947840&mcdtt=1&mix=__MIX__INFO__&obf=&octr=0.015657484531402588&pt=3&ri=feed-root:currency:efb126c1-e43c-436c-992f-bb787d00859a&tev=0&tso=0&ui=218.88.27.228&zk=&zpluspt=0&zpt=&zri=-7690162402365539683&at=CjEELl0vMzYrVw0fll1t8qj4XUE="],"impression_tracks":["https://sugar.zhihu.com/ad-track/zplus_log?ar=0.015657484531402588&cc=510100&cdtiso=0.11945976388578958&cl=&cla=3&cmi=&cmv=&cost=&currency=1&cv=&dts=1711164563&ed=CidJdwhlOyYvRm9CBhJpAlkpTTgdcWhlfWRiSQBneQFTdQ15DXJicHgTZlcHdX5zTncLJkwxBSwhQjsTFGJ-FVgEFHsWdm55fRFqVgBldQJadQt6DWZoA2sXYAhSIC9vCSMceApmaQF_C2ZRCWl_A1N3DnMNdGN1fx13VXJ1fgIJKlY-HXFoZX1kY0IDE2kCWSBaOltmaHJrFhNWFGIPFVl3Ti9RJDI0K0ENAVAzOF8ZYAt4HXAbcWsXEUIDYi9fGDFmLFkgLi88AGBVFGMNAU5yfWxZKmdyeRFqVwhialEZLgR7HiIsKXMQYF8JYngWCj9QdwlzanF8AzAIXiQlVFZ1HyhIfmxwYBVgXgFodABYdQl7C3VtdWhGMw4MYXQCXHUAeR4gOy5zQzMLQjVqUw8xUHcNdmJzfhBlXgB2L1QfNgR7HiA-NDoYYkFSNyUNW2NaIlp-amYtTG9SBGh_AF5yAHseIDYzcxZiVwRmalMENgR8CG1qcncVal8BY3wAWnYPfQ1lOS86GGdBUiAlDU0mSTgFcXdxaEYgDgxieglddwl9HiAufXcdalIJYGpTHzEEeh4gLjlzRDwURjU-Fg8mTzgFc3RwfhVmVQdofghTcwh4C3Vvd3wXZUFUMzxTGHgJbF0gKiM6GGJBVzMlVFZjUCkFcnwpLUo8Dgx2JVcYeAlsVDYzfXcRYlYGYXsDX2NWKUg7PS8vSW9WBHYjUxs9SXcKc252aEoxF0kjcQFNKlo8Sn5qbn4Ua14GY3gIXXMPewFya3B_AyIPUm19Fhs3XChIfmtyegthXwJnfQNdcgp-AXFrdGhVIA4MYXwAWXcNfB4zKCl8GGNVBGB_BE03SThRfm14eBBqQUI5cQNSJApyWSBjbXoRY18cZC0BX2gBcw57dyF9FDECCGN-VAgnDWxLKjd9eB1jUAFgfAhffQl7DHJrcH4VZUFCP3ECTTFKJQVyfDUnS29WAWB8AVt1AXseNSApcwMoF10lP0AfeAlsQjMpLHMV0IK_CRj-PpI=&exp=false&hp=0&isy=__IMAGE_STYLE__&iti=__IS_THREE_IMAGE__&mcdti=1595065270518947840&mcdtt=1&mix=__MIX__INFO__&obf=&octr=0.015657484531402588&pt=3&ri=feed-root:currency:efb126c1-e43c-436c-992f-bb787d00859a&tev=0&tso=0&ui=218.88.27.228&zk=&zpluspt=0&zpt=&zri=-7690162402365539683&at=CjEEI1UzKCU9VjsIXwyIzIulhGWC"],"conversion_tracks":["https://sugar.zhihu.com/ad-track/zplus_log?ar=0.015657484531402588&cc=510100&cdtiso=0.11945976388578958&cl=&cla=3&cmi=&cmv=&cost=&currency=1&cv=&dts=1711164563&ed=CidJdwhlOyYvRm9CBhJpAlkpTTgdcWhlfWRiSQBneQFTdQ15DXJicHgTZlcHdX5zTncLJkwxBSwhQjsTFGJ-FVgEFHsWdm55fRFqVgBldQJadQt6DWZoA2sXYAhSIC9vCSMceApmaQF_C2ZRCWl_A1N3DnMNdGN1fx13VXJ1fgIJKlY-HXFoZX1kY0IDE2kCWSBaOltmaHJrFhNWFGIPFVl3Ti9RJDI0K0ENAVAzOF8ZYAt4HXAbcWsXEUIDYi9fGDFmLFkgLi88AGBVFGMNAU5yfWxZKmdyeRFqVwhialEZLgR7HiIsKXMQYF8JYngWCj9QdwlzanF8AzAIXiQlVFZ1HyhIfmxwYBVgXgFodABYdQl7C3VtdWhGMw4MYXQCXHUAeR4gOy5zQzMLQjVqUw8xUHcNdmJzfhBlXgB2L1QfNgR7HiA-NDoYYkFSNyUNW2NaIlp-amYtTG9SBGh_AF5yAHseIDYzcxZiVwRmalMENgR8CG1qcncVal8BY3wAWnYPfQ1lOS86GGdBUiAlDU0mSTgFcXdxaEYgDgxieglddwl9HiAufXcdalIJYGpTHzEEeh4gLjlzRDwURjU-Fg8mTzgFc3RwfhVmVQdofghTcwh4C3Vvd3wXZUFUMzxTGHgJbF0gKiM6GGJBVzMlVFZjUCkFcnwpLUo8Dgx2JVcYeAlsVDYzfXcRYlYGYXsDX2NWKUg7PS8vSW9WBHYjUxs9SXcKc252aEoxF0kjcQFNKlo8Sn5qbn4Ua14GY3gIXXMPewFya3B_AyIPUm19Fhs3XChIfmtyegthXwJnfQNdcgp-AXFrdGhVIA4MYXwAWXcNfB4zKCl8GGNVBGB_BE03SThRfm14eBBqQUI5cQNSJApyWSBjbXoRY18cZC0BX2gBcw57dyF9FDECCGN-VAgnDWxLKjd9eB1jUAFgfAhffQl7DHJrcH4VZUFCP3ECTTFKJQVyfDUnS29WAWB8AVt1AXseNSApcwMoF10lP0AfeAlsQjMpLHMV0IK_CRj-PpI=&exp=false&hp=0&isy=__IMAGE_STYLE__&iti=__IS_THREE_IMAGE__&mcdti=1595065270518947840&mcdtt=1&mix=__MIX__INFO__&obf=&octr=0.015657484531402588&pt=3&ri=feed-root:currency:efb126c1-e43c-436c-992f-bb787d00859a&tev=0&tso=0&ui=218.88.27.228&zk=&zpluspt=0&zpt=&zri=-7690162402365539683&at=CjEEKVctLCU8VjsIX1u2KBLeP1SB"],"topstory_tracks":["http://proxy-ad-track-zplus-bid:10000/ad-track/zplus/bid?ar=0.015657484531402588&cc=510100&cdtiso=0.11945976388578958&cl=&cla=3&cmi=&cmv=&cost=&currency=1&cv=&dts=1711164563&ed=CidJdwhlOyYvRm9CBhJpAlkpTTgdcWhlfWRiSQBneQFTdQ15DXJicHgTZlcHdX5zTncLJkwxBSwhQjsTFGJ-FVgEFHsWdm55fRFqVgBldQJadQt6DWZoA2sXYAhSIC9vCSMceApmaQF_C2ZRCWl_A1N3DnMNdGN1fx13VXJ1fgIJKlY-HXFoZX1kY0IDE2kCWSBaOltmaHJrFhNWFGIPFVl3Ti9RJDI0K0ENAVAzOF8ZYAt4HXAbcWsXEUIDYi9fGDFmLFkgLi88AGBVFGMNAU5yfWxZKmdyeRFqVwhialEZLgR7HiIsKXMQYF8JYngWCj9QdwlzanF8AzAIXiQlVFZ1HyhIfmxwYBVgXgFodABYdQl7C3VtdWhGMw4MYXQCXHUAeR4gOy5zQzMLQjVqUw8xUHcNdmJzfhBlXgB2L1QfNgR7HiA-NDoYYkFSNyUNW2NaIlp-amYtTG9SBGh_AF5yAHseIDYzcxZiVwRmalMENgR8CG1qcncVal8BY3wAWnYPfQ1lOS86GGdBUiAlDU0mSTgFcXdxaEYgDgxieglddwl9HiAufXcdalIJYGpTHzEEeh4gLjlzRDwURjU-Fg8mTzgFc3RwfhVmVQdofghTcwh4C3Vvd3wXZUFUMzxTGHgJbF0gKiM6GGJBVzMlVFZjUCkFcnwpLUo8Dgx2JVcYeAlsVDYzfXcRYlYGYXsDX2NWKUg7PS8vSW9WBHYjUxs9SXcKc252aEoxF0kjcQFNKlo8Sn5qbn4Ua14GY3gIXXMPewFya3B_AyIPUm19Fhs3XChIfmtyegthXwJnfQNdcgp-AXFrdGhVIA4MYXwAWXcNfB4zKCl8GGNVBGB_BE03SThRfm14eBBqQUI5cQNSJApyWSBjbXoRY18cZC0BX2gBcw57dyF9FDECCGN-VAgnDWxLKjd9eB1jUAFgfAhffQl7DHJrcH4VZUFCP3ECTTFKJQVyfDUnS29WAWB8AVt1AXseNSApcwMoF10lP0AfeAlsQjMpLHMV0IK_CRj-PpI=&exp=false&hp=0&isy=__IMAGE_STYLE__&iti=__IS_THREE_IMAGE__&mcdti=1595065270518947840&mcdtt=1&mix=__MIX__INFO__&obf=&octr=0.015657484531402588&pt=3&ri=feed-root:currency:efb126c1-e43c-436c-992f-bb787d00859a&tev=0&tso=0&ui=218.88.27.228&zk=&zpluspt=0&zpt=&zri=-7690162402365539683&at=CjEELF0mPh8nSzQIRYVahjjLuoY=&rki=__RANK__INFO__&fri=__FILTER__INFO__&fin=1"],"video_tracks":["https://sugar.zhihu.com/ad-track/zplus_log?ar=0.015657484531402588&cc=510100&cdtiso=0.11945976388578958&cl=&cla=3&cmi=&cmv=&cost=&currency=1&cv=&dts=1711164563&ed=CidJdwhlOyYvRm9CBhJpAlkpTTgdcWhlfWRiSQBneQFTdQ15DXJicHgTZlcHdX5zTncLJkwxBSwhQjsTFGJ-FVgEFHsWdm55fRFqVgBldQJadQt6DWZoA2sXYAhSIC9vCSMceApmaQF_C2ZRCWl_A1N3DnMNdGN1fx13VXJ1fgIJKlY-HXFoZX1kY0IDE2kCWSBaOltmaHJrFhNWFGIPFVl3Ti9RJDI0K0ENAVAzOF8ZYAt4HXAbcWsXEUIDYi9fGDFmLFkgLi88AGBVFGMNAU5yfWxZKmdyeRFqVwhialEZLgR7HiIsKXMQYF8JYngWCj9QdwlzanF8AzAIXiQlVFZ1HyhIfmxwYBVgXgFodABYdQl7C3VtdWhGMw4MYXQCXHUAeR4gOy5zQzMLQjVqUw8xUHcNdmJzfhBlXgB2L1QfNgR7HiA-NDoYYkFSNyUNW2NaIlp-amYtTG9SBGh_AF5yAHseIDYzcxZiVwRmalMENgR8CG1qcncVal8BY3wAWnYPfQ1lOS86GGdBUiAlDU0mSTgFcXdxaEYgDgxieglddwl9HiAufXcdalIJYGpTHzEEeh4gLjlzRDwURjU-Fg8mTzgFc3RwfhVmVQdofghTcwh4C3Vvd3wXZUFUMzxTGHgJbF0gKiM6GGJBVzMlVFZjUCkFcnwpLUo8Dgx2JVcYeAlsVDYzfXcRYlYGYXsDX2NWKUg7PS8vSW9WBHYjUxs9SXcKc252aEoxF0kjcQFNKlo8Sn5qbn4Ua14GY3gIXXMPewFya3B_AyIPUm19Fhs3XChIfmtyegthXwJnfQNdcgp-AXFrdGhVIA4MYXwAWXcNfB4zKCl8GGNVBGB_BE03SThRfm14eBBqQUI5cQNSJApyWSBjbXoRY18cZC0BX2gBcw57dyF9FDECCGN-VAgnDWxLKjd9eB1jUAFgfAhffQl7DHJrcH4VZUFCP3ECTTFKJQVyfDUnS29WAWB8AVt1AXseNSApcwMoF10lP0AfeAlsQjMpLHMV0IK_CRj-PpI=&exp=false&hp=0&isy=__IMAGE_STYLE__&iti=__IS_THREE_IMAGE__&mcdti=1595065270518947840&mcdtt=1&mix=__MIX__INFO__&obf=&octr=0.015657484531402588&pt=3&ri=feed-root:currency:efb126c1-e43c-436c-992f-bb787d00859a&tev=0&tso=0&ui=218.88.27.228&zk=&zpluspt=0&zpt=&zri=-7690162402365539683&at=CjEEPFEnPy8RVT4GSP2lJbJWhW_G"],"video_play_tracks":null,"debug_tracks":null,"view_as_click_tm":5}',
  },
  {
    id: '15_1711164564.342',
    type: 'feed',
    offset: 15,
    verb: 'TOPIC_ACKNOWLEDGED_ANSWER',
    created_time: 1711164564,
    updated_time: 1711164564,
    target: {
      id: 2707241582,
      type: 'answer',
      url: 'https://api.zhihu.com/answers/2707241582',
      author: {
        id: 'e0eb8a94913eba7c489e4b06e970b453',
        url: 'https://api.zhihu.com/people/e0eb8a94913eba7c489e4b06e970b453',
        user_type: 'people',
        url_token: '83-27-2-48',
        name: '善恶都是小辉',
        headline: '',
        avatar_url:
          'https://pic1.zhimg.com/50/v2-c58133735009a0f19b2322be9928ebc7_l.jpg?source=b6762063',
        is_org: false,
        gender: -1,
        followers_count: 324,
        is_following: false,
        is_followed: false,
      },
      created_time: 1665269971,
      updated_time: 1665269971,
      voteup_count: 4148,
      thanks_count: 4014,
      comment_count: 1036,
      is_copyable: true,
      question: {
        id: 313932752,
        type: 'question',
        url: 'https://api.zhihu.com/questions/313932752',
        author: {
          id: '8e0c72597bb260358f2e24bc5fd0377a',
          url: 'https://api.zhihu.com/people/8e0c72597bb260358f2e24bc5fd0377a',
          user_type: 'people',
          url_token: 'yi-yu-zheng-huan-zhe-61-46',
          name: '抑郁症患者',
          headline: '',
          avatar_url:
            'https://pic1.zhimg.com/50/v2-1ba5637a584d7d6bb52ddb6995e9dd96_l.jpg?source=b6762063',
          is_org: false,
          gender: -1,
          followers_count: 5,
          is_following: false,
          is_followed: false,
        },
        title: '真正抑郁的人是什么样的？',
        created: 1551272091,
        answer_count: 0,
        follower_count: 0,
        comment_count: 62,
        bound_topic_ids: [4883, 158127],
        is_following: false,
        excerpt: '',
        relationship: {
          is_author: false,
        },
        detail: '',
        question_type: 'normal',
      },
      excerpt:
        '1、抑郁症发作的时候，根本不是人们认为的那样，疯狂的摔东西，抓头发，抽掊的笑，也不会歇斯底里的哭喊叫喊 2、抑郁症真正的样子，不是像林黛玉那样整天眼光含泪，也不是整天哭泣，哀嚎生活有多累，也不会时不时都挂着神经质的笑，更不会皮笑肉不笑 3、绝大时候，ta们看起来比正常人还正常，也时不时的会笑，会温和而有礼貌的与别人交流，完全看不出来他们是患者 4、知道抑郁症的反义词是什么吗? 不是开心快乐也不是活力而是动…',
      excerpt_new:
        '1、抑郁症发作的时候，根本不是人们认为的那样，疯狂的摔东西，抓头发，抽掊的笑，也不会歇斯底里的哭喊叫喊 2、抑郁症真正的样子，不是像林黛玉那样整天眼光含泪，也不是整天哭泣，哀嚎生活有多累，也不会时不时都挂着神经质的笑，更不会皮笑肉不笑 3、绝大时候，ta们看起来比正常人还正常，也时不时的会笑，会温和而有礼貌的与别人交流，完全看不出来他们是患者 4、知道抑郁症的反义词是什么吗? 不是开心快乐也不是活力而是动…',
      preview_type: 'default',
      preview_text: '',
      reshipment_settings: 'allowed',
      content:
        '<p data-pid="t-1TBI3S">1、抑郁症发作的时候，根本不是人们认为的那样，疯狂的摔东西，抓头发，抽掊的笑，也不会歇斯底里的哭喊叫喊</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="MmeFJkr8">2、抑郁症真正的样子，不是像林黛玉那样整天眼光含泪，也不是整天哭泣，哀嚎生活有多累，也不会时不时都挂着神经质的笑，更不会皮笑肉不笑</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="s34h-oEc">3、绝大时候，ta们看起来比正常人还正常，也时不时的会笑，会温和而有礼貌的与别人交流，完全看不出来他们是患者</p><p data-pid="OQZbEKOd">4、知道抑郁症的反义词是什么吗?</p><p data-pid="uEVaaKA4">不是开心快乐也不是活力而是动力……</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="M2bKERII">5、抑郁症发作最明显的，就是懒得去交际，懒得吃饭，懒得说话，懒得生活，懒得活着</p><p data-pid="txErjQNT">6、也就是说抑郁症发作的时候是莫不作声的</p><p data-pid="YeqarhjZ">7、一般抑郁症发作时，流泪是静静的，身体是麻木的，内心是冰冷的，唯一的感觉就是，像沉在冰冷的潭水里一样，没有浮力，慢慢沉下去，四肢越来越沉重，水漫过口鼻，呼吸困难，头像要炸开一样，但是无法抗拒，只能这样慢慢沉下去</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="6zRXDEE1">8、ta们压制着这种情绪，尽量对身边的朋友露出微笑，尽力去向爱自己的人，和自己爱的人，露出一种“我很好”的状态，将所有痛苦都压制在自己的身体里，慢慢堆积如山</p><p data-pid="F1N2WeFf">9、ta们不好，一点也不好，都已经不好到想要去死，想要放弃生命，但是许许多多的患者因为放不下，放不下自己的爱人，所以为了自己的爱人艰难的话着</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="XifXrAgU">10、抑郁症患，者最害怕的就是，给别人添麻烦，他们往往有很深的罪孽感</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="exQp5Gmc">11、这种压抑是病态的，是不能通过患者的主观意识控制的，并不是一句简简单单的“你想开一点”就能控制的</p>',
      relationship: {
        is_thanked: false,
        is_nothelp: false,
        voting: 0,
      },
      is_labeled: false,
      visited_count: 902317,
      favorite_count: 4591,
      answer_type: 'normal',
    },
    brief: '{"source": "TS", "type": "answer", "id": 2707241582}',
    attached_info:
      'CukECJ31v++gwcOjlQEQBBoJNTIyMzExOTgzINOBiJoGKLQgMIwIQA9KKAoTVFNfU09VUkNFX0ZFRURSRV9WNxIBMBgAIAA6CnsicmF3IjoiIn1aCDMyMDM5MTQ0YiBjY2RkNTVhMWRmNGY0ZDJlM2Y5NzljNzllYWQyYjA3M3IKMjcwNzI0MTU4MooBCTMxMzkzMjc1MqoBCXJlY29tbWVuZMIBIGUwZWI4YTk0OTEzZWJhN2M0ODllNGIwNmU5NzBiNDUz8gEKCAwSBk5vcm1hbPIBKAgKEiQ3Y2U0OTYyYS02NTY5LTQ1YjgtYjYwNC0wY2QwNDlhYzhkMWPyAQUICxIBM4ICAIgCr8fsyuYxkgIgZTBlYjhhOTQ5MTNlYmE3YzQ4OWU0YjA2ZTk3MGI0NTOaAgDKAhtPbGRDb250ZW50UmVkdWNlNVdlaWdodFJ1bGXaAhNUU19TT1VSQ0VfRkVFRFJFX1Y36AIC+gILTk9STUFMX0ZMT1eKAyAxOGFkYTdmZGI0YTU0Yzk4OTM1NmE0MGVkNmNiMGY4YpoDDQoCdjAQABoFb3RoZXKoA62JN9gDAOoDCWZlZWRyZV92N/oDEBIMVU5LTk9XTl9NT0RFIACABACIBACSBAZOb3JtYWyaBAEyoAQAqAQAsAQAugQGbWFudWFswgQDMTYwyAQA0gQP5o6o6I2Q5bey5pu05paw2AQA8AQA+QQAAABAdHS6P4EFAAAAAAAAAACJBfn1/Hxpn6Q/kgUJ5q2m5L6v5Yy6mgUDZGZ0ogUDZGZ0sgUBMbkFAAAAAAAAAADQBQDgBQDoBQDwBQOSAiUKCTUyMjMxMTk4MxIKMjcwNzI0MTU4MhgEIgpJTUFHRV9URVhU',
    action_card: false,
  },
  {
    id: '16_1711164564.619',
    type: 'feed',
    offset: 16,
    verb: 'TOPIC_ACKNOWLEDGED_ANSWER',
    created_time: 1711164564,
    updated_time: 1711164564,
    target: {
      id: 3187671221,
      type: 'answer',
      url: 'https://api.zhihu.com/answers/3187671221',
      author: {
        id: 'db5153c283d9465bf73f49c719652334',
        url: 'https://api.zhihu.com/people/db5153c283d9465bf73f49c719652334',
        user_type: 'people',
        url_token: 'he-cc-13',
        name: '壹贰叁',
        headline: '消费类电子产品爱好者',
        avatar_url:
          'https://picx.zhimg.com/50/v2-f60e9b62229f496baba4ba4867962a11_l.jpg?source=b6762063',
        is_org: false,
        gender: 1,
        followers_count: 4479,
        is_following: false,
        is_followed: false,
      },
      created_time: 1693283441,
      updated_time: 1704969254,
      voteup_count: 11132,
      thanks_count: 1394,
      comment_count: 1664,
      is_copyable: false,
      question: {
        id: 598464489,
        type: 'question',
        url: 'https://api.zhihu.com/questions/598464489',
        author: {
          id: 'b9840c983f4f7e7aedb10e6b0ad126fc',
          url: 'https://api.zhihu.com/people/b9840c983f4f7e7aedb10e6b0ad126fc',
          user_type: 'people',
          url_token: 'qiu-sheng-23-64',
          name: '秋生',
          headline: '秋天见。',
          avatar_url:
            'https://picx.zhimg.com/50/v2-30fd59dc505e7275f2d955c2169a6195_l.jpg?source=b6762063',
          is_org: false,
          gender: 0,
          followers_count: 212,
          is_following: false,
          is_followed: false,
        },
        title: '为什么大家不再提 5G 了？',
        created: 1682805137,
        answer_count: 0,
        follower_count: 0,
        comment_count: 95,
        bound_topic_ids: [488, 6430, 127197, 401501, 679450],
        is_following: false,
        excerpt: '',
        relationship: {
          is_author: false,
        },
        detail: '',
        question_type: 'normal',
      },
      excerpt:
        '现在看来，只有美国那种5g的思路是对的。 美国的运营商一开始就发现5g和4g并没有质的飞跃，无非就是提升频率/降低穿透力/提升带宽的故事。而美国运营商又是自负盈亏，因此一开始就仅在人口高密度地区或富裕地区布置5g。 虽然说人家4g也菜，但是人家有自知之明呀？而且这样一来，没有5g巨大的成本压力，就不用出现4g降速等一系列魔幻的事情：美国的4g lte早在2018年就能普及50-100mbps的速率，这大概是目前国内4g的2-5倍，已经达…',
      excerpt_new:
        '现在看来，只有美国那种5g的思路是对的。 美国的运营商一开始就发现5g和4g并没有质的飞跃，无非就是提升频率/降低穿透力/提升带宽的故事。而美国运营商又是自负盈亏，因此一开始就仅在人口高密度地区或富裕地区布置5g。 虽然说人家4g也菜，但是人家有自知之明呀？而且这样一来，没有5g巨大的成本压力，就不用出现4g降速等一系列魔幻的事情：美国的4g lte早在2018年就能普及50-100mbps的速率，这大概是目前国内4g的2-5倍，已经达…',
      preview_type: 'default',
      preview_text: '',
      reshipment_settings: 'disallowed',
      content:
        '<p data-pid="0TJ3xfzg">现在看来，只有美国那种5g的思路是对的。</p><p data-pid="huumDM-H">美国的运营商一开始就发现5g和4g并没有质的飞跃，无非就是提升频率/降低穿透力/提升带宽的故事。而美国运营商又是自负盈亏，因此一开始就仅在人口高密度地区或富裕地区布置5g。</p><p data-pid="eiTjdf-U">虽然说人家4g也菜，但是人家有自知之明呀？而且这样一来，没有5g巨大的成本压力，就不用出现4g降速等一系列魔幻的事情：美国的4g lte早在2018年就能普及50-100mbps的速率，这大概是目前国内4g的2-5倍，已经达到了国内目前大多数5g速率的一半。</p><p data-pid="PNCHD42Z">当时，对于这个问题，国内许多人的普遍态度是：</p><h3>美国不行，不代表中国不行。</h3><p data-pid="Ey0822uv">那咱们就看呗。在一个人均gdp6倍、网络资费5-10倍以上的地方不行，你行。那我们就拭目以待，看看你到底有多能。</p>',
      relationship: {
        is_thanked: false,
        is_nothelp: false,
        voting: 0,
      },
      is_labeled: false,
      visited_count: 3600533,
      favorite_count: 1657,
      answer_type: 'normal',
    },
    brief: '{"source": "TS", "type": "answer", "id": 3187671221}',
    attached_info:
      'CqwFCJ31v++gwcOjlQEQBBoJNjA5NjU5NDAwIPHotacGKPxWMIANQBBKMAobVFNfU09VUkNFX0JBU0lDX0lORk9fUkVDQUxMEgEwGAAgADoKeyJyYXciOiIifUooChNUU19TT1VSQ0VfRkVFRFJFX1Y3EgEwGAAgADoKeyJyYXciOiIifVoIOTUyNzI1NDJiIGNjZGQ1NWExZGY0ZjRkMmUzZjk3OWM3OWVhZDJiMDczcgozMTg3NjcxMjIxigEJNTk4NDY0NDg5qgEJcmVjb21tZW5kwgEgZGI1MTUzYzI4M2Q5NDY1YmY3M2Y0OWM3MTk2NTIzMzTyAQoIDBIGTm9ybWFs8gEoCAoSJDgyMzEyMGYxLWI5NDEtNGRiOC05YzIyLThlOTEzNzY5YjcyMPIBBQgLEgEzggIAiAKwx+zK5jGSAiBkYjUxNTNjMjgzZDk0NjViZjczZjQ5YzcxOTY1MjMzNJoCAMoCG09sZENvbnRlbnRSZWR1Y2U1V2VpZ2h0UnVsZdoCG1RTX1NPVVJDRV9CQVNJQ19JTkZPX1JFQ0FMTOgCAvoCC05PUk1BTF9GTE9XigMgMThhZGE3ZmRiNGE1NGM5ODkzNTZhNDBlZDZjYjBmOGKaAw0KAnYwEAAaBW90aGVyqAOV4dsB2AMA6gMRYmFzaWNfaW5mb19yZWNhbGz6AxASDFVOS05PV05fTU9ERSAAgAQAiAQAkgQGTm9ybWFsmgQBMqAEAKgEALAEALoEBm1hbnVhbMIEAzE2MMgEANIED+aOqOiNkOW3suabtOaWsNgEAPAEAPkEAAAAwCRBsD+BBQAAAAAAAAAAiQX59fx8aZ+kP5IFCeatpuS+r+WMupoFA2RmdKIFA2RmdLIFATG5BQAAAAAAAAAA0AUA4AUA6AUA8AUDkgIlCgk2MDk2NTk0MDASCjMxODc2NzEyMjEYBCIKSU1BR0VfVEVYVA==',
    action_card: false,
  },
  {
    id: '17_1711164564.347',
    type: 'feed',
    offset: 17,
    verb: 'TOPIC_ACKNOWLEDGED_ANSWER',
    created_time: 1711164564,
    updated_time: 1711164564,
    target: {
      id: 3440148358,
      type: 'answer',
      url: 'https://api.zhihu.com/answers/3440148358',
      author: {
        id: '30dab40cade8ef48dc39a733eefde78e',
        url: 'https://api.zhihu.com/people/30dab40cade8ef48dc39a733eefde78e',
        user_type: 'people',
        url_token: 'lark-li-24',
        name: '菜总',
        headline: '一位从事互联网的it民工',
        avatar_url:
          'https://picx.zhimg.com/50/v2-8ad3d9f84724cb020a297138fcc89e82_l.jpg?source=b6762063',
        is_org: false,
        gender: 1,
        badge: [
          {
            type: 'identity_people',
            description: '阿里巴巴 技术专家',
          },
        ],
        followers_count: 3,
        is_following: false,
        is_followed: false,
      },
      created_time: 1711121350,
      updated_time: 1711121350,
      voteup_count: 0,
      thanks_count: 0,
      comment_count: 0,
      is_copyable: true,
      question: {
        id: 404483426,
        type: 'question',
        url: 'https://api.zhihu.com/questions/404483426',
        author: {
          id: '9ecf373b76dcd8e565bacee8cc1d6f46',
          url: 'https://api.zhihu.com/people/9ecf373b76dcd8e565bacee8cc1d6f46',
          user_type: 'people',
          url_token: 'liu-yan-95-25-81',
          name: '华妹子',
          headline: '躺平看热闹，闲坐吃西瓜',
          avatar_url:
            'https://picx.zhimg.com/50/463137b783390c0ab054c7d537fdc3da_l.jpg?source=b6762063',
          is_org: false,
          gender: 0,
          followers_count: 10,
          is_following: false,
          is_followed: false,
        },
        title: '为什么互联网大厂的工资那么高？',
        created: 1593603549,
        answer_count: 0,
        follower_count: 0,
        comment_count: 1,
        bound_topic_ids: [99, 18459, 39097],
        is_following: false,
        excerpt: '',
        relationship: {
          is_author: false,
        },
        detail: '',
        question_type: 'normal',
      },
      excerpt:
        '大厂有钱，通过高薪引进人才，促进企业快速发展，优先占领市场份额，再把钱挣回来',
      excerpt_new:
        '大厂有钱，通过高薪引进人才，促进企业快速发展，优先占领市场份额，再把钱挣回来',
      preview_type: 'default',
      preview_text: '',
      reshipment_settings: 'allowed',
      content:
        '<p data-pid="7P0yyAhN">大厂有钱，通过高薪引进人才，促进企业快速发展，优先占领市场份额，再把钱挣回来</p>',
      relationship: {
        is_thanked: false,
        is_nothelp: false,
        voting: 0,
      },
      is_labeled: false,
      visited_count: 12,
      favorite_count: 0,
      answer_type: 'normal',
    },
    brief: '{"source": "TS", "type": "answer", "id": 3440148358}',
    attached_info:
      'CtsECJ31v++gwcOjlQEQBBoJNjU1NTU1NTczIMbH9q8GKAAwAEARSiQKGVRTX1NPVVJDRV9XQVJNX1VQX05PUk1BTDESATAYACAAOgBaCDUyMTYzMTI4YiBjY2RkNTVhMWRmNGY0ZDJlM2Y5NzljNzllYWQyYjA3M3IKMzQ0MDE0ODM1OIoBCTQwNDQ4MzQyNqoBCXJlY29tbWVuZMIBIDMwZGFiNDBjYWRlOGVmNDhkYzM5YTczM2VlZmRlNzhl8gEKCAwSBk5vcm1hbPIBKAgKEiRmNWMzMWM3YS1iZTUyLTRlODMtODNhMC1jNzVmZWExNjU2NGHyAQUICxIBM4ICAIgCsMfsyuYxkgIgMzBkYWI0MGNhZGU4ZWY0OGRjMzlhNzMzZWVmZGU3OGWaAgDaAhlUU19TT1VSQ0VfV0FSTV9VUF9OT1JNQUwx6AIC+gILTk9STUFMX0ZMT1eKAyAxOGFkYTdmZGI0YTU0Yzk4OTM1NmE0MGVkNmNiMGY4YpoDDQoCdjAQABoFb3RoZXKoAwzYAwDqAx90ZXh0XzEyaG91cl91bmlmaW5zaGVkX3JlY2FsbGVy+gMQEgxVTktOT1dOX01PREUgAIAEAIgEAJIEBk5vcm1hbJoEATKgBACoBACwBAC6BAJhacIEAzQwMMgEANIED+aOqOiNkOW3suabtOaWsNgEAPAEAPkEAAAAYOZ4mD+BBQAAAAAAAAAAiQX59fx8aZ+kP5IFCeatpuS+r+WMupoFA2RmdKIFA2RmdLIFATG5BQAAAAAAAAAA0AUA4AUA6AUA8AUDkgIlCgk2NTU1NTU1NzMSCjM0NDAxNDgzNTgYBCIKSU1BR0VfVEVYVA==',
    action_card: false,
  },
  {
    id: '18_1711164580.290',
    type: 'feed',
    offset: 18,
    verb: 'TOPIC_ACKNOWLEDGED_ANSWER',
    created_time: 1711164580,
    updated_time: 1711164580,
    target: {
      id: 3439405824,
      type: 'answer',
      url: 'https://api.zhihu.com/answers/3439405824',
      author: {
        id: '11f28bb74edd419d9d7e3f775eb1d46f',
        url: 'https://api.zhihu.com/people/11f28bb74edd419d9d7e3f775eb1d46f',
        user_type: 'people',
        url_token: 'han-zhi-dan-21',
        name: '红茶还是绿茶',
        headline: '星辰大海重度爱好者',
        avatar_url:
          'https://picx.zhimg.com/50/v2-8dc4ad25498d1e956cf5c5066940c18c_l.jpg?source=b6762063',
        is_org: false,
        gender: -1,
        followers_count: 2336,
        is_following: false,
        is_followed: false,
      },
      created_time: 1711077483,
      updated_time: 1711077483,
      voteup_count: 5997,
      thanks_count: 261,
      comment_count: 101,
      is_copyable: true,
      question: {
        id: 649002940,
        type: 'question',
        url: 'https://api.zhihu.com/questions/649002940',
        author: {
          id: '23054d687fca0efb75de7c263143dcaa',
          url: 'https://api.zhihu.com/people/23054d687fca0efb75de7c263143dcaa',
          user_type: 'people',
          url_token: 'zhu-meng-ren-40-39',
          name: '逐梦人',
          headline: '物理学博士研究生在读，专注于物理学习！',
          avatar_url:
            'https://picx.zhimg.com/50/v2-f4614843af51efa016f10afa1104da92_l.jpg?source=b6762063',
          is_org: false,
          gender: 1,
          badge: [
            {
              type: 'identity_people',
              description: '同济大学 物理学博士在读',
            },
          ],
          followers_count: 1972,
          is_following: false,
          is_followed: false,
        },
        title: '如何看待“校长称邯郸男孩的死亡是个意外”？',
        created: 1710692357,
        answer_count: 0,
        follower_count: 0,
        comment_count: 16,
        bound_topic_ids: [12833, 100947],
        is_following: false,
        excerpt: '',
        relationship: {
          is_author: false,
        },
        detail: '',
        question_type: 'normal',
      },
      excerpt:
        '微博上瞄一眼，男孩儿的家属现在成严控对象了，代理律师也清空微博了，越来越魔幻了，受了委屈不许哭出声来，你自己躲被窝里默默流泪可以，倘若哭出声来叫别人听到，抱歉，严惩不贷！',
      excerpt_new:
        '微博上瞄一眼，男孩儿的家属现在成严控对象了，代理律师也清空微博了，越来越魔幻了，受了委屈不许哭出声来，你自己躲被窝里默默流泪可以，倘若哭出声来叫别人听到，抱歉，严惩不贷！',
      preview_type: 'default',
      preview_text: '',
      reshipment_settings: 'allowed',
      content:
        '<p data-pid="awYWlreA">微博上瞄一眼，男孩儿的家属现在成严控对象了，代理律师也清空微博了，越来越魔幻了，受了委屈不许哭出声来，你自己躲被窝里默默流泪可以，倘若哭出声来叫别人听到，抱歉，严惩不贷！</p>',
      relationship: {
        is_thanked: false,
        is_nothelp: false,
        voting: 0,
      },
      is_labeled: false,
      visited_count: 216843,
      favorite_count: 368,
      answer_type: 'normal',
    },
    brief: '{"source": "TS", "type": "answer", "id": 3439405824}',
    attached_info:
      'CuEFCN/Zme+g5JP4vAEQBBoJNjU1NDIwMzg5IOvw868GKO0uMGVAEkowChtUU19TT1VSQ0VfRkVFRFJFX1RJTUVMSU5FU1MSATAYACAAOgp7InJhdyI6IiJ9SjQKKVRTX1NPVVJDRV9IT1RfQ1JPU1NfUkVBTF9USU1FX05FV19DT05URU5UEgEwGAAgADoASigKE1RTX1NPVVJDRV9GRUVEUkVfVjcSATAYACAAOgp7InJhdyI6IiJ9WgkxMDY1MDA0OTZiIGNjZGQ1NWExZGY0ZjRkMmUzZjk3OWM3OWVhZDJiMDczcgozNDM5NDA1ODI0igEJNjQ5MDAyOTQwqgEJcmVjb21tZW5kwgEgMTFmMjhiYjc0ZWRkNDE5ZDlkN2UzZjc3NWViMWQ0NmbyAQoIDBIGTm9ybWFs8gEoCAoSJDEwM2I0NDJhLWQ4ZDUtNGE4ZC1hMDNmLTNlMzU0OTk5NTgwNPIBBQgLEgE0ggIAiALgx+3K5jGSAiAxMWYyOGJiNzRlZGQ0MTlkOWQ3ZTNmNzc1ZWIxZDQ2ZpoCAMoCG09sZENvbnRlbnRSZWR1Y2U1V2VpZ2h0UnVsZdoCG1RTX1NPVVJDRV9GRUVEUkVfVElNRUxJTkVTU+gCAvoCC05PUk1BTF9GTE9XigMgYTM0NTYwOGMxMjU2NGI2YmE2MDgyZjM5ZjdhM2ViZDmaAw0KAnYwEAAaBW90aGVyqAOLng3YAwDqAxFmZWVkcmVfdGltZWxpbmVzc/oDEBIMVU5LTk9XTl9NT0RFIACABACIBACSBAZOb3JtYWyaBAEyoAQAqAQAsAQAugQGbWFudWFswgQDMTYwyAQA0gQP5o6o6I2Q5bey5pu05paw2AQA8AQA+QQAAACAw+W1P4EFAAAAAAAAAACJBUwMvz+/f6k/kgUJ5q2m5L6v5Yy6mgUDZGZ0ogUDZGZ0sgUBMbkFAAAAAAAAAADQBQDgBQDoBQDwBQSSAiUKCTY1NTQyMDM4ORIKMzQzOTQwNTgyNBgEIgpJTUFHRV9URVhU',
    action_card: false,
  },
  {
    id: 'AD_103410_17111645808330',
    type: 'feed_advert',
    brief: '{"source":"PR","type":"feed_advert","id":103410}',
    action_text: '',
    attached_info:
      'Cp8BCN/Zme+g5JP4vAFAE5ABAdoBJDgxODBiOTU3LThkNjgtNDAxNi1hZjNiLTY1Y2NhNjhkMDRiNvIBBggMEgJBZIgC4cftyuYx+gILQURWRVJUX0ZMT1eKAyBhMzQ1NjA4YzEyNTY0YjZiYTYwODJmMzlmN2EzZWJkOYAEA5IECEJyYW5kX0Fk+QQAAAAAAADwP4EFAAAAAAAAAACyBQExMhQtNDgzMjI3NTM5MjQ4Nzg1NDg4MQ==',
    ad: {
      count: 0,
      position: 0,
      ad_verb: 'PROMOTE_URL_CARD',
      close_track:
        'https://sugar.zhihu.com/glory_adreaper/glory_log?cc=510100&lr=1&tue=AQENERpeSUEVDg1XEx0QCRxKBQEPVgsMDAYNCAYKSVhWQExIWkFLU-kFmLpa33h_&bi=1317&ut=5cfd5a6bab794c1894bc961064d76ed9&ar=0.0054&ts=1711164580&ui=218.88.27.228&pf=Mac+OS+X&cty=question&dsgtplid=0&ct=1&src=brand&zr=0&coi=106636222&ed=CjEEKVQsKSVoVjtaCWF0AAl8DH0Vez52dghmVwBmYVENdltnDnY5Iy8TagMBZC4GTSRDdw9lOykqGGNXAmR9AE01UHcJd2p5eQMxDgxhfgdcfAtsWTZndHcXZUFdJXEJX3UIfQl0aXRoVTsDDH19qDfFJ2PdF3g%3D',
      revert_close_track: '',
      template: 'card_web_feed',
      load_tracks: [
        'https://bv.brg0.com/sQlg4o?ip=218.88.27.228&useragent=Mozilla%2F5.0+%28Macintosh%3B+Intel+Mac+OS+X+10_15_7%29+AppleWebKit%2F537.36+%28KHTML%2C+like+Gecko%29+Chrome%2F121.0.0.0+Safari%2F537.36&osversion=3&action=impression',
        'https://sugar.zhihu.com/glory_adreaper/glory_log?ui=218.88.27.228&cc=510100&lr=1&dsgtplid=0&zr=0&tue=AQENERpeSUEVDg1XEx0QCRxKBQEPVgsMDAYNCAYKSVhWQExIWkFLU-kFmLpa33h_&pf=Mac+OS+X&ed=CjEEI1UzKCU9VjsIX3Y_WVZ9CHIIIWN1eQhqAwdoYQRbdA9nWSVpImMTZwRSMXoID3UNKA5lOzpzEnQGWDRxAVt2DXsIZSopcxRmVwhnalMCeAh4D3RjcmhEJ1oFaX4HTSlMdwF3anF5FGVUBXY8WQ94FHuup6UrauZv_g%3D%3D&ut=5cfd5a6bab794c1894bc961064d76ed9&ct=1&ts=1711164580&cty=question&ar=0.0054&bi=1317&coi=106636222&src=brand',
      ],
      creatives: [
        {
          landing_url:
            'https://sugar.zhihu.com/glory_adreaper/glory_log?ts=1711164580&pf=Mac+OS+X&src=brand&ut=5cfd5a6bab794c1894bc961064d76ed9&bi=1317&dsgtplid=0&ar=0.0054&cty=question&tue=AQENERpeSUEVDg1XEx0QCRxKBQEPVgsMDAYNCAYKSVhWQExIWkFLU-kFmLpa33h_&ui=218.88.27.228&lr=1&cc=510100&ed=CjEEKVQqOStoVjtaCWF0AAl8DH0Vez52dghmVwBmYVENdltnDnY5Iy8TagMBZC4GTSRDdw9lOykqGGNXAmR9AE01UHcJd2p5eQMxDgxhfgdcfAtsWTZndHcXZUFdJXEJX3UIfQl0aXRoVTsDDH19UzSGhXxrMBc%3D&zr=0&ct=1&coi=106636222',
          image:
            'https://pic1.zhimg.com/70/v2-a2fdfebb41cf0a2552fcf53c4bf22290.jpg',
          image_2x: '',
          title: '作为消费者，如何判断一套混动系统的好坏?',
          description:
            '面对市场上众多不同品牌的混动系统，消费者需要考虑哪些指标，才能辨别不同混动系统的好坏，作出更好的选择?',
          button: '',
          action_button: false,
          brand: {
            id: 1317,
            name: '长安汽车',
            logo: 'https://pic4.zhimg.com/v2-ebfe648ee39c53ccb9f4640c707f65be.jpg?source=9963c322',
          },
          app_promotion_url: '',
          native_url: 'https://www.zhihu.com/question/649613422',
          deep_url: '',
          video_watch_num: 0,
          show_num: {
            view_num: 0,
            follow_num: 55,
          },
          za_ad_info:
            '{"ad_id":103410,"ad_zone_id":7,"category":"1","timestamp":1711164500,"creative_id":127792}',
          za_ad_info_json:
            '{"ad_id":103410,"ad_zone_id":7,"category":"1","timestamp":1711164500,"creative_id":127792}',
          external_click_url: '',
          impression_tracks: [
            'https://sugar.zhihu.com/glory_adreaper/glory_log?ar=0.0054&ct=1&lr=1&tue=AQENERpeSUEVDg1XEx0QCRxKBQEPVgsMDAYNCAYKSVhWQExIWkFLU-kFmLpa33h_&pf=Mac+OS+X&zr=0&ts=1711164580&ui=218.88.27.228&cc=510100&dsgtplid=0&ut=5cfd5a6bab794c1894bc961064d76ed9&cty=question&src=brand&coi=106636222&bi=1317&ed=CjEEPFEmLWY9TG9fAGh8UlJwDmcAJ2x4YxFiVgd9LVZYJxR8DSA5IXgdNlcFMnoWCj8EfR4iMyRzFGJUBWF8FhssBHsMc2N3aEY7WgBiewdSdx8rTX5ueXwSdAtEbXUEW3QOew9wbmY-TDZaHGGTTh3HlslDMA%3D%3D',
          ],
          click_tracks: [],
          id: 103410,
          name: '',
          conversion_tracks: [
            'https://sugar.zhihu.com/glory_adreaper/glory_log?lr=1&zr=0&cc=510100&src=brand&dsgtplid=0&coi=106636222&pf=Mac+OS+X&ut=5cfd5a6bab794c1894bc961064d76ed9&bi=1317&tue=AQENERpeSUEVDg1XEx0QCRxKBQEPVgsMDAYNCAYKSVhWQExIWkFLU-kFmLpa33h_&ar=0.0054&ct=1&cty=question&ui=218.88.27.228&ts=1711164580&ed=CjEEKVctLCU8VjsIX3Y_WVZ9CHIIIWN1eQhqAwdoYQRbdA9nWSVpImMTZwRSMXoID3UNKA5lOzpzEnQGWDRxAVt2DXsIZSopcxRmVwhnalMCeAh4D3RjcmhEJ1oFaX4HTSlMdwF3anF5FGVUBXY8WQ94FHvPuW2YISDDTQ%3D%3D',
          ],
          content_type: 'celebrity_question',
          target_token: '',
          icon: '推荐了问题',
        },
      ],
      vote_up_count: 0,
      comment_count: 0,
      is_following: false,
      category: 1,
      id: 103410,
      can_interact: false,
      user_id: 0,
      ctr: 0,
      display_advertising_tag: true,
      debug_tracks: [
        'https://sugar.zhihu.com/glory_adreaper/glory_log?ed=CjEELl0hLydoVjtaCWF0AAl8DH0Vez52dghmVwBmYVENdltnDnY5Iy8TagMBZC4GTSRDdw9lOykqGGNXAmR9AE01UHcJd2p5eQMxDgxhfgdcfAtsWTZndHcXZUFdJXEJX3UIfQl0aXRoVTsDDH19taVaesyMKTg%3D&ct=1&lr=1&coi=106636222&ar=0.0054&cc=510100&dsgtplid=0&pf=Mac+OS+X&tue=AQENERpeSUEVDg1XEx0QCRxKBQEPVgsMDAYNCAYKSVhWQExIWkFLU-kFmLpa33h_&zr=0&src=brand&ut=5cfd5a6bab794c1894bc961064d76ed9&bi=1317&ts=1711164580&cty=question&ui=218.88.27.228',
      ],
      land_prefetch: false,
      native_prefetch: true,
      is_new_webview: true,
      style: '',
      experiment_info: '{}',
      download_silent: false,
      is_speeding: false,
      brand: {
        name: '长安汽车',
        logo: 'https://pic4.zhimg.com/v2-ebfe648ee39c53ccb9f4640c707f65be.jpg?source=9963c322',
        type: 'brand',
        action_text: '',
      },
    },
    ad_list: [],
    adjson:
      '{"ads":[{"id":103410,"ad_zone_id":7,"template":"web_feed_small_image_glory","style":"bsi_7","impression_tracks":["https://bv.brg0.com/sQlg4o?ip=218.88.27.228\\u0026useragent=Mozilla%2F5.0+%28Macintosh%3B+Intel+Mac+OS+X+10_15_7%29+AppleWebKit%2F537.36+%28KHTML%2C+like+Gecko%29+Chrome%2F121.0.0.0+Safari%2F537.36\\u0026osversion=3\\u0026action=impression","https://sugar.zhihu.com/glory_adreaper/glory_log?ui=218.88.27.228\\u0026cc=510100\\u0026lr=1\\u0026dsgtplid=0\\u0026zr=0\\u0026tue=AQENERpeSUEVDg1XEx0QCRxKBQEPVgsMDAYNCAYKSVhWQExIWkFLU-kFmLpa33h_\\u0026pf=Mac+OS+X\\u0026ed=CjEEI1UzKCU9VjsIX3Y_WVZ9CHIIIWN1eQhqAwdoYQRbdA9nWSVpImMTZwRSMXoID3UNKA5lOzpzEnQGWDRxAVt2DXsIZSopcxRmVwhnalMCeAh4D3RjcmhEJ1oFaX4HTSlMdwF3anF5FGVUBXY8WQ94FHuup6UrauZv_g%3D%3D\\u0026ut=5cfd5a6bab794c1894bc961064d76ed9\\u0026ct=1\\u0026ts=1711164580\\u0026cty=question\\u0026ar=0.0054\\u0026bi=1317\\u0026coi=106636222\\u0026src=brand"],"view_tracks":["https://sugar.zhihu.com/glory_adreaper/glory_log?ar=0.0054\\u0026ct=1\\u0026lr=1\\u0026tue=AQENERpeSUEVDg1XEx0QCRxKBQEPVgsMDAYNCAYKSVhWQExIWkFLU-kFmLpa33h_\\u0026pf=Mac+OS+X\\u0026zr=0\\u0026ts=1711164580\\u0026ui=218.88.27.228\\u0026cc=510100\\u0026dsgtplid=0\\u0026ut=5cfd5a6bab794c1894bc961064d76ed9\\u0026cty=question\\u0026src=brand\\u0026coi=106636222\\u0026bi=1317\\u0026ed=CjEEPFEmLWY9TG9fAGh8UlJwDmcAJ2x4YxFiVgd9LVZYJxR8DSA5IXgdNlcFMnoWCj8EfR4iMyRzFGJUBWF8FhssBHsMc2N3aEY7WgBiewdSdx8rTX5ueXwSdAtEbXUEW3QOew9wbmY-TDZaHGGTTh3HlslDMA%3D%3D"],"click_tracks":[],"close_tracks":["https://sugar.zhihu.com/glory_adreaper/glory_log?cc=510100\\u0026lr=1\\u0026tue=AQENERpeSUEVDg1XEx0QCRxKBQEPVgsMDAYNCAYKSVhWQExIWkFLU-kFmLpa33h_\\u0026bi=1317\\u0026ut=5cfd5a6bab794c1894bc961064d76ed9\\u0026ar=0.0054\\u0026ts=1711164580\\u0026ui=218.88.27.228\\u0026pf=Mac+OS+X\\u0026cty=question\\u0026dsgtplid=0\\u0026ct=1\\u0026src=brand\\u0026zr=0\\u0026coi=106636222\\u0026ed=CjEEKVQsKSVoVjtaCWF0AAl8DH0Vez52dghmVwBmYVENdltnDnY5Iy8TagMBZC4GTSRDdw9lOykqGGNXAmR9AE01UHcJd2p5eQMxDgxhfgdcfAtsWTZndHcXZUFdJXEJX3UIfQl0aXRoVTsDDH19qDfFJ2PdF3g%3D"],"debug_tracks":["https://sugar.zhihu.com/glory_adreaper/glory_log?ed=CjEELl0hLydoVjtaCWF0AAl8DH0Vez52dghmVwBmYVENdltnDnY5Iy8TagMBZC4GTSRDdw9lOykqGGNXAmR9AE01UHcJd2p5eQMxDgxhfgdcfAtsWTZndHcXZUFdJXEJX3UIfQl0aXRoVTsDDH19taVaesyMKTg%3D\\u0026ct=1\\u0026lr=1\\u0026coi=106636222\\u0026ar=0.0054\\u0026cc=510100\\u0026dsgtplid=0\\u0026pf=Mac+OS+X\\u0026tue=AQENERpeSUEVDg1XEx0QCRxKBQEPVgsMDAYNCAYKSVhWQExIWkFLU-kFmLpa33h_\\u0026zr=0\\u0026src=brand\\u0026ut=5cfd5a6bab794c1894bc961064d76ed9\\u0026bi=1317\\u0026ts=1711164580\\u0026cty=question\\u0026ui=218.88.27.228"],"conversion_tracks":["https://sugar.zhihu.com/glory_adreaper/glory_log?lr=1\\u0026zr=0\\u0026cc=510100\\u0026src=brand\\u0026dsgtplid=0\\u0026coi=106636222\\u0026pf=Mac+OS+X\\u0026ut=5cfd5a6bab794c1894bc961064d76ed9\\u0026bi=1317\\u0026tue=AQENERpeSUEVDg1XEx0QCRxKBQEPVgsMDAYNCAYKSVhWQExIWkFLU-kFmLpa33h_\\u0026ar=0.0054\\u0026ct=1\\u0026cty=question\\u0026ui=218.88.27.228\\u0026ts=1711164580\\u0026ed=CjEEKVctLCU8VjsIX3Y_WVZ9CHIIIWN1eQhqAwdoYQRbdA9nWSVpImMTZwRSMXoID3UNKA5lOzpzEnQGWDRxAVt2DXsIZSopcxRmVwhnalMCeAh4D3RjcmhEJ1oFaX4HTSlMdwF3anF5FGVUBXY8WQ94FHvPuW2YISDDTQ%3D%3D"],"za_ad_info":"{\\"ad_id\\":103410,\\"ad_zone_id\\":7,\\"category\\":\\"1\\",\\"timestamp\\":1711164500,\\"creative_id\\":127792}","za_ad_info_json":"{\\"ad_id\\":103410,\\"ad_zone_id\\":7,\\"category\\":\\"1\\",\\"timestamp\\":1711164500,\\"creative_id\\":127792}","creatives":[{"id":127792,"asset":{"brand_name":"长安汽车","brand_logo":"https://pic4.zhimg.com/v2-ebfe648ee39c53ccb9f4640c707f65be.jpg?source=9963c322","title":"作为消费者，如何判断一套混动系统的好坏?","desc":"面对市场上众多不同品牌的混动系统，消费者需要考虑哪些指标，才能辨别不同混动系统的好坏，作出更好的选择?","imgs":["https://pic1.zhimg.com/70/v2-a2fdfebb41cf0a2552fcf53c4bf22290.jpg"],"landing_url":"https://sugar.zhihu.com/glory_adreaper/glory_log?ts=1711164580\\u0026pf=Mac+OS+X\\u0026src=brand\\u0026ut=5cfd5a6bab794c1894bc961064d76ed9\\u0026bi=1317\\u0026dsgtplid=0\\u0026ar=0.0054\\u0026cty=question\\u0026tue=AQENERpeSUEVDg1XEx0QCRxKBQEPVgsMDAYNCAYKSVhWQExIWkFLU-kFmLpa33h_\\u0026ui=218.88.27.228\\u0026lr=1\\u0026cc=510100\\u0026ed=CjEEKVQqOStoVjtaCWF0AAl8DH0Vez52dghmVwBmYVENdltnDnY5Iy8TagMBZC4GTSRDdw9lOykqGGNXAmR9AE01UHcJd2p5eQMxDgxhfgdcfAtsWTZndHcXZUFdJXEJX3UIfQl0aXRoVTsDDH19UzSGhXxrMBc%3D\\u0026zr=0\\u0026ct=1\\u0026coi=106636222","native_url":"https://www.zhihu.com/question/649613422","img_size":1,"footer":"","cta":"","icon":"推荐了问题","img_position":0,"native_asset":{"plugin_type":""},"brand_desc":"","native_switch":false,"close_logo":false},"proto_info":{"content_type":"celebrity_question","follow_num":55,"answer_num":18,"content_id":106636222,"voting":"DEFAULT","updated_time":1711076490,"updated_time_str":"1 天内更新","content_token":"649613422"},"inner_domain":true,"style":"bsi_7","impression_tracks":["https://bv.brg0.com/sQlg4o?ip=218.88.27.228\\u0026useragent=Mozilla%2F5.0+%28Macintosh%3B+Intel+Mac+OS+X+10_15_7%29+AppleWebKit%2F537.36+%28KHTML%2C+like+Gecko%29+Chrome%2F121.0.0.0+Safari%2F537.36\\u0026osversion=3\\u0026action=impression","https://sugar.zhihu.com/glory_adreaper/glory_log?ui=218.88.27.228\\u0026cc=510100\\u0026lr=1\\u0026dsgtplid=0\\u0026zr=0\\u0026tue=AQENERpeSUEVDg1XEx0QCRxKBQEPVgsMDAYNCAYKSVhWQExIWkFLU-kFmLpa33h_\\u0026pf=Mac+OS+X\\u0026ed=CjEEI1UzKCU9VjsIX3Y_WVZ9CHIIIWN1eQhqAwdoYQRbdA9nWSVpImMTZwRSMXoID3UNKA5lOzpzEnQGWDRxAVt2DXsIZSopcxRmVwhnalMCeAh4D3RjcmhEJ1oFaX4HTSlMdwF3anF5FGVUBXY8WQ94FHuup6UrauZv_g%3D%3D\\u0026ut=5cfd5a6bab794c1894bc961064d76ed9\\u0026ct=1\\u0026ts=1711164580\\u0026cty=question\\u0026ar=0.0054\\u0026bi=1317\\u0026coi=106636222\\u0026src=brand"],"view_tracks":["https://sugar.zhihu.com/glory_adreaper/glory_log?ar=0.0054\\u0026ct=1\\u0026lr=1\\u0026tue=AQENERpeSUEVDg1XEx0QCRxKBQEPVgsMDAYNCAYKSVhWQExIWkFLU-kFmLpa33h_\\u0026pf=Mac+OS+X\\u0026zr=0\\u0026ts=1711164580\\u0026ui=218.88.27.228\\u0026cc=510100\\u0026dsgtplid=0\\u0026ut=5cfd5a6bab794c1894bc961064d76ed9\\u0026cty=question\\u0026src=brand\\u0026coi=106636222\\u0026bi=1317\\u0026ed=CjEEPFEmLWY9TG9fAGh8UlJwDmcAJ2x4YxFiVgd9LVZYJxR8DSA5IXgdNlcFMnoWCj8EfR4iMyRzFGJUBWF8FhssBHsMc2N3aEY7WgBiewdSdx8rTX5ueXwSdAtEbXUEW3QOew9wbmY-TDZaHGGTTh3HlslDMA%3D%3D"],"close_tracks":["https://sugar.zhihu.com/glory_adreaper/glory_log?cc=510100\\u0026lr=1\\u0026tue=AQENERpeSUEVDg1XEx0QCRxKBQEPVgsMDAYNCAYKSVhWQExIWkFLU-kFmLpa33h_\\u0026bi=1317\\u0026ut=5cfd5a6bab794c1894bc961064d76ed9\\u0026ar=0.0054\\u0026ts=1711164580\\u0026ui=218.88.27.228\\u0026pf=Mac+OS+X\\u0026cty=question\\u0026dsgtplid=0\\u0026ct=1\\u0026src=brand\\u0026zr=0\\u0026coi=106636222\\u0026ed=CjEEKVQsKSVoVjtaCWF0AAl8DH0Vez52dghmVwBmYVENdltnDnY5Iy8TagMBZC4GTSRDdw9lOykqGGNXAmR9AE01UHcJd2p5eQMxDgxhfgdcfAtsWTZndHcXZUFdJXEJX3UIfQl0aXRoVTsDDH19qDfFJ2PdF3g%3D"],"view_x_tracks":["https://sugar.zhihu.com/glory_adreaper/glory_log?ts=1711164580\\u0026ct=1\\u0026pf=Mac+OS+X\\u0026zr=0\\u0026cc=510100\\u0026bi=1317\\u0026cty=question\\u0026ut=5cfd5a6bab794c1894bc961064d76ed9\\u0026ui=218.88.27.228\\u0026ed=CjEEPFEmLR82AyEODGh9CFsnAH8PbmIkeB1_UwFheh0KIwooFXVvIy1EZF9VYHhSXWNYMAV0fCEnQW9WAWN4AVtjSSMFcm5wdxJ0BFhtfQJccgB4HiIvfXocYFAXPDkNUnEJew9ybXN6AyIOVW1hAVMhvBQKcsDI\\u0026src=brand\\u0026coi=106636222\\u0026tue=AQENERpeSUEVDg1XEx0QCRxKBQEPVgsMDAYNCAYKSVhWQExIWkFLU-kFmLpa33h_\\u0026ar=0.0054\\u0026dsgtplid=0\\u0026lr=1"],"conversion_tracks":["https://sugar.zhihu.com/glory_adreaper/glory_log?lr=1\\u0026zr=0\\u0026cc=510100\\u0026src=brand\\u0026dsgtplid=0\\u0026coi=106636222\\u0026pf=Mac+OS+X\\u0026ut=5cfd5a6bab794c1894bc961064d76ed9\\u0026bi=1317\\u0026tue=AQENERpeSUEVDg1XEx0QCRxKBQEPVgsMDAYNCAYKSVhWQExIWkFLU-kFmLpa33h_\\u0026ar=0.0054\\u0026ct=1\\u0026cty=question\\u0026ui=218.88.27.228\\u0026ts=1711164580\\u0026ed=CjEEKVctLCU8VjsIX3Y_WVZ9CHIIIWN1eQhqAwdoYQRbdA9nWSVpImMTZwRSMXoID3UNKA5lOzpzEnQGWDRxAVt2DXsIZSopcxRmVwhnalMCeAh4D3RjcmhEJ1oFaX4HTSlMdwF3anF5FGVUBXY8WQ94FHvPuW2YISDDTQ%3D%3D"],"create_time_text":"11 小时前","preset_word":""}],"expand":{"display_advertising_tag":true,"is_new_webview":true,"is_cdn_speeding":false,"extra":{"isinapplaunch":"false"},"x_ar":50,"launch_timeout":600,"ad_sign":1},"experiment_info":"{}","view_x_tracks":["https://sugar.zhihu.com/glory_adreaper/glory_log?ts=1711164580\\u0026ct=1\\u0026pf=Mac+OS+X\\u0026zr=0\\u0026cc=510100\\u0026bi=1317\\u0026cty=question\\u0026ut=5cfd5a6bab794c1894bc961064d76ed9\\u0026ui=218.88.27.228\\u0026ed=CjEEPFEmLR82AyEODGh9CFsnAH8PbmIkeB1_UwFheh0KIwooFXVvIy1EZF9VYHhSXWNYMAV0fCEnQW9WAWN4AVtjSSMFcm5wdxJ0BFhtfQJccgB4HiIvfXocYFAXPDkNUnEJew9ybXN6AyIOVW1hAVMhvBQKcsDI\\u0026src=brand\\u0026coi=106636222\\u0026tue=AQENERpeSUEVDg1XEx0QCRxKBQEPVgsMDAYNCAYKSVhWQExIWkFLU-kFmLpa33h_\\u0026ar=0.0054\\u0026dsgtplid=0\\u0026lr=1"],"mobile_experiment":{"feed_card_exp":"","is_new_hot":"0"},"creative_delivery_type":0}]}',
    pcontent: 'https://www.zhihu.com/question/649002940/answer/3439405824',
    ncontent: 'https://www.zhihu.com/question/637633085/answer/3418959734',
    ext_info: {
      content_type: 'question',
      content_id: '106636222',
      question_id: -1,
      auction_type: 0,
      ecpm: 0,
      type: 1,
      fact_bid_price: -1,
      fact_ctr: -1,
      fact_cvr: -1,
    },
  },
  {
    id: '19_1711164580.288',
    type: 'feed',
    offset: 19,
    verb: 'TOPIC_ACKNOWLEDGED_ANSWER',
    created_time: 1711164580,
    updated_time: 1711164580,
    target: {
      id: 3418959734,
      type: 'answer',
      url: 'https://api.zhihu.com/answers/3418959734',
      author: {
        id: '8c3e6ff33a86b1f93311eb26f1bb3f57',
        url: 'https://api.zhihu.com/people/8c3e6ff33a86b1f93311eb26f1bb3f57',
        user_type: 'people',
        url_token: 'ni-cai-lao-gan-bu',
        name: '鸭神最靠谱',
        headline: '宁为鸭头，不为凤尾！',
        avatar_url:
          'https://picx.zhimg.com/50/v2-2bbe1281910a87619028761f368bb290_l.jpg?source=b6762063',
        is_org: false,
        gender: 1,
        followers_count: 3235,
        is_following: false,
        is_followed: false,
      },
      created_time: 1709601542,
      updated_time: 1709601542,
      voteup_count: 35677,
      thanks_count: 4095,
      comment_count: 1791,
      is_copyable: false,
      question: {
        id: 637633085,
        type: 'question',
        url: 'https://api.zhihu.com/questions/637633085',
        author: {
          id: '4d5b8eab7418f7b25d85203bf68dfef4',
          url: 'https://api.zhihu.com/people/4d5b8eab7418f7b25d85203bf68dfef4',
          user_type: 'people',
          url_token: 'xie-yu-hang-36-89',
          name: '独山一楼',
          headline: '',
          avatar_url:
            'https://picx.zhimg.com/50/v2-11467a7c17054e2f3790543a62a225ba_l.jpg?source=b6762063',
          is_org: false,
          gender: 1,
          followers_count: 1,
          is_following: false,
          is_followed: false,
        },
        title: '韩国人知道自己的国家小吗？?',
        created: 1704182531,
        answer_count: 0,
        follower_count: 0,
        comment_count: 35,
        bound_topic_ids: [1169, 2532, 4621, 169784, 1998091],
        is_following: false,
        excerpt: '',
        relationship: {
          is_author: false,
        },
        detail: '',
        question_type: 'normal',
      },
      excerpt:
        '知道，和亲眼见到，震撼程度不一样。 韩国某社长，年纪五六十岁。他从首尔飞到青岛谈业务，我去接待，然后一起做高铁去哈尔滨。 当高铁出了城市，行驶在广袤的田野上时，我感觉社长的情绪有点波动。 过了山海关，进了东北后，社长彻底绷不住了。 他眼睛湿润着对我说，这大好的土地要是给韩国，那他就死而无憾了。 我心想：垂涎这片土地的人多了去了，死一万个你，这片土地也是中国的。',
      excerpt_new:
        '知道，和亲眼见到，震撼程度不一样。 韩国某社长，年纪五六十岁。他从首尔飞到青岛谈业务，我去接待，然后一起做高铁去哈尔滨。 当高铁出了城市，行驶在广袤的田野上时，我感觉社长的情绪有点波动。 过了山海关，进了东北后，社长彻底绷不住了。 他眼睛湿润着对我说，这大好的土地要是给韩国，那他就死而无憾了。 我心想：垂涎这片土地的人多了去了，死一万个你，这片土地也是中国的。',
      preview_type: 'default',
      preview_text: '',
      reshipment_settings: 'disallowed',
      content:
        '<p data-pid="SXg6fkEp">知道，和亲眼见到，震撼程度不一样。</p><p data-pid="0fYIBKbd">韩国某社长，年纪五六十岁。他从首尔飞到青岛谈业务，我去接待，然后一起做高铁去哈尔滨。</p><p data-pid="pZqhXJ1x">当高铁出了城市，行驶在广袤的田野上时，我感觉社长的情绪有点波动。</p><p data-pid="u9WjsAe4">过了山海关，进了东北后，社长彻底绷不住了。</p><p data-pid="HeyvD0iE">他眼睛湿润着对我说，这大好的土地要是给韩国，那他就死而无憾了。</p><p data-pid="b05tHC5V">我心想：垂涎这片土地的人多了去了，死一万个你，这片土地也是中国的。</p>',
      relationship: {
        is_thanked: false,
        is_nothelp: false,
        voting: 0,
      },
      is_labeled: false,
      visited_count: 2987639,
      favorite_count: 1159,
      answer_type: 'normal',
    },
    brief: '{"source": "TS", "type": "answer", "id": 3418959734}',
    attached_info:
      'Cs4ECN/Zme+g5JP4vAEQBBoJNjUxNzA0MTA4IIbmma8GKN2WAjD/DUATSigKE1RTX1NPVVJDRV9GRUVEUkVfVjcSATAYACAAOgp7InJhdyI6IiJ9WgkxMDM5NzQ1NjdiIGNjZGQ1NWExZGY0ZjRkMmUzZjk3OWM3OWVhZDJiMDczcgozNDE4OTU5NzM0igEJNjM3NjMzMDg1qgEJcmVjb21tZW5kwgEgOGMzZTZmZjMzYTg2YjFmOTMzMTFlYjI2ZjFiYjNmNTfyAQoIDBIGTm9ybWFs8gEoCAoSJDg0OTJlNGYyLTFlZGUtNGIyYS1hZjdhLWFlNWExNTQyOGJlM/IBBQgLEgE0ggIAiALhx+3K5jGSAiA4YzNlNmZmMzNhODZiMWY5MzMxMWViMjZmMWJiM2Y1N5oCANoCE1RTX1NPVVJDRV9GRUVEUkVfVjfoAgL6AgtOT1JNQUxfRkxPV4oDIGEzNDU2MDhjMTI1NjRiNmJhNjA4MmYzOWY3YTNlYmQ5mgMNCgJ2MBAAGgVvdGhlcqgD96y2AdgDAOoDCWZlZWRyZV92N/oDEBIMVU5LTk9XTl9NT0RFIACABACIBACSBAZOb3JtYWyaBAEyoAQAqAQAsAQAugQGbWFudWFswgQDMTYwyAQA0gQP5o6o6I2Q5bey5pu05paw2AQA8AQA+QQAAAAgj869P4EFAAAAAAAAAACJBUwMvz+/f6k/kgUJ5q2m5L6v5Yy6mgUDZGZ0ogUDZGZ0sgUBMbkFAAAAAAAAAADQBQDgBQDoBQDwBQSSAiUKCTY1MTcwNDEwOBIKMzQxODk1OTczNBgEIgpJTUFHRV9URVhU',
    action_card: false,
  },
  {
    id: '20_1711164580.249',
    type: 'feed',
    offset: 20,
    verb: 'TOPIC_ACKNOWLEDGED_ANSWER',
    created_time: 1711164580,
    updated_time: 1711164580,
    target: {
      id: 3153410853,
      type: 'answer',
      url: 'https://api.zhihu.com/answers/3153410853',
      author: {
        id: 'ce40c704800079110fac389de1d6f57f',
        url: 'https://api.zhihu.com/people/ce40c704800079110fac389de1d6f57f',
        user_type: 'people',
        url_token: 's.invalid',
        name: 'invalid s',
        headline: '我特别喜欢和聪明人交往，因为不用考虑他们的尊严——乔布斯',
        avatar_url:
          'https://pic1.zhimg.com/50/v2-3be9cec540b8e7da359d411dee690100_l.jpg?source=b6762063',
        is_org: false,
        gender: 1,
        badge: [
          {
            type: 'best_answerer',
            description: '编程等 2 个话题下的优秀答主',
            topic_names: ['编程', '程序员'],
            topic_ids: [1354, 707],
          },
        ],
        followers_count: 270490,
        is_following: false,
        is_followed: false,
      },
      created_time: 1691343288,
      updated_time: 1691343288,
      voteup_count: 5247,
      thanks_count: 1132,
      comment_count: 897,
      is_copyable: false,
      question: {
        id: 615532170,
        type: 'question',
        url: 'https://api.zhihu.com/questions/615532170',
        author: {
          id: '994092c2bed6087cccdef5fd18c2a9df',
          url: 'https://api.zhihu.com/people/994092c2bed6087cccdef5fd18c2a9df',
          user_type: 'people',
          url_token: '--66-50-68-34',
          name: '知乎用户.',
          headline: '',
          avatar_url:
            'https://picx.zhimg.com/50/v2-c117caf33c8aed594e1d5759509eb953_l.jpg?source=b6762063',
          is_org: false,
          gender: 0,
          followers_count: 0,
          is_following: false,
          is_followed: false,
        },
        title: '手机是不是会偷偷的监听?',
        created: 1691077803,
        answer_count: 0,
        follower_count: 0,
        comment_count: 8,
        bound_topic_ids: [488, 2823, 118988],
        is_following: false,
        excerpt: '',
        relationship: {
          is_author: false,
        },
        detail: '',
        question_type: 'normal',
      },
      excerpt:
        '是，一直在。不光在监听，还在拍照。 典型如当年vivo推出第一款升降摄像头手机之后，用户发现自己手机的摄像头跟闹鬼了一样，不停的伸出来拍照。然后才发现几乎所有国产APP都会偷偷启动摄像头拍摄。',
      excerpt_new:
        '是，一直在。不光在监听，还在拍照。 典型如当年vivo推出第一款升降摄像头手机之后，用户发现自己手机的摄像头跟闹鬼了一样，不停的伸出来拍照。然后才发现几乎所有国产APP都会偷偷启动摄像头拍摄。',
      preview_type: 'default',
      preview_text: '',
      reshipment_settings: 'need_payment',
      content:
        '<p data-pid="3yVqXsg5">是，一直在。不光在监听，还在拍照。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="fXKZRxha">典型如当年vivo推出第一款升降摄像头手机之后，用户发现自己手机的摄像头跟闹鬼了一样，不停的伸出来拍照。然后才发现几乎所有国产APP都会偷偷启动摄像头拍摄。</p>',
      relationship: {
        is_thanked: false,
        is_nothelp: false,
        voting: 0,
      },
      is_labeled: false,
      visited_count: 3014736,
      favorite_count: 1111,
      answer_type: 'normal',
    },
    brief: '{"source": "TS", "type": "answer", "id": 3153410853}',
    attached_info:
      'CuoECN/Zme+g5JP4vAEQBBoJNjAzNDMyMTM0ILizv6YGKP8oMIEHQBRKKAoTVFNfU09VUkNFX0ZFRURSRV9WNxIBMBgAIAA6CnsicmF3IjoiIn1aCDk5MDY1MDU0YiBjY2RkNTVhMWRmNGY0ZDJlM2Y5NzljNzllYWQyYjA3M3IKMzE1MzQxMDg1M4oBCTYxNTUzMjE3MKoBCXJlY29tbWVuZMIBIGNlNDBjNzA0ODAwMDc5MTEwZmFjMzg5ZGUxZDZmNTdm8gEKCAwSBk5vcm1hbPIBKAgKEiQ1MTAwNjlkZS02NjM3LTQwZWUtOTlhNy0yOTU4YjQyODI2NmHyAQUICxIBNIICAIgC4cftyuYxkgIgY2U0MGM3MDQ4MDAwNzkxMTBmYWMzODlkZTFkNmY1N2aaAgDKAhtPbGRDb250ZW50UmVkdWNlNVdlaWdodFJ1bGXaAhNUU19TT1VSQ0VfRkVFRFJFX1Y36AIC+gILTk9STUFMX0ZMT1eKAyBhMzQ1NjA4YzEyNTY0YjZiYTYwODJmMzlmN2EzZWJkOZoDDQoCdjAQABoFb3RoZXKoA9CAuAHYAwDqAwlmZWVkcmVfdjf6AxASDFVOS05PV05fTU9ERSAAgAQAiAQAkgQGTm9ybWFsmgQBMqAEAKgEALAEALoEBm1hbnVhbMIEAzE2MMgEANIED+aOqOiNkOW3suabtOaWsNgEAPAEAPkEAAAA4CBztD+BBQAAAAAAAAAAiQVMDL8/v3+pP5IFCeatpuS+r+WMupoFA2RmdKIFA2RmdLIFATG5BQAAAAAAAAAA0AUA4AUA6AUA8AUEkgIlCgk2MDM0MzIxMzQSCjMxNTM0MTA4NTMYBCIKSU1BR0VfVEVYVA==',
    action_card: false,
  },
  {
    id: '21_1711164580.360',
    type: 'feed',
    offset: 21,
    verb: 'TOPIC_ACKNOWLEDGED_ANSWER',
    created_time: 1711164580,
    updated_time: 1711164580,
    target: {
      id: 3347789840,
      type: 'answer',
      url: 'https://api.zhihu.com/answers/3347789840',
      author: {
        id: 'a5d6cd221110f64c6ca497afa0a2d39f',
        url: 'https://api.zhihu.com/people/a5d6cd221110f64c6ca497afa0a2d39f',
        user_type: 'people',
        url_token: '32-86-72-15',
        name: 'DOGDOG',
        headline: '博士学姐分享考博干货，公众号『考博天地』',
        avatar_url:
          'https://picx.zhimg.com/50/v2-e1b6192aa0d8dcf140ba189dea518a4c_l.jpg?source=b6762063',
        is_org: false,
        gender: 0,
        badge: [
          {
            type: 'identity_people',
            description: '北京大学 经济学博士在读',
          },
        ],
        followers_count: 1011,
        is_following: false,
        is_followed: false,
      },
      created_time: 1704243984,
      updated_time: 1704243984,
      voteup_count: 984,
      thanks_count: 2494,
      comment_count: 34,
      is_copyable: true,
      question: {
        id: 20030360,
        type: 'question',
        url: 'https://api.zhihu.com/questions/20030360',
        author: {
          id: '',
          url: '',
          user_type: 'people',
          url_token: '',
          name: '匿名用户',
          headline: '',
          avatar_url:
            'https://picx.zhimg.com/v2-d41c2ceaed8f51999522f903672a521f_l.jpg?source=b6762063',
          is_org: false,
          gender: -1,
          followers_count: 0,
          is_following: false,
          is_followed: false,
        },
        title: '最让你震惊的网站有哪些？',
        created: 1327075533,
        answer_count: 0,
        follower_count: 0,
        comment_count: 98,
        bound_topic_ids: [99, 445, 1990, 2083, 3835],
        is_following: false,
        excerpt: '',
        relationship: {
          is_author: false,
        },
        detail: '',
        question_type: 'normal',
      },
      excerpt:
        '1.大学资源网 （http://www.dxzy163.com/ ）这是一个高质量免费学习网站，网站上面有丰富的学习视频教程。它包含从小学到高中的课程、考研课程、大学所学的专业课程以及资格考试的课程。非常适合大学生学习。 2.Maspeak （https://maspeak.com/ ） 这是一个趣味学习外语的网站，它只是学习：法语、英语、意大利语、西班牙语、日语、韩语、俄语、德语、阿拉伯语。 3.PPT宝藏 （http://www.pptbz.com/ ）PPT宝藏是一个免费的PPT资源网站…',
      excerpt_new:
        '1.大学资源网 （http://www.dxzy163.com/ ）这是一个高质量免费学习网站，网站上面有丰富的学习视频教程。它包含从小学到高中的课程、考研课程、大学所学的专业课程以及资格考试的课程。非常适合大学生学习。 2.Maspeak （https://maspeak.com/ ） 这是一个趣味学习外语的网站，它只是学习：法语、英语、意大利语、西班牙语、日语、韩语、俄语、德语、阿拉伯语。 3.PPT宝藏 （http://www.pptbz.com/ ）PPT宝藏是一个免费的PPT资源网站…',
      preview_type: 'default',
      preview_text: '',
      reshipment_settings: 'allowed',
      content:
        '<p data-pid="cSLyFOQv"><b>1.大学资源网</b></p><p data-pid="dZk45P6G"><b>（<a href="https://link.zhihu.com/?target=http%3A//www.dxzy163.com/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://www.</span><span class="visible">dxzy163.com/</span><span class="invisible"></span></a>）</b></p><p data-pid="tpqUzlGv">这是一个高质量免费学习网站，网站上面有丰富的学习视频教程。它包含从小学到高中的课程、考研课程、大学所学的专业课程以及资格考试的课程。非常适合大学生学习。</p><figure data-size="normal"><img src="https://pic4.zhimg.com/v2-8c30d6cd194d349cd89d531916e5a891_b.jpg" data-caption="" data-size="normal" data-rawwidth="720" data-rawheight="584" data-original-token="v2-81a5822f4b32413d3d0408b0e5031257" class="origin_image zh-lightbox-thumb" width="720" data-original="https://pic4.zhimg.com/v2-8c30d6cd194d349cd89d531916e5a891_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="916yArMJ"><b>2.<i><u>Maspeak</u></i></b></p><p data-pid="NEM4BPwe"><b>（<a href="https://link.zhihu.com/?target=https%3A//maspeak.com/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">maspeak.com/</span><span class="invisible"></span></a>）</b></p><p data-pid="oNqujTAJ"><b>这是一个趣味学习外语的网站，它只是学习：法语、英语、意大利语、西班牙语、日语、韩语、俄语、德语、阿拉伯语。</b></p><figure data-size="normal"><img src="https://pic3.zhimg.com/v2-15d242579319aca9e477025e6870c356_b.jpg" data-caption="" data-size="normal" data-rawwidth="720" data-rawheight="344" data-original-token="v2-b7792b900d51768a0f4166a5ae8bf624" class="origin_image zh-lightbox-thumb" width="720" data-original="https://pic3.zhimg.com/v2-15d242579319aca9e477025e6870c356_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="NcZLJVWU"><b>3.<u><i>PPT宝藏</i></u></b></p><p data-pid="VnyKmdh8"><b>（<a href="https://link.zhihu.com/?target=http%3A//www.pptbz.com/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://www.</span><span class="visible">pptbz.com/</span><span class="invisible"></span></a>）</b></p><p data-pid="j06naO55">PPT宝藏是一个免费的PPT资源网站。里面包含PPT模板、PPT素材、PPT教程。不管是想下载个模板简单的只制作PPT还是想深入学习下制作PPT都是可以看一下。PPT教程很详细，非常适合小白。有了它，组会ppt再也不用发愁了</p><figure data-size="normal"><img src="https://pic3.zhimg.com/v2-7639b63de4e55b5bad186220fe380720_b.jpg" data-caption="" data-size="normal" data-rawwidth="720" data-rawheight="362" data-original-token="v2-a28322e9e6e59060829435a940d21903" class="origin_image zh-lightbox-thumb" width="720" data-original="https://pic3.zhimg.com/v2-7639b63de4e55b5bad186220fe380720_r.jpg"/></figure><p data-pid="xqr-jA2j"><b>4. 中国国家数字图书馆</b></p><p data-pid="TR3NoBe1"><b>（<a href="https://link.zhihu.com/?target=http%3A//www.nlc.cn/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://www.</span><span class="visible">nlc.cn/</span><span class="invisible"></span></a>）</b></p><p data-pid="P126O0Ln">当你想查相关的图书资料又不想去图书馆，这是个好选择。中国国家数字图书馆整合了有四万多册的图书资源。还有音频和视频的辅助资源，不想看字的同时可以听下音频和看视频。</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-195c3148fa8f1e55e78de232fb17cbd2_b.jpg" data-caption="" data-size="normal" data-rawwidth="720" data-rawheight="406" data-original-token="v2-49ac58b56bd01ac7d2ac25df0a8d6ea0" class="origin_image zh-lightbox-thumb" width="720" data-original="https://pic1.zhimg.com/v2-195c3148fa8f1e55e78de232fb17cbd2_r.jpg"/></figure><p data-pid="xA3ql3ZL"><b>5.</b> <b>MSDN我告诉你</b></p><p data-pid="YP3J4a03"><b>（<a href="https://link.zhihu.com/?target=https%3A//msdn.itellyou.cn/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">msdn.itellyou.cn/</span><span class="invisible"></span></a>）</b></p><p data-pid="dmn019gu">想重装系统又怕自己乱找的系统镜像有很多垃圾插件。MSDN我告诉你，这个网站的镜像不仅是免费的，重点是纯净版，一个插件都没有。</p><figure data-size="normal"><img src="https://pic4.zhimg.com/v2-8c30d6cd194d349cd89d531916e5a891_b.jpg" data-caption="" data-size="normal" data-rawwidth="720" data-rawheight="584" data-original-token="v2-81a5822f4b32413d3d0408b0e5031257" class="origin_image zh-lightbox-thumb" width="720" data-original="https://pic4.zhimg.com/v2-8c30d6cd194d349cd89d531916e5a891_r.jpg"/></figure><p data-pid="NIPjAZPt"><b>6.天空之城</b></p><p data-pid="o_oQWXTu"><b>（<a href="https://link.zhihu.com/?target=https%3A//www.skypixel.com/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://www.</span><span class="visible">skypixel.com/</span><span class="invisible"></span></a>）</b></p><p data-pid="FDUUUH1K">一个汇集了全球航拍爱好者的航拍作品，每个作品都很炫酷震撼、每一帧都可以给你带来不一样的视觉盛宴。</p><figure data-size="normal"><img src="https://pic2.zhimg.com/v2-34311717b312e5f070a1a92b196458fb_b.jpg" data-caption="" data-size="normal" data-rawwidth="720" data-rawheight="295" data-original-token="v2-4392824955c2f4d2527d65acd2cd8e7e" class="origin_image zh-lightbox-thumb" width="720" data-original="https://pic2.zhimg.com/v2-34311717b312e5f070a1a92b196458fb_r.jpg"/></figure><p data-pid="4Qgkb7lF"><b>7.译学馆</b></p><p data-pid="l5Qy6v2S"><b>（<a href="https://link.zhihu.com/?target=https%3A//www.yxgapp.com/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://www.</span><span class="visible">yxgapp.com/</span><span class="invisible"></span></a>）</b></p><p data-pid="MIyJDwuK">译学馆是一个高质量的综合学习视频网站。这些教学视频都是经过翻译的所以不需要担心看不懂的问题。这里的教学视频质量非常的高还有世界名校的公开课，是一个可以真真正正学到干货的网站。</p><figure data-size="normal"><img src="https://pic4.zhimg.com/v2-09226158ab33c25483a5a0f29b9a1d63_b.jpg" data-caption="" data-size="normal" data-rawwidth="720" data-rawheight="358" data-original-token="v2-2cdc24142ded296439ba2d72bf6a9460" class="origin_image zh-lightbox-thumb" width="720" data-original="https://pic4.zhimg.com/v2-09226158ab33c25483a5a0f29b9a1d63_r.jpg"/></figure><p data-pid="DrqMW8A6"><b>8. 在线PS</b></p><p data-pid="KibG4svv"><b>（<a href="https://link.zhihu.com/?target=https%3A//ps.gaoding.com/%23/%3Fhmsr%3Dzc-cc" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">ps.gaoding.com/#</span><span class="invisible">/?hmsr=zc-cc</span><span class="ellipsis"></span></a></b>）</p><p data-pid="9JzOtRr5">在线PS对于不想在自己电脑装太多软件的上班族来说可以说是一个福音。为什么这么说呢？在线ps无需安装，仅需要打开这个网址就可以在线作图。就算在外出差只要有电脑就可以随时随地作图。非常的方便，效果比美图秀秀精细多了。</p><figure data-size="normal"><img src="https://pic4.zhimg.com/v2-94f4c80a3429f21af97f04292e827261_b.jpg" data-caption="" data-size="normal" data-rawwidth="720" data-rawheight="328" data-original-token="v2-8c8c076fcd1e6e0765bf7dd577315ed0" class="origin_image zh-lightbox-thumb" width="720" data-original="https://pic4.zhimg.com/v2-94f4c80a3429f21af97f04292e827261_r.jpg"/></figure><p data-pid="62QipltP"><b>9.Oeasy</b></p><p data-pid="krGFVxV6"><b>（<a href="https://link.zhihu.com/?target=http%3A//oeasy.org/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://</span><span class="visible">oeasy.org/</span><span class="invisible"></span></a>）</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="DKZn4uW9">这是一个免费教学综合技能的一个网站。它所提供的教学视频质量很高类目也很丰富。有办公软件教程、设计类软件教程、以及视频剪辑PR的教程和js代码类教程。良心的是教学视频和素材和软件都是可以免费下载。</p><figure data-size="normal"><img src="https://pic3.zhimg.com/v2-a1142e95101f3a0f1c30998f0bac5846_b.jpg" data-caption="" data-size="normal" data-rawwidth="720" data-rawheight="381" data-original-token="v2-1f54d38cdef4345e73a5d171ce16252a" class="origin_image zh-lightbox-thumb" width="720" data-original="https://pic3.zhimg.com/v2-a1142e95101f3a0f1c30998f0bac5846_r.jpg"/></figure><p data-pid="8Nbx-9dK"><b>10.考试酷</b></p><p data-pid="waMH94nl"><b>（<a href="https://link.zhihu.com/?target=https%3A//www.examcoo.com/index/ku" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://www.</span><span class="visible">examcoo.com/index/ku</span><span class="invisible"></span></a>）</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="TZbQcpCK">这个网站可以说是一个宝库。为什么这么说呢？因为不论你是学历提升还是考专业考证再或者是公务员考试。在这里你都可以轻松找到你想要的考试题库。而且还是免费的，非常良心。</p><figure data-size="normal"><img src="https://pic2.zhimg.com/v2-84e3f3cd8bcaac6661b100d5dd420161_b.jpg" data-caption="" data-size="normal" data-rawwidth="720" data-rawheight="327" data-original-token="v2-caa26fa699c239552b25df9c4f11343a" class="origin_image zh-lightbox-thumb" width="720" data-original="https://pic2.zhimg.com/v2-84e3f3cd8bcaac6661b100d5dd420161_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="e_2VwKLL">期末已至，一大群考“狮”在原野狂奔，能握住考“绳”的人才能脱离狮口。研究生们不仅要通过考试，还要准备期末大组会，小论文等等，但我们都不能停下学习的脚步，希望这些“宝藏”能够助大家一臂之力，也能丰富大家研究之余的生活。</p><p class="ztext-empty-paragraph"><br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="YFKUeg7a">以下这些网站，在我看到第一眼，我就转不过头，实在是令我太惊讶了，这不仅仅是打开了世界的大门，还帮我解决了很多解决不了的难题！<br/>1.创客贴<br/>一款简单易用，功能强大的线上图形设计工具，它支持在线设计创作，不需要下载任何的安装包，也没有引导你们去消费什么东西，给我们提供了极多的设计素材，其强大的精品模板库，解决了我很多设计上的困难。<br/><br/></p><figure data-size="normal"><img src="https://picx.zhimg.com/v2-fb809c297fc8f796705bf9fcd1ee51db_b.jpg" data-caption="" data-size="normal" data-rawwidth="630" data-rawheight="277" data-original-token="v2-fc7bf2d5fd0ab08489e033f1aeb03a52" class="origin_image zh-lightbox-thumb" width="630" data-original="https://picx.zhimg.com/v2-fb809c297fc8f796705bf9fcd1ee51db_r.jpg"/></figure><p data-pid="nj1Mt94U">2.万兴PDF<br/>这个网站送了我一款好软件，那就是万兴PDF软件，软件在网站上可以免费下载，安装后可以免费试用。这款软件可以实现大部分的PDF文件的格式转换，在软件内，可以将PDF文件转换成word文档、excel和ppt等格式，便于后续的编辑操作。其次，用万兴PDF软件进行文档阅览的时候，可以进行文档的标注，下划线、删除线、高亮等功能都可以通过软件进行，可以满足在文件上面做笔记的需求。除此以外，还可以对PDF文件进行编辑，可以添加水印、添加背景等等。网站送给我的这个软件，解决了我PDF文件处理的各种烦恼，不得不为它点赞。<br/><br/></p><figure data-size="normal"><img src="https://pica.zhimg.com/v2-1f552c5584333f5886b43138eb63b458_b.jpg" data-caption="" data-size="normal" data-rawwidth="630" data-rawheight="299" data-original-token="v2-b08ce16682a85cdc1aa31eb297525624" class="origin_image zh-lightbox-thumb" width="630" data-original="https://pica.zhimg.com/v2-1f552c5584333f5886b43138eb63b458_r.jpg"/></figure><p data-pid="KLTC17CO">3.大学资源网<br/>对于大学生来说，这是一个很好的学习网站，免费在线学习，里面有大量高质量的学习视频教程，学生砸宿舍就可以免费听到名师的课程，足不出户提升自己，没有什么学习网站比这个网站更适合大学生的自我提升了。<br/><br/></p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-7beb9b3ab5253978aba795270c46934e_b.jpg" data-caption="" data-size="normal" data-rawwidth="630" data-rawheight="277" data-original-token="v2-85973484b2f9a59afef086d4d67936d2" class="origin_image zh-lightbox-thumb" width="630" data-original="https://pic1.zhimg.com/v2-7beb9b3ab5253978aba795270c46934e_r.jpg"/></figure><p></p>',
      relationship: {
        is_thanked: false,
        is_nothelp: false,
        voting: 0,
      },
      is_labeled: false,
      visited_count: 91121,
      favorite_count: 11348,
      answer_type: 'normal',
    },
    brief: '{"source": "TS", "type": "answer", "id": 3347789840}',
    attached_info:
      'Ct8ECN/Zme+g5JP4vAEQBBoJNjM4NzY2NjcxIJDm0qwGKNgHMCJAFUowChtUU19TT1VSQ0VfQkFTSUNfSU5GT19SRUNBTEwSATAYACAAOgp7InJhdyI6IiJ9WgYxOTIxMzNiIGNjZGQ1NWExZGY0ZjRkMmUzZjk3OWM3OWVhZDJiMDczcgozMzQ3Nzg5ODQwigEIMjAwMzAzNjCqAQlyZWNvbW1lbmTCASBhNWQ2Y2QyMjExMTBmNjRjNmNhNDk3YWZhMGEyZDM5ZvIBCggMEgZOb3JtYWzyASgIChIkNTBiMWY0YWYtYThhYi00MzA3LTgxMDUtNTVmYmEwN2MwYjI28gEFCAsSATSCAgCIAuHH7crmMZICIGE1ZDZjZDIyMTExMGY2NGM2Y2E0OTdhZmEwYTJkMzlmmgIA2gIbVFNfU09VUkNFX0JBU0lDX0lORk9fUkVDQUxM6AID+gILTk9STUFMX0ZMT1eKAyBhMzQ1NjA4YzEyNTY0YjZiYTYwODJmMzlmN2EzZWJkOZoDDQoCdjAQABoFb3RoZXKoA/HHBdgDAOoDEWJhc2ljX2luZm9fcmVjYWxs+gMQEgxVTktOT1dOX01PREUgAIAEAIgEAJIEBk5vcm1hbJoEATOgBACoBACwBAC6BAZtYW51YWzCBAMxNjDIBADSBA/mjqjojZDlt7Lmm7TmlrDYBADwBAD5BAAAACDeLpM/gQUAAAAAAAAAAIkFTAy/P79/qT+SBQnmrabkvq/ljLqaBQNkZnSiBQNkZnSyBQExuQUAAAAAAAAAANAFAOAFAOgFAPAFBJICJQoJNjM4NzY2NjcxEgozMzQ3Nzg5ODQwGAQiCklNQUdFX1RFWFQ=',
    action_card: false,
  },
  {
    id: '22_1711164580.598',
    type: 'feed',
    offset: 22,
    verb: 'TOPIC_ACKNOWLEDGED_ANSWER',
    created_time: 1711164580,
    updated_time: 1711164580,
    target: {
      id: 3244713665,
      type: 'answer',
      url: 'https://api.zhihu.com/answers/3244713665',
      author: {
        id: '734298310f92c555ecafdf8853230c92',
        url: 'https://api.zhihu.com/people/734298310f92c555ecafdf8853230c92',
        user_type: 'people',
        url_token: 'zhuan-shen-wei-xiao-99-77',
        name: '苏小卷',
        headline: '文案集锦 | 生活好物 | 家电数码测评✨',
        avatar_url:
          'https://picx.zhimg.com/50/v2-eadbcd2408b041854cbba7f8bd25d15e_l.jpg?source=b6762063',
        is_org: false,
        gender: 0,
        followers_count: 15688,
        is_following: false,
        is_followed: false,
      },
      created_time: 1696950931,
      updated_time: 1703733958,
      voteup_count: 4480,
      thanks_count: 8528,
      comment_count: 174,
      is_copyable: false,
      question: {
        id: 47436256,
        type: 'question',
        url: 'https://api.zhihu.com/questions/47436256',
        author: {
          id: '7a8366e69f756bab0d18ac62e4490946',
          url: 'https://api.zhihu.com/people/7a8366e69f756bab0d18ac62e4490946',
          user_type: 'people',
          url_token: 'yi-ri-89',
          name: '橙子和羊',
          headline: '',
          avatar_url:
            'https://pic1.zhimg.com/50/v2-94ee9d1d3f650d0819507e3a10d67454_l.jpg?source=b6762063',
          is_org: false,
          gender: 0,
          followers_count: 15,
          is_following: false,
          is_followed: false,
        },
        title: '你读过的最有力量的一段文字是什么？',
        created: 1465897420,
        answer_count: 0,
        follower_count: 0,
        comment_count: 138,
        bound_topic_ids: [113, 686, 2058, 7499, 285235],
        is_following: false,
        excerpt: '',
        relationship: {
          is_author: false,
        },
        detail: '',
        question_type: 'normal',
      },
      thumbnail:
        'https://picx.zhimg.com/50/v2-8a20239fe8d70fbe1cf81b80244ab37a_720w.jpg?source=b6762063',
      excerpt:
        '1、 《杀死一只知更鸟》有一段话说： “你永远不可能真正去了解一个人，除非你穿过她的鞋子去走她走过的路，站在她的角度思考问题，可当你走过她走的路时，你连路过都觉得难过。” 2、 当我真正开始爱自己，我睡得越来越早，也越来越喜欢锻炼。我不再纠结和焦虑，变得自信满满，去追求有意义的人和事，并为之燃烧自己的热情。我发现，人生才真正开始。 3、 把时间分给睡眠，分给书籍，分给运动，分给花鸟树木和山川湖海，分给你…',
      excerpt_new:
        '1、 《杀死一只知更鸟》有一段话说： “你永远不可能真正去了解一个人，除非你穿过她的鞋子去走她走过的路，站在她的角度思考问题，可当你走过她走的路时，你连路过都觉得难过。” 2、 当我真正开始爱自己，我睡得越来越早，也越来越喜欢锻炼。我不再纠结和焦虑，变得自信满满，去追求有意义的人和事，并为之燃烧自己的热情。我发现，人生才真正开始。 3、 把时间分给睡眠，分给书籍，分给运动，分给花鸟树木和山川湖海，分给你…',
      preview_type: 'default',
      preview_text: '',
      reshipment_settings: 'disallowed',
      content:
        '<p data-pid="x6MhL-rs">1、</p><p data-pid="6r4Z5zpM">《杀死一只知更鸟》有一段话说：</p><p data-pid="azyAyS7g"><b>“你永远不可能真正去了解一个人，除非你穿过她的鞋子去走她走过的路，站在她的角度思考问题，可当你走过她走的路时，你连路过都觉得难过。”</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="M2zAwSLI">2、</p><p data-pid="ar2aAZNr"><b>当我真正开始爱自己，我睡得越来越早，也越来越喜欢锻炼。我不再纠结和焦虑，变得自信满满，去追求有意义的人和事，并为之燃烧自己的热情。我发现，人生才真正开始。</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="EhN-enoG">3、</p><p data-pid="zJnk1PNE">把时间分给睡眠，分给书籍，分给运动，分给花鸟树木和山川湖海，分给你对这个世界的热爱，而不是将自己浪费在无聊的人和事上当你开始做时间的主人，你会感受到平淡生活中喷涌而出的平静的力量，至于那些焦虑与不安，自然烟消云散。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="Oo0Vi7HS">4、</p><p data-pid="LbdQH0wK"><b>吸引力法则真的很有用：</b></p><p data-pid="r2Qjidd7"><b>“我很自律，我很努力，我很可爱，我很值得，我不内耗，我不焦虑，接下来会有很多好事发生，快乐会贴近，麻烦会远离，难关都通过，会有很多好消息！”</b></p><p data-pid="vSnoBCeW">要相信“相信”的力量，不会的东西，觉得难的事情，一定不要拖、不要躲，先搞明白，后精湛，其实就比大多数人优秀了。选定一件事，就坚持去做，低头赶路，不问前程。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="o-sd4B2E">5、</p><p data-pid="h97laXd8"><b>我们终其一生寻找的，应该是自己喜欢的生活方式，和想要成为的人。</b>所以多走点弯路也没关系的，花很多时间在路上也不要紧的，和世俗或是别人所期待的不一样也可以的。只要你是在成为你的路上，就够了。</p><figure data-size="normal"><img src="https://picx.zhimg.com/v2-cef68c393418eae783909c3a9e232ef1_b.jpg" data-caption="" data-size="normal" data-rawwidth="1000" data-rawheight="2164" data-original-token="v2-cef68c393418eae783909c3a9e232ef1" data-default-watermark-src="https://pic2.zhimg.com/v2-903c7190a86cbd1d2bd5b1fd5b0784a5_b.jpg" class="origin_image zh-lightbox-thumb" width="1000" data-original="https://picx.zhimg.com/v2-cef68c393418eae783909c3a9e232ef1_r.jpg"/></figure><p data-pid="2qJgHoz5">6、</p><p data-pid="UOAs9HYI"><b>也许你感觉自己与周遭格格不入，但正是那些你一人度过的时光，让你变得越来越有意思，等有天别人终于注意到你的时候，他们就会发现一个比他们想象中更酷的人。</b></p><p data-pid="-v8u_WlZ">——《生活大爆炸》</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="s7B0I42H">7、</p><p data-pid="t7ip3DL6">人是怎么熬过低谷的？<b>成年人，不会歇斯底里的呼喊，只能按时吃饭、睡觉，以及长时间的独处和思考。像植物一样安静、自愈，然后蜕变。</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="BbH6rcL4">8、</p><p data-pid="A6Kjs9D5"><b>无论何人无论何时，</b></p><p data-pid="h-QAAgL0"><b>人们总要在乌云周围，</b></p><p data-pid="wapDxZRJ"><b>寻索着浪漫的微光活下去。</b></p><p data-pid="kJtAZ8G4">——村上春树</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="wspAj2sy">9、</p><p data-pid="aYzWB3K6">就算无人问津也好，技不如人也好，千万别让烦躁和焦虑毁了你本就不多的热情和定力。<b>别贪心，我们不可能什么都有，我们不可能什么都没有。</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="tFNq00fp">10、</p><p data-pid="uB9pYlPK">我们还年轻，长长的人生可以受一点风浪。</p><p data-pid="383QhJV1">——三毛</p><figure data-size="normal"><img src="https://pic3.zhimg.com/v2-fe5d395b685ccb8d69e5cb404e68757e_b.jpg" data-caption="" data-size="normal" data-rawwidth="946" data-rawheight="2048" data-original-token="v2-fe5d395b685ccb8d69e5cb404e68757e" data-default-watermark-src="https://picx.zhimg.com/v2-1f8a271bd0ac5d3bba960ce2e5c84fbf_b.jpg" class="origin_image zh-lightbox-thumb" width="946" data-original="https://pic3.zhimg.com/v2-fe5d395b685ccb8d69e5cb404e68757e_r.jpg"/></figure><p data-pid="je3ltSdT">11、</p><p data-pid="iBsCYpNr"><b>在最黑暗的那段人生，是我自己把自己拉出深渊。没有那个人，我就做那个人。</b></p><p data-pid="wgFwlhv5">——中岛美嘉《书》</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="PX0RkNHh">12、</p><p data-pid="YqjAfGkU">每个人都会有一段异常艰难的时光，生活的压力，工作的失意，学业的压力，爱的惶惶不可终日，挺过来的，人生就会豁然开朗，挺不过来的，时间也会教你，怎么与它们握手言和，所以不必害怕。</p><p data-pid="8S7IeoN2">——杨绛</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="xdNuxYZc">13、</p><p data-pid="OtgMhgYO"><b>上善若水，以柔克刚。</b></p><p data-pid="6w0lXZsg"><b>真正的强大不是对抗，而是允许和接受，接纳挫折、接纳无常、接纳情绪、接纳不同，当你允许一切发生之后，就会不再那么尖锐，会渐渐变得柔和。境随心变，当我们的心态变强了，困难也就变弱了。</b></p><p data-pid="zLqhpL0K"><b>木过硬易断，人过刚易伤。老子曾说“以天下之至柔，驰骋天下之至坚。”以柔克刚，是行事的哲学；能屈能伸，是做人的修行。</b></p><p data-pid="ULpw_lMl">正如柔弱的水却有着克刚之力。石之硬，水之柔，微微柔水能击穿硬石。虽丝丝缕缕，但有着巨大的能量。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="2UiI038b">14、</p><p data-pid="KeuhbXV4"><b>获得真正自由的方法是要学会自我控制。</b>如果情绪总是处于失控状态就会被感情牵着鼻子走，丧失自由。所以那些精神自由，保持独立思考的人也正是擅长于控制自己情绪的人。</p><p data-pid="fH0oQohZ">——尼采</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="iOzBdfqq">15、</p><p data-pid="6NJKBvav"><b>你不会的东西，觉得难的东西，一定不要躲，先搞明白，后精湛，你就比别人优秀了。因为大部分人都不舍得花力气去钻研，自动淘汰，所以你执着的努力，就占了大便宜。</b></p><p data-pid="CWtGXyzi">——稻盛和夫</p><figure data-size="normal"><img src="https://pic4.zhimg.com/v2-80d9c61a6f0103c8cfe96cf0915d9071_b.jpg" data-caption="" data-size="normal" data-rawwidth="983" data-rawheight="2140" data-original-token="v2-80d9c61a6f0103c8cfe96cf0915d9071" data-default-watermark-src="https://picx.zhimg.com/v2-fb8d79d4cba6f9790d863bbef406fc7d_b.jpg" class="origin_image zh-lightbox-thumb" width="983" data-original="https://pic4.zhimg.com/v2-80d9c61a6f0103c8cfe96cf0915d9071_r.jpg"/></figure><p data-pid="1GYC5bAE">16、</p><p data-pid="f-aUobTu"><b>低级的欲望通过放纵就可得到，</b></p><p data-pid="gaemCjnH"><b>高级的欲望通过自律方能获得，</b></p><p data-pid="Q6gUrpLb"><b>顶级的欲望通过煎熬才可达成。</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="n0Urr5fS">17、</p><p data-pid="EReoNs1Y"><b>珍惜你的低谷，你会看到很多真相。时间能度的，都是愿意自渡的人。</b></p><p data-pid="2LUqz_2i">没有谁的人生一帆风顺，低谷期的苦难就是为了积蓄力量，哪怕是裂缝里透出的光，也要牢牢抓住，然后生出向阳而生的勇气。</p><p data-pid="nFj4haTM">——罗翔</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="ieIA3R5e">18、</p><p data-pid="JRnloKu_"><b>人生是不断的与理想的自己进行比较，而不是活在他人的评价之下，我们不是为了满足别人的期待而活着，而是为了自己活出自己的人生。</b>纵使被说坏话，被讨厌，也没有什么好在意的，因为对方如何看待你，那是对方的课题。</p><p data-pid="-z-AcLYe">——《被讨厌的勇气》</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="xRnSIWf0">19、</p><p data-pid="P-ESkmrl"><b>我从未见过一个早起、勤奋、谨慎、诚实的人，抱怨命运不好的。</b></p><p data-pid="xC9meo1F"><b>最完美的状态，不是从不失误，而是你从未放弃成长。</b></p><p data-pid="hSugOiqS">没有人会把你变得越来越好，时间和经历只是陪衬，支撑你变得越来越好的，是你自己坚强的意志、修养、品行、以及不断的反思和经验。</p><p data-pid="3qJZ8HCh">很喜欢的一句话：人生最好的贵人，就是努力向上的自己。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="pEvi_zRu">20、</p><blockquote data-pid="rSR8gpOi">感谢你刷到这里：<br/>生活不会辜负一个一直在努力的人你要充满斗志的去读书，去运动，去爱人，去奔赴你想要的生活。<br/>愿我们都在各自拼搏的道路上，遇见更好的自己。❤️</blockquote><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-3bb7023184e5d0d79f12994caf09cf24_b.jpg" data-caption="" data-size="normal" data-rawwidth="1000" data-rawheight="2164" data-original-token="v2-3bb7023184e5d0d79f12994caf09cf24" data-default-watermark-src="https://pic3.zhimg.com/v2-253d44d00534d771c41c2329366fcdca_b.jpg" class="origin_image zh-lightbox-thumb" width="1000" data-original="https://pic1.zhimg.com/v2-3bb7023184e5d0d79f12994caf09cf24_r.jpg"/></figure><p data-pid="Rp7uVeXX">21、</p><p data-pid="Yf15y6PN"><b>想，全是问题。</b></p><p data-pid="JasPNXze"><b>做，全是答案。</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="Ejk4KIIk">22、</p><p data-pid="m9JoFmqo">不要永远活在过去，未来可期。要及时放下执念，和过去说再见。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="rhm1H17-">23、</p><p data-pid="XkFtLVBh"><b>销声匿迹，</b></p><p data-pid="DfXJFSNs"><b>是所有告别里最勇敢的。</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="uQloorS5">24、</p><p data-pid="Rtjec1rE">杨绛老师的话我至今记忆犹新：<b>“最高贵的惩罚是沉默，最矜持的报复是无视。少在烂事上纠缠不清，少为不知道的人生气，让自己活的更贵一点，学会放下，才能砥砺前行。”</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="iRtOclQV">25、</p><p data-pid="q1RqbBjq">当你变得越来越优秀时，你开始明白，其实每个人都没有好坏之分，没有对错，只是频率不同，做出了不同的选择。有个好的心态，路就会走得更宽。</p><figure data-size="normal"><img src="https://pic3.zhimg.com/v2-2fda0de40aa9407d7e4ca712d1dff386_b.jpg" data-caption="" data-size="normal" data-rawwidth="960" data-rawheight="2080" data-original-token="v2-2fda0de40aa9407d7e4ca712d1dff386" data-default-watermark-src="https://picx.zhimg.com/v2-946834ed5b98440a28c0564d8f7bda3d_b.jpg" class="origin_image zh-lightbox-thumb" width="960" data-original="https://pic3.zhimg.com/v2-2fda0de40aa9407d7e4ca712d1dff386_r.jpg"/></figure><blockquote data-pid="EA_lNtCH">双击屏幕，加深印象</blockquote><p data-pid="wcvch2E7">26、</p><p data-pid="IkhC87pS"><b>提升自己比仰望别人更有意义。</b></p><p data-pid="whaKTVxL">当你提升了自己的技能，不自信就消失了。从来没有一蹴而就的成功，与其仰望他人的成就，不如静下心来提升自己的技能。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="O0luHpUB">27、</p><p data-pid="P7Uc6Fp9"><b>改变自己的心态，阳光就会照进来。</b></p><p data-pid="kcgXtM-P">我们无法决定生命的长度，但是可以扩展它的宽度。遇到事情采用积极的心态，会看到不一样的结果。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="osUP3k0C">28、</p><p data-pid="-OnaC_EN"><b>完成比完美更重要。</b></p><p data-pid="zGXu74K6">先动起来，再追求完美，否则会一直停留在想像或害怕失败的借口中不行动。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="bNN-Zm-m">29、</p><p data-pid="bPPI77YN"><b>减少无效社交，把时间留给自己。</b></p><p data-pid="iIxyglUl">生活是自己的，与其他人无关，不要把有限的精力浪费在无意义的人和事上。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="YHe904Ek">30、</p><p data-pid="pvPxfHAn"><b>常常熬不住的时候，也想找个靠山靠一下。可怎么找，都会发现，有的山长满荆棘。有的山全是野兽，所以你应该是自己的那座山。</b></p><figure data-size="normal"><img src="https://pic2.zhimg.com/v2-8fe4738954767e293bcb2346ebc14bb1_b.jpg" data-caption="" data-size="normal" data-rawwidth="1000" data-rawheight="2164" data-original-token="v2-8fe4738954767e293bcb2346ebc14bb1" data-default-watermark-src="https://pica.zhimg.com/v2-0c15aa729177d77105fdd550e781f684_b.jpg" class="origin_image zh-lightbox-thumb" width="1000" data-original="https://pic2.zhimg.com/v2-8fe4738954767e293bcb2346ebc14bb1_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><hr/><p data-pid="uyUtlyY5">Hi，我是@苏小卷，喜欢文字和一切美好的事物，阅读与写作的长期主义者。专注自我，在热爱和探索第二曲线的路上不断成长！</p><p data-pid="YYoamhWF">⭕️关注我，我们一起成为更好的自己。</p><blockquote data-pid="XgHvy2AI">图文源自网络，侵删</blockquote><p data-pid="BaCk_LKq">猜你喜欢↓↓↓</p><a href="https://www.zhihu.com/question/623411870/answer/3319660920" data-draft-node="block" data-draft-type="link-card" data-image="https://pic3.zhimg.com/v2-af041cdc4eb45b29fe731b1731a22be0_180x120.jpg" data-image-width="1912" data-image-height="1240" class="internal">你读过哪些直击灵魂的文字？</a><a href="https://www.zhihu.com/question/513182850/answer/3268162982" data-draft-node="block" data-draft-type="link-card" data-image="https://pic1.zhimg.com/v2-4a661f398582aea0dac0630293920fb8_ipico.jpg" data-image-width="1080" data-image-height="1080" class="internal">有没有突然暗暗悟到的一个道理？</a><a href="https://www.zhihu.com/question/371652717/answer/3291471362" data-draft-node="block" data-draft-type="link-card" data-image="https://pic4.zhimg.com/v2-b18d94a66b4ad52962bfe90ebdc504c3_ipico.jpg" data-image-width="1280" data-image-height="1280" class="internal">你见过的优秀的女生是怎样的？</a><a href="https://www.zhihu.com/question/515322899/answer/3265407022" data-draft-node="block" data-draft-type="link-card" data-image="https://pic3.zhimg.com/v2-ea7598020aaa22b0c3aa4511be66bf1e_120x160.jpg" data-image-width="1242" data-image-height="2688" class="internal">有没有人间清醒，无关爱情的文案?</a><a href="https://www.zhihu.com/question/368006463/answer/3337212346" data-draft-node="block" data-draft-type="link-card" data-image="https://pic3.zhimg.com/v2-43b1cdbfe2fd17f166e63ba24f1ea530_ipico.jpg" data-image-width="960" data-image-height="960" class="internal">可以分享一句你一直收藏的句子吗？</a><p></p>',
      relationship: {
        is_thanked: false,
        is_nothelp: false,
        voting: 0,
      },
      is_labeled: false,
      visited_count: 500763,
      thumbnails: [
        'https://picx.zhimg.com/50/v2-8a20239fe8d70fbe1cf81b80244ab37a_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-f5e337f528dad0999655100d9a7c1fa2_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-1c86ce95904d549767f143ed2d12bceb_720w.jpg?source=b6762063',
        'https://pic1.zhimg.com/50/v2-c15329ad38f0132d24aa8bcc2407e546_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-7e9eb85957daed5085f9ffecc018c0e4_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-a3c02053b4d4412d2e1fd8087bd15eb6_720w.jpg?source=b6762063',
      ],
      favorite_count: 13945,
      answer_type: 'normal',
    },
    brief: '{"source": "TS", "type": "answer", "id": 3244713665}',
    attached_info:
      'CqoFCN/Zme+g5JP4vAEQBBoJNjIwMDI4NzUxIJPVlakGKIAjMK4BQBZKMAobVFNfU09VUkNFX0JBU0lDX0lORk9fUkVDQUxMEgEwGAAgADoKeyJyYXciOiIifUooChNUU19TT1VSQ0VfRkVFRFJFX1Y3EgEwGAAgADoKeyJyYXciOiIifVoIMTExODkxNDFiIGNjZGQ1NWExZGY0ZjRkMmUzZjk3OWM3OWVhZDJiMDczcgozMjQ0NzEzNjY1igEINDc0MzYyNTaqAQlyZWNvbW1lbmTCASA3MzQyOTgzMTBmOTJjNTU1ZWNhZmRmODg1MzIzMGM5MvIBCggMEgZOb3JtYWzyASgIChIkMmJhOGMzNzQtNGVkOS00NmYxLTkxMTEtNmRlMDA0ODllZjgy8gEFCAsSATSCAgCIAuHH7crmMZICIDczNDI5ODMxMGY5MmM1NTVlY2FmZGY4ODUzMjMwYzkymgIAygIbT2xkQ29udGVudFJlZHVjZTVXZWlnaHRSdWxl2gIbVFNfU09VUkNFX0JBU0lDX0lORk9fUkVDQUxM6AIC+gILTk9STUFMX0ZMT1eKAyBhMzQ1NjA4YzEyNTY0YjZiYTYwODJmMzlmN2EzZWJkOZoDDQoCdjAQABoFb3RoZXKoA5vIHtgDAOoDEWJhc2ljX2luZm9fcmVjYWxs+gMQEgxVTktOT1dOX01PREUgAIAEAIgEAJIEBk5vcm1hbJoEATKgBACoBACwBAC6BAZtYW51YWzCBAMxNjDIBADSBA/mjqjojZDlt7Lmm7TmlrDYBADwBAD5BAAAAAA8Jqk/gQUAAAAAAAAAAIkFTAy/P79/qT+SBQnmrabkvq/ljLqaBQNkZnSiBQNkZnSyBQExuQUAAAAAAAAAANAFAOAFAOgFAPAFBJICJQoJNjIwMDI4NzUxEgozMjQ0NzEzNjY1GAQiCklNQUdFX1RFWFQ=',
    action_card: false,
  },
  {
    id: '23_1711164580.696',
    type: 'feed',
    offset: 23,
    verb: 'TOPIC_ACKNOWLEDGED_ANSWER',
    created_time: 1711164580,
    updated_time: 1711164580,
    target: {
      id: 3439411123,
      type: 'answer',
      url: 'https://api.zhihu.com/answers/3439411123',
      author: {
        id: '1b0f0ec0d910d88c0b1d9428a0615fc2',
        url: 'https://api.zhihu.com/people/1b0f0ec0d910d88c0b1d9428a0615fc2',
        user_type: 'people',
        url_token: 'guang-nian-12-71',
        name: '巴音布鲁克没有海',
        headline: '好看的皮囊没有，有趣的灵魂找不着',
        avatar_url:
          'https://picx.zhimg.com/50/v2-6e6e3a5f365af3e6892dda65c1ec315a_l.jpg?source=b6762063',
        is_org: false,
        gender: 1,
        followers_count: 89,
        is_following: false,
        is_followed: false,
      },
      created_time: 1711077703,
      updated_time: 1711080042,
      voteup_count: 404,
      thanks_count: 25,
      comment_count: 27,
      is_copyable: true,
      question: {
        id: 649355830,
        type: 'question',
        url: 'https://api.zhihu.com/questions/649355830',
        author: {
          id: 'ad7494373cfde1f628314546e6704b8b',
          url: 'https://api.zhihu.com/people/ad7494373cfde1f628314546e6704b8b',
          user_type: 'organization',
          url_token: 'sou-hu-xin-wen-59',
          name: '搜狐新闻',
          headline:
            '以独特的观点解释新闻的意义，和我们一起守护独立思考的能力。',
          avatar_url:
            'https://picx.zhimg.com/50/v2-1b61e631080d778a6bae88f13cb959ea_l.jpg?source=b6762063',
          is_org: true,
          gender: -1,
          badge: [
            {
              type: 'identity_org',
              description: '已认证账号',
            },
          ],
          followers_count: 446075,
          is_following: false,
          is_followed: false,
        },
        title:
          '邯郸遇害初中生父子最后对话曝光：向父亲要 15 元想吃炸酱面，还有哪些细节值得关注？',
        created: 1710920769,
        answer_count: 0,
        follower_count: 0,
        comment_count: 32,
        bound_topic_ids: [5582, 14408, 29769, 34095, 100947],
        is_following: false,
        excerpt: '',
        relationship: {
          is_author: false,
        },
        detail: '',
        question_type: 'normal',
      },
      thumbnail:
        'https://pic1.zhimg.com/50/v2-0dc026bddaa0b721ab56f67bf184bbcb_720w.jpg?source=b6762063',
      excerpt:
        '这是子耀的同学说的，这位同学家里不宽裕，经常不吃早饭，有一次子耀悄悄在她兜里放了5块钱，让她买包子吃，还经常给她带苹果。 子耀跟她说，自己经常被同桌欺负。问他为什么不告诉爷爷奶奶和老师，他说怕爷爷奶奶担心，而且他也不会去惹怒他们，子耀还说以后长大了，想当兵保家卫国。 小小年纪一面被人霸凌，一面还会关爱其他弱小的同学。 这就是我们的子耀，多么好的孩子啊，被三个小畜生残忍的杀害。 这是一次有预谋有计划的…',
      excerpt_new:
        '这是子耀的同学说的，这位同学家里不宽裕，经常不吃早饭，有一次子耀悄悄在她兜里放了5块钱，让她买包子吃，还经常给她带苹果。 子耀跟她说，自己经常被同桌欺负。问他为什么不告诉爷爷奶奶和老师，他说怕爷爷奶奶担心，而且他也不会去惹怒他们，子耀还说以后长大了，想当兵保家卫国。 小小年纪一面被人霸凌，一面还会关爱其他弱小的同学。 这就是我们的子耀，多么好的孩子啊，被三个小畜生残忍的杀害。 这是一次有预谋有计划的…',
      preview_type: 'default',
      preview_text: '',
      reshipment_settings: 'allowed',
      content:
        '<p data-pid="nx-OnaoW">这是子耀的同学说的，这位同学家里不宽裕，经常不吃早饭，有一次子耀悄悄在她兜里放了5块钱，让她买包子吃，还经常给她带苹果。</p><p data-pid="UsvT_QVp">子耀跟她说，自己经常被同桌欺负。问他为什么不告诉爷爷奶奶和老师，他说怕爷爷奶奶担心，而且他也不会去惹怒他们，子耀还说以后长大了，想当兵保家卫国。</p><p data-pid="zCAUmA8H">小小年纪一面被人霸凌，一面还会关爱其他弱小的同学。</p><p data-pid="HuCfXwfC">这就是我们的子耀，多么好的孩子啊，被三个小畜生残忍的杀害。</p><p data-pid="Un4BUM13">这是一次有预谋有计划的虐杀，坑也是提前挖好的，给不给钱都是一样的结果，杀了人还跟没事人一样，绝不是什么心智未开的未成年人，这三个小畜生不重判，天理难容。</p><p data-pid="syXrs2z1">希望最高检能体察到老百姓的心声，考虑到舆论的导向，严惩这三个小畜生</p><figure data-size="normal"><img src="https://picx.zhimg.com/v2-c82ad787f14566bf6be7787d06dc2501_b.jpg" data-caption="" data-size="normal" data-rawwidth="1179" data-rawheight="2316" data-original-token="v2-7bd38dc9b61ee3375f4a3e3d70628867" data-default-watermark-src="https://pic2.zhimg.com/v2-694fc0232992b056c8ff097e97f49477_b.jpg" class="origin_image zh-lightbox-thumb" width="1179" data-original="https://picx.zhimg.com/v2-c82ad787f14566bf6be7787d06dc2501_r.jpg"/></figure><p></p>',
      relationship: {
        is_thanked: false,
        is_nothelp: false,
        voting: 0,
      },
      is_labeled: false,
      visited_count: 15559,
      thumbnails: [
        'https://pic1.zhimg.com/50/v2-0dc026bddaa0b721ab56f67bf184bbcb_720w.jpg?source=b6762063',
      ],
      favorite_count: 24,
      answer_type: 'normal',
    },
    brief: '{"source": "TS", "type": "answer", "id": 3439411123}',
    attached_info:
      'CpUFCN/Zme+g5JP4vAEQBBoJNjU1NDIxMzUxIMfy868GKJQDMBtAF0owChtUU19TT1VSQ0VfRkVFRFJFX1RJTUVMSU5FU1MSATAYACAAOgp7InJhdyI6IiJ9WgkxMDY1Nzg5NjNiIGNjZGQ1NWExZGY0ZjRkMmUzZjk3OWM3OWVhZDJiMDczcgozNDM5NDExMTIzigEJNjQ5MzU1ODMwqgEJcmVjb21tZW5kwgEgMWIwZjBlYzBkOTEwZDg4YzBiMWQ5NDI4YTA2MTVmYzLyAQoIDBIGTm9ybWFs8gEoCAoSJDdiZGVjNWE3LTUzMDAtNGFiNC1hMjQ1LTFlOGU4MzI0YzdiNvIBBQgLEgE0ggIAiALhx+3K5jGSAiAxYjBmMGVjMGQ5MTBkODhjMGIxZDk0MjhhMDYxNWZjMpoCAMoCG09sZENvbnRlbnRSZWR1Y2U1V2VpZ2h0UnVsZcoCElRoZW1lSXNvbGF0aW9uUnVsZdoCG1RTX1NPVVJDRV9GRUVEUkVfVElNRUxJTkVTU+gCAvoCC05PUk1BTF9GTE9XigMgYTM0NTYwOGMxMjU2NGI2YmE2MDgyZjM5ZjdhM2ViZDmaAw0KAnYwEAAaBW90aGVyqAPHedgDAOoDEWZlZWRyZV90aW1lbGluZXNz+gMQEgxVTktOT1dOX01PREUgAIAEAIgEAJIEBk5vcm1hbJoEATKgBACoBACwBAC6BAZtYW51YWzCBAMxNzDIBADSBA/mjqjojZDlt7Lmm7TmlrDYBADwBAD5BAAAAMAgxLk/gQUAAAAAAAAAAIkFTAy/P79/qT+SBQnmrabkvq/ljLqaBQNkZnSiBQNkZnSyBQExuQUAAAAAAAAAANAFAOAFAOgFAPAFBJICJQoJNjU1NDIxMzUxEgozNDM5NDExMTIzGAQiCklNQUdFX1RFWFQ=',
    action_card: false,
  },
  {
    id: '24_1711164581.170',
    type: 'feed',
    offset: 24,
    verb: 'TOPIC_ACKNOWLEDGED_ARTICLE',
    created_time: 1711164581,
    updated_time: 1711164581,
    target: {
      id: 688313503,
      type: 'article',
      url: 'https://api.zhihu.com/articles/688313503',
      author: {
        id: 'b659e88f991d3de13d5109ade130bdcf',
        url: 'https://api.zhihu.com/people/b659e88f991d3de13d5109ade130bdcf',
        user_type: 'people',
        url_token: '34-7-91-75-27',
        name: '极客前端探索者',
        headline: '前沿技术的探索者，编码艺术的实践者',
        avatar_url:
          'https://picx.zhimg.com/50/v2-1cbdcdaf7773194410b05dbfa8c0d007_l.jpg?source=b6762063',
        is_org: false,
        gender: 1,
        followers_count: 19,
        is_following: false,
        is_followed: false,
      },
      title: '干货满满！如何做好前端日志和异常监控',
      comment_permission: 'all',
      created: 1711015554,
      updated: 1711015554,
      voteup_count: 1,
      voting: 0,
      comment_count: 0,
      linkbox: {
        category: '',
        pic: '',
        title: '',
        url: '',
      },
      excerpt:
        '在研发过程中，日志是非常重要的一环，它可以帮助我们快速定位问题，解决问题。在前端开发中，日志也是非常重要的一环，它可以帮助我们快速定位问题，解决问题。本文将介绍前端日志的规范和最佳实践。但是我们经常看到一些项目日志打得满天飞，但是到了真正定位问题的时候，发现日志并没有什么卵用。这是因为日志打得不规范，不规范的日志是没有意义的。所以我们需要规范日志的打印，才能让日志发挥最大的作用。 那么，我们首先…',
      excerpt_new:
        '在研发过程中，日志是非常重要的一环，它可以帮助我们快速定位问题，解决问题。在前端开发中，日志也是非常重要的一环，它可以帮助我们快速定位问题，解决问题。本文将介绍前端日志的规范和最佳实践。但是我们经常看到一些项目日志打得满天飞，但是到了真正定位问题的时候，发现日志并没有什么卵用。这是因为日志打得不规范，不规范的日志是没有意义的。所以我们需要规范日志的打印，才能让日志发挥最大的作用。 那么，我们首先…',
      preview_type: 'default',
      preview_text: '',
      content:
        '<p data-pid="6GlyoDUg">在研发过程中，日志是非常重要的一环，它可以帮助我们快速定位问题，解决问题。在前端开发中，日志也是非常重要的一环，它可以帮助我们快速定位问题，解决问题。本文将介绍前端日志的规范和最佳实践。但是我们经常看到一些项目日志打得满天飞，但是到了真正定位问题的时候，发现日志并没有什么卵用。这是因为日志打得不规范，不规范的日志是没有意义的。所以我们需要规范日志的打印，才能让日志发挥最大的作用。</p><p data-pid="w6b269y0">那么，我们首先就要思考一下，打印什么样的日志才是有助于定位前端问题的，我想，可以从我们真是定位用户反馈问题的场景来思考。</p><p data-pid="XYkdgBdC">通常，前端用户反馈的问题大概有以下几种：</p><ol><li data-pid="dVGNgt1J">页面加载慢</li><li data-pid="9LEwKkgi">页面渲染错乱</li><li data-pid="UkmsJz4G">页面白屏等交互异常</li><li data-pid="s25DrzUP">页面崩溃</li><li data-pid="OYegA7F-">页面卡顿</li></ol><p data-pid="66tv6xm_">下面，我们可以基于这些场景，来思考一下，我们应该打印什么样的日志，才能帮助我们快速定位问题。</p><h2><b>业务异常日志</b></h2><h3><b>页面加载慢</b></h3><p data-pid="3LVV7NL6">对于页面加载慢，这个问题，我们可以通过<code>performance</code>对象来获取页面加载的性能数据，然后打印出来，比如：</p><div class="highlight"><pre><code class="language-js"><span class="nx">javascript复制代码window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;load&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>\n    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>\n        <span class="kd">var</span> <span class="nx">timing</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">performance</span><span class="p">.</span><span class="nx">timing</span><span class="p">;</span>\n        <span class="kd">var</span> <span class="nx">loadTime</span> <span class="o">=</span> <span class="nx">timing</span><span class="p">.</span><span class="nx">loadEventEnd</span> <span class="o">-</span> <span class="nx">timing</span><span class="p">.</span><span class="nx">navigationStart</span><span class="p">;</span>\n        <span class="kd">var</span> <span class="nx">pageUrl</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">;</span>\n        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Page load time for &#39;</span> <span class="o">+</span> <span class="nx">pageUrl</span> <span class="o">+</span> <span class="s1">&#39; is &#39;</span> <span class="o">+</span> <span class="nx">loadTime</span> <span class="o">+</span> <span class="s1">&#39; milliseconds.&#39;</span><span class="p">);</span>\n    <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>\n<span class="p">});</span>\n</code></pre></div><p data-pid="uAnWp3ab">这样，我们就可以在页面加载完成之后，打印出页面加载时间，这样我们就可以通过日志来定位页面加载慢的问题。</p><p data-pid="XivLoIQ8">通常，<b>日志里面可以穿插一些告警</b>，比如，我们这里可以加上一个判断，如果页面加载时间超过了3秒，我们就打印一个告警，比如：</p><div class="highlight"><pre><code class="language-js"><span class="nx">javascript复制代码window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;load&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>\n    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>\n        <span class="kd">var</span> <span class="nx">timing</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">performance</span><span class="p">.</span><span class="nx">timing</span><span class="p">;</span>\n        <span class="kd">var</span> <span class="nx">loadTime</span> <span class="o">=</span> <span class="nx">timing</span><span class="p">.</span><span class="nx">loadEventEnd</span> <span class="o">-</span> <span class="nx">timing</span><span class="p">.</span><span class="nx">navigationStart</span><span class="p">;</span>\n        <span class="kd">var</span> <span class="nx">pageUrl</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">;</span>\n        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Page load time for &#39;</span> <span class="o">+</span> <span class="nx">pageUrl</span> <span class="o">+</span> <span class="s1">&#39; is &#39;</span> <span class="o">+</span> <span class="nx">loadTime</span> <span class="o">+</span> <span class="s1">&#39; milliseconds.&#39;</span><span class="p">);</span>\n        <span class="k">if</span> <span class="p">(</span><span class="nx">loadTime</span> <span class="o">&gt;</span> <span class="mi">3000</span><span class="p">)</span> <span class="p">{</span>\n            <span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s1">&#39;Page load time for &#39;</span> <span class="o">+</span> <span class="nx">pageUrl</span> <span class="o">+</span> <span class="s1">&#39; is &#39;</span> <span class="o">+</span> <span class="nx">loadTime</span> <span class="o">+</span> <span class="s1">&#39; milliseconds, it is too slow.&#39;</span><span class="p">);</span>\n            <span class="c1">//todo 上报到监控系统\n</span><span class="c1"></span>            <span class="nx">reportToMonitor</span><span class="p">(</span><span class="s1">&#39;Page load time for &#39;</span> <span class="o">+</span> <span class="nx">pageUrl</span> <span class="o">+</span> <span class="s1">&#39; is &#39;</span> <span class="o">+</span> <span class="nx">loadTime</span> <span class="o">+</span> <span class="s1">&#39; milliseconds, it is too slow.&#39;</span><span class="p">);</span>\n        <span class="p">}</span>\n    <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>\n<span class="p">});</span>\n</code></pre></div><h3><b>页面渲染错乱</b></h3><p data-pid="RICHYWDk">对于页面渲染错乱,造成这个问题的原因有很多，比如网络问题、代码问题、浏览器兼容问题等等，这个问题比较复杂，我们可以通过一些手段来定位这个问题，比如：</p><p data-pid="Q0d5Rplf">这个问题，我们可以通过<code>window.onerror</code>来做，从里面区出渲染错误的问题，比如：</p><div class="highlight"><pre><code class="language-js"><span class="nx">javascript复制代码window</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">message</span><span class="p">,</span> <span class="nx">source</span><span class="p">,</span> <span class="nx">lineno</span><span class="p">,</span> <span class="nx">colno</span><span class="p">,</span> <span class="nx">error</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;Error: &#39;</span> <span class="o">+</span> <span class="nx">message</span> <span class="o">+</span> <span class="s1">&#39; Script: &#39;</span> <span class="o">+</span> <span class="nx">source</span> <span class="o">+</span> <span class="s1">&#39; Line: &#39;</span> <span class="o">+</span> <span class="nx">lineno</span> <span class="o">+</span> <span class="s1">&#39; Column: &#39;</span> <span class="o">+</span> <span class="nx">colno</span> <span class="o">+</span> <span class="s1">&#39; StackTrace: &#39;</span> <span class="o">+</span> <span class="nx">error</span><span class="p">.</span><span class="nx">stack</span><span class="p">);</span>\n<span class="err">​</span>\n    <span class="c1">//分析渲染错误\n</span><span class="c1"></span>    <span class="nx">parseAndLogRenderError</span><span class="p">(</span><span class="nx">message</span><span class="p">,</span> <span class="nx">source</span><span class="p">,</span> <span class="nx">lineno</span><span class="p">,</span> <span class="nx">colno</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>\n<span class="p">};</span>\n<span class="err">​</span>\n<span class="c1">// 举例：分析渲染错误\n</span><span class="c1"></span><span class="kd">function</span> <span class="nx">parseAndLogRenderError</span><span class="p">(</span><span class="nx">message</span><span class="p">,</span> <span class="nx">source</span><span class="p">,</span> <span class="nx">lineno</span><span class="p">,</span> <span class="nx">colno</span><span class="p">,</span> <span class="nx">error</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">if</span> <span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;render error&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;Render error: &#39;</span> <span class="o">+</span> <span class="nx">message</span> <span class="o">+</span> <span class="s1">&#39; Script: &#39;</span> <span class="o">+</span> <span class="nx">source</span> <span class="o">+</span> <span class="s1">&#39; Line: &#39;</span> <span class="o">+</span> <span class="nx">lineno</span> <span class="o">+</span> <span class="s1">&#39; Column: &#39;</span> <span class="o">+</span> <span class="nx">colno</span> <span class="o">+</span> <span class="s1">&#39; StackTrace: &#39;</span> <span class="o">+</span> <span class="nx">error</span><span class="p">.</span><span class="nx">stack</span><span class="p">);</span>\n        <span class="c1">//todo 上报到监控系统\n</span><span class="c1"></span>        <span class="nx">reportToMonitor</span><span class="p">(</span><span class="s1">&#39;Render error: &#39;</span> <span class="o">+</span> <span class="nx">message</span> <span class="o">+</span> <span class="s1">&#39; Script: &#39;</span> <span class="o">+</span> <span class="nx">source</span> <span class="o">+</span> <span class="s1">&#39; Line: &#39;</span> <span class="o">+</span> <span class="nx">lineno</span> <span class="o">+</span> <span class="s1">&#39; Column: &#39;</span> <span class="o">+</span> <span class="nx">colno</span> <span class="o">+</span> <span class="s1">&#39; StackTrace: &#39;</span> <span class="o">+</span> <span class="nx">error</span><span class="p">.</span><span class="nx">stack</span><span class="p">);</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="avAIsvfD">当然，window.onerror 只能捕获到一部分错误，我们还需要结合 window.addEventListener(&#39;error&#39;, function(event) {}) 来捕获一些资源加载错误，比如：</p><div class="highlight"><pre><code class="language-js"><span class="nx">javascript复制代码window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;Error: &#39;</span> <span class="o">+</span> <span class="nx">event</span><span class="p">.</span><span class="nx">message</span> <span class="o">+</span> <span class="s1">&#39; Script: &#39;</span> <span class="o">+</span> <span class="nx">event</span><span class="p">.</span><span class="nx">filename</span> <span class="o">+</span> <span class="s1">&#39; Line: &#39;</span> <span class="o">+</span> <span class="nx">event</span><span class="p">.</span><span class="nx">lineno</span> <span class="o">+</span> <span class="s1">&#39; Column: &#39;</span> <span class="o">+</span> <span class="nx">event</span><span class="p">.</span><span class="nx">colno</span> <span class="o">+</span> <span class="s1">&#39; StackTrace: &#39;</span> <span class="o">+</span> <span class="nx">event</span> <span class="nx">error</span><span class="p">.</span><span class="nx">stack</span><span class="p">);</span>\n<span class="err">​</span>\n    <span class="nx">parseAndLogRenderError</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">message</span><span class="p">,</span> <span class="nx">event</span><span class="p">.</span><span class="nx">filename</span><span class="p">,</span> <span class="nx">event</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span> <span class="nx">event</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span> <span class="nx">event</span><span class="p">.</span><span class="nx">error</span><span class="p">);</span>\n<span class="p">});</span>\n</code></pre></div><h3><b>页面交互异常</b></h3><p data-pid="t4r_smCo">这里的页面交互异常，通常是指用户在页面上进行一些操作的时候，出现了一些异常，比如点击按钮无反应、输入框无法输入等等，这个问题，我们可以通过一些手段来定位。</p><p data-pid="Y1ydhFuX">先说一说点击按钮无反应的问题。</p><p data-pid="KrpObAsq">假如说，我们有一个这样的场景，用户点击一个按钮，理论上点击按钮会发送一个请求，成功失败可能都会有一个界面上的反馈，但是如何点击之后，界面没有任何的反馈，这个时候就，我们基本上可以判定，这种时候就是页面交互异常了。那么，我们该如何捕捉这种异常呢？</p><p data-pid="Idp-nYrR">我们可以通过<code>window.addEventListener(&#39;click&#39;, function(event) {})</code>来捕捉用户的点击事件，然后在里面做一些判断，比如：</p><div class="highlight"><pre><code class="language-js"><span class="nx">javascript复制代码</span>\n<span class="c1">// 设置一个标志位，当按钮被点击时，将标志位设置为 true。\n</span><span class="c1"></span><span class="kd">var</span> <span class="nx">isButtonClicked</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>\n<span class="err">​</span>\n<span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>\n    <span class="kd">var</span> <span class="nx">target</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span>\n    <span class="k">if</span> <span class="p">(</span><span class="nx">target</span><span class="p">.</span><span class="nx">tagName</span> <span class="o">===</span> <span class="s1">&#39;BUTTON&#39;</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;User clicked button: &#39;</span> <span class="o">+</span> <span class="nx">target</span><span class="p">.</span><span class="nx">innerText</span><span class="p">);</span>\n        <span class="c1">// 设置标志位\n</span><span class="c1"></span>        <span class="nx">isButtonClicked</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>\n    <span class="p">}</span>\n<span class="p">});</span>\n<span class="err">​</span>\n<span class="c1">// 创建一个 observer 实例\n</span><span class="c1"></span><span class="kd">var</span> <span class="nx">observer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MutationObserver</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">mutations</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">mutations</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">mutation</span><span class="p">)</span> <span class="p">{</span>\n        <span class="c1">// 如果页面有变化并且按钮被点击过，重置标志位\n</span><span class="c1"></span>        <span class="c1">// 这里的mutations 可能需要根据实际情况来判断，具体要结合自己业务逻辑来判断\n</span><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="nx">mutation</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;childList&#39;</span> <span class="o">||</span> <span class="nx">mutation</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;attributes&#39;</span><span class="p">)</span> <span class="p">{</span>\n            <span class="k">if</span> <span class="p">(</span><span class="nx">isButtonClicked</span><span class="p">)</span> <span class="p">{</span>\n                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Page change detected after button click.&#39;</span><span class="p">);</span>\n                <span class="nx">isButtonClicked</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>\n            <span class="p">}</span>\n        <span class="p">}</span>\n    <span class="p">});</span>\n<span class="p">});</span>\n<span class="err">​</span>\n<span class="c1">// 配置观察选项:\n</span><span class="c1"></span><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">attributes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">childList</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">characterData</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">subtree</span><span class="o">:</span> <span class="kc">true</span> <span class="p">};</span>\n<span class="err">​</span>\n<span class="c1">// 传入目标节点和观察选项\n</span><span class="c1"></span><span class="nx">observer</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span> <span class="nx">config</span><span class="p">);</span>\n<span class="err">​</span>\n<span class="c1">// 启动定时器\n</span><span class="c1"></span><span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>\n    <span class="k">if</span> <span class="p">(</span><span class="nx">isButtonClicked</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Button click exception detected.&#39;</span><span class="p">);</span>\n        <span class="c1">// 上报到监控系统\n</span><span class="c1"></span>        <span class="nx">reportToMonitor</span><span class="p">(</span><span class="s1">&#39;Button click exception detected&#39;</span><span class="p">);</span>\n        <span class="c1">// 重置标志位\n</span><span class="c1"></span>        <span class="nx">isButtonClicked</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>\n    <span class="p">}</span>\n<span class="p">},</span> <span class="mi">5000</span><span class="p">);</span>  <span class="c1">// 5秒后检查标志位\n</span></code></pre></div><h3><b>页面白屏的问题</b></h3><p data-pid="lsUU-HkQ">页面白屏的问题，通常是指用户打开页面之后，页面长时间没有任何的反应，这个问题，我们可以通过一些手段来定位。</p><p data-pid="Oh_Vn2yr">我们可以通过<code>window.addEventListener(&#39;DOMContentLoaded&#39;, function() {})</code>来捕捉页面的加载事件，然后在里面做一些判断，比如：</p><div class="highlight"><pre><code class="language-js"><span class="nx">javascript复制代码window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;DOMContentLoaded&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>\n    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>\n        <span class="k">if</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">===</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>\n            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;Page is blank.&#39;</span><span class="p">);</span>\n            <span class="c1">// 上报到监控系统\n</span><span class="c1"></span>            <span class="nx">reportToMonitor</span><span class="p">(</span><span class="s1">&#39;Page is blank.&#39;</span><span class="p">);</span>\n        <span class="p">}</span>\n    <span class="p">},</span> <span class="mi">3000</span><span class="p">);</span>  <span class="c1">// 3秒后检查页面是否为空\n</span><span class="c1"></span><span class="p">});</span>\n</code></pre></div><p data-pid="RHx6p_rj">或者，我们可以通过<code>window.addEventListener(&#39;load&#39;, function() {})</code>来捕捉页面的加载事件，然后在里面做一些判断，比如：通过oberver监听页面变化，如果页面变化了，就说明页面没有白屏.</p><div class="highlight"><pre><code class="language-js"><span class="nx">javascript复制代码window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;load&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>\n    <span class="kd">var</span> <span class="nx">observer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MutationObserver</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">mutations</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">mutations</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">mutation</span><span class="p">)</span> <span class="p">{</span>\n            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Page change detected.&#39;</span><span class="p">);</span>\n            <span class="c1">// 上报到监控系统\n</span><span class="c1"></span>            <span class="nx">reportToMonitor</span><span class="p">(</span><span class="s1">&#39;Page change detected.&#39;</span><span class="p">);</span>\n        <span class="p">});</span>\n    <span class="p">});</span>\n<span class="err">​</span>\n    <span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">attributes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">childList</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">characterData</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">subtree</span><span class="o">:</span> <span class="kc">true</span> <span class="p">};</span>\n    <span class="nx">observer</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span> <span class="nx">config</span><span class="p">);</span>\n<span class="p">});</span>\n</code></pre></div><h3><b>页面卡顿</b></h3><p data-pid="QIhyl6vt">页面卡顿的问题，通常是指用户在页面上进行一些操作的时候，页面出现了卡顿的现象，我们先来分析一下，页面卡顿的原因。</p><p data-pid="Ts73HPMi">页面卡顿的原因，通常有以下几种：</p><ol><li data-pid="waF0qWqH">页面渲染性能问题</li><li data-pid="O4pupsEL">页面交互性能问题</li><li data-pid="PmPKbMdi">页面资源加载性能问题</li><li data-pid="_fYi7fhG">页面网络性能问题 等等，不排除可能还有其他的原因，但是这里我们只列举了一些常见的原因。</li><li data-pid="-IGAfXo1">内存泄漏，这通常是元凶</li></ol><p data-pid="oevADByW">那么，我们该如何捕捉页面卡顿的问题呢？</p><p data-pid="Cyv7tRVl">我们可以通过<code>window.requestAnimationFrame</code>来捕捉页面的渲染性能问题，比如：</p><div class="highlight"><pre><code class="language-js"><span class="nx">javascript复制代码</span>\n<span class="kd">var</span> <span class="nx">lastTime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>\n<span class="kd">var</span> <span class="nx">vendors</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;webkit&#39;</span><span class="p">,</span> <span class="s1">&#39;moz&#39;</span><span class="p">];</span>\n<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">x</span> <span class="o">&lt;</span> <span class="nx">vendors</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nb">window</span><span class="p">.</span><span class="nx">requestAnimationFrame</span><span class="p">;</span> <span class="o">++</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nb">window</span><span class="p">.</span><span class="nx">requestAnimationFrame</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="nx">vendors</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">+</span><span class="s1">&#39;RequestAnimationFrame&#39;</span><span class="p">];</span>\n    <span class="nb">window</span><span class="p">.</span><span class="nx">cancelAnimationFrame</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="nx">vendors</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">+</span><span class="s1">&#39;CancelAnimationFrame&#39;</span><span class="p">]</span> <span class="o">||</span> <span class="nb">window</span><span class="p">[</span><span class="nx">vendors</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">+</span><span class="s1">&#39;CancelRequestAnimationFrame&#39;</span><span class="p">];</span>\n<span class="p">}</span>\n<span class="err">​</span>\n<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">window</span><span class="p">.</span><span class="nx">requestAnimationFrame</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nb">window</span><span class="p">.</span><span class="nx">requestAnimationFrame</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="p">{</span>\n        <span class="kd">var</span> <span class="nx">currTime</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">();</span>\n        <span class="kd">var</span> <span class="nx">timeToCall</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">16.7</span> <span class="o">-</span> <span class="p">(</span><span class="nx">currTime</span> <span class="o">-</span> <span class="nx">lastTime</span><span class="p">));</span>\n        <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">currTime</span> <span class="o">+</span> <span class="nx">timeToCall</span><span class="p">);</span> <span class="p">},</span> <span class="nx">timeToCall</span><span class="p">);</span>\n        <span class="nx">lastTime</span> <span class="o">=</span> <span class="nx">currTime</span> <span class="o">+</span> <span class="nx">timeToCall</span><span class="p">;</span>\n        <span class="k">return</span> <span class="nx">id</span><span class="p">;</span>\n    <span class="p">};</span>\n<span class="p">}</span>\n<span class="err">​</span>\n<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">window</span><span class="p">.</span><span class="nx">cancelAnimationFrame</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nb">window</span><span class="p">.</span><span class="nx">cancelAnimationFrame</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>\n    <span class="p">};</span>\n<span class="p">}</span>\n<span class="err">​</span>\n<span class="kd">var</span> <span class="nx">lastFrameTime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>\n<span class="kd">var</span> <span class="nx">frameCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>\n<span class="kd">var</span> <span class="nx">frameRate</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>\n<span class="kd">var</span> <span class="nx">frameRateThreshold</span> <span class="o">=</span> <span class="mi">60</span><span class="p">;</span>\n<span class="err">​</span>\n<span class="kd">function</span> <span class="nx">onAnimationFrame</span><span class="p">()</span> <span class="p">{</span>\n    <span class="kd">var</span> <span class="nx">now</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">();</span>\n    <span class="kd">var</span> <span class="nx">elapsed</span> <span class="o">=</span> <span class="nx">now</span> <span class="o">-</span> <span class="nx">lastFrameTime</span><span class="p">;</span>\n    <span class="nx">lastFrameTime</span> <span class="o">=</span> <span class="nx">now</span><span class="p">;</span>\n    <span class="nx">frameCount</span><span class="o">++</span><span class="p">;</span>\n    <span class="k">if</span> <span class="p">(</span><span class="nx">elapsed</span> <span class="o">&gt;</span> <span class="mi">1000</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">frameRate</span> <span class="o">=</span> <span class="nx">frameCount</span><span class="p">;</span>\n        <span class="nx">frameCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>\n        <span class="k">if</span> <span class="p">(</span><span class="nx">frameRate</span> <span class="o">&lt;</span> <span class="nx">frameRateThreshold</span><span class="p">)</span> <span class="p">{</span>\n            <span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s1">&#39;Frame rate is &#39;</span> <span class="o">+</span> <span class="nx">frameRate</span> <span class="o">+</span> <span class="s1">&#39;fps, it is too low.&#39;</span><span class="p">);</span>\n            <span class="c1">// 上报到监控系统\n</span><span class="c1"></span>            <span class="nx">reportToMonitor</span><span class="p">(</span><span class="s1">&#39;Frame rate is &#39;</span> <span class="o">+</span> <span class="nx">frameRate</span> <span class="o">+</span> <span class="s1">&#39;fps, it is too low.&#39;</span><span class="p">);</span>\n        <span class="p">}</span>\n    <span class="p">}</span>\n    <span class="nb">window</span><span class="p">.</span><span class="nx">requestAnimationFrame</span><span class="p">(</span><span class="nx">onAnimationFrame</span><span class="p">);</span>\n<span class="p">}</span>\n<span class="err">​</span>\n<span class="nb">window</span><span class="p">.</span><span class="nx">requestAnimationFrame</span><span class="p">(</span><span class="nx">onAnimationFrame</span><span class="p">);</span>\n</code></pre></div><p data-pid="VMWjr-4-">这样，我们就可以通过<code>window.requestAnimationFrame</code>来捕捉页面的渲染性能问题。</p><p data-pid="j9oIUNOc">对于内存泄漏，我们可以监听页面卸载事件，然后检查所有的事件处理器和定时器是否都已经被清除，比如：</p><div class="highlight"><pre><code class="language-js"><span class="nx">javascript复制代码</span>\n<span class="c1">// 存储所有的事件处理器和定时器\n</span><span class="c1"></span><span class="kd">var</span> <span class="nx">eventHandlers</span> <span class="o">=</span> <span class="p">[];</span>\n<span class="kd">var</span> <span class="nx">timers</span> <span class="o">=</span> <span class="p">[];</span>\n<span class="err">​</span>\n<span class="c1">// 覆盖 addEventListener 和 removeEventListener 方法\n</span><span class="c1"></span><span class="kd">var</span> <span class="nx">originalAddEventListener</span> <span class="o">=</span> <span class="nx">EventTarget</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">;</span>\n<span class="nx">EventTarget</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addEventListener</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">eventHandler</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">eventHandlers</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">target</span><span class="o">:</span> <span class="k">this</span><span class="p">,</span> <span class="nx">eventName</span><span class="o">:</span> <span class="nx">eventName</span><span class="p">,</span> <span class="nx">eventHandler</span><span class="o">:</span> <span class="nx">eventHandler</span><span class="p">});</span>\n    <span class="nx">originalAddEventListener</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">eventName</span><span class="p">,</span> <span class="nx">eventHandler</span><span class="p">);</span>\n<span class="p">};</span>\n<span class="kd">var</span> <span class="nx">originalRemoveEventListener</span> <span class="o">=</span> <span class="nx">EventTarget</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">;</span>\n<span class="nx">EventTarget</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">removeEventListener</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">eventHandler</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">eventHandlers</span> <span class="o">=</span> <span class="nx">eventHandlers</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">handler</span><span class="p">)</span> <span class="p">{</span>\n        <span class="k">return</span> <span class="nx">handler</span><span class="p">.</span><span class="nx">target</span> <span class="o">!==</span> <span class="k">this</span> <span class="o">||</span> <span class="nx">handler</span><span class="p">.</span><span class="nx">eventName</span> <span class="o">!==</span> <span class="nx">eventName</span> <span class="o">||</span> <span class="nx">handler</span><span class="p">.</span><span class="nx">eventHandler</span> <span class="o">!==</span> <span class="nx">eventHandler</span><span class="p">;</span>\n    <span class="p">});</span>\n    <span class="nx">originalRemoveEventListener</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">eventName</span><span class="p">,</span> <span class="nx">eventHandler</span><span class="p">);</span>\n<span class="p">};</span>\n<span class="err">​</span>\n<span class="c1">// 覆盖 setTimeout 和 clearTimeout 方法\n</span><span class="c1"></span><span class="kd">var</span> <span class="nx">originalSetTimeout</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">;</span>\n<span class="nb">window</span><span class="p">.</span><span class="nx">setTimeout</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">,</span> <span class="nx">delay</span><span class="p">)</span> <span class="p">{</span>\n    <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">originalSetTimeout</span><span class="p">(</span><span class="nx">callback</span><span class="p">,</span> <span class="nx">delay</span><span class="p">);</span>\n    <span class="nx">timers</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>\n    <span class="k">return</span> <span class="nx">id</span><span class="p">;</span>\n<span class="p">};</span>\n<span class="kd">var</span> <span class="nx">originalClearTimeout</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">clearTimeout</span><span class="p">;</span>\n<span class="nb">window</span><span class="p">.</span><span class="nx">clearTimeout</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">timers</span> <span class="o">=</span> <span class="nx">timers</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">timer</span><span class="p">)</span> <span class="p">{</span>\n        <span class="k">return</span> <span class="nx">timer</span> <span class="o">!==</span> <span class="nx">id</span><span class="p">;</span>\n    <span class="p">});</span>\n    <span class="nx">originalClearTimeout</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>\n<span class="p">};</span>\n<span class="err">​</span>\n<span class="c1">// 在页面卸载时检查所有的事件处理器和定时器是否都已经被清除\n</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;unload&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>\n    <span class="k">if</span> <span class="p">(</span><span class="nx">eventHandlers</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;Memory leak detected: Not all event handlers were removed.&#39;</span><span class="p">);</span>\n        <span class="c1">// 上报到监控系统\n</span><span class="c1"></span>        <span class="nx">reportToMonitor</span><span class="p">(</span><span class="s1">&#39;Memory leak detected: Not all event handlers were removed.&#39;</span><span class="p">);</span>\n    <span class="p">}</span>\n    <span class="k">if</span> <span class="p">(</span><span class="nx">timers</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;Memory leak detected: Not all timers were cleared.&#39;</span><span class="p">);</span>\n        <span class="c1">// 上报到监控系统\n</span><span class="c1"></span>        <span class="nx">reportToMonitor</span><span class="p">(</span><span class="s1">&#39;Memory leak detected: Not all timers were cleared.&#39;</span><span class="p">);</span>\n    <span class="p">}</span>\n<span class="p">});</span>\n</code></pre></div><h3><b>用户行为日志</b></h3><p data-pid="HR5Ji0Ag">用户行为日志是指用户在页面上的一些操作，比如点击按钮、输入框输入等等，这些操作都是用户行为日志，这些日志是非常重要的，它可以帮助我们快速定位问题。比如，用户反馈说，我点击了一个按钮，但是没有反应，这个时候，我们就可以通过用户行为日志来定位问题。但是通常用户将的可能是问题出现的时间点，而不是问题出现的原因，所以我们需要在用户行为日志中加入一些额外的信息。用户经历过哪些路由页面，做过哪些交互，各交互步骤的数据是否正常，这些都是我们需要记录的。</p><p data-pid="kGNxoSMg">对于页面的路由，我们可以通过<code>window.addEventListener(&#39;hashchange&#39;, function() {})</code>来捕捉页面的路由变化，然后在里面打印一些日志，比如：</p><div class="highlight"><pre><code class="language-js"><span class="nx">javascript复制代码window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;hashchange&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>\n    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;User navigated to &#39;</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">);</span>\n<span class="p">});</span>\n</code></pre></div><p data-pid="40muAjMI">对于用户的点击事件，我们可以通过<code>window.addEventListener(&#39;click&#39;, function(event) {})</code>来捕捉用户的点击事件，然后在里面打印一些日志，比如：</p><div class="highlight"><pre><code class="language-js"><span class="nx">javascript复制代码window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>\n    <span class="kd">var</span> <span class="nx">target</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span>\n    <span class="k">if</span> <span class="p">(</span><span class="nx">target</span><span class="p">.</span><span class="nx">tagName</span> <span class="o">===</span> <span class="s1">&#39;BUTTON&#39;</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;User clicked button: &#39;</span> <span class="o">+</span> <span class="nx">target</span><span class="p">.</span><span class="nx">innerText</span><span class="p">);</span>\n    <span class="p">}</span>\n<span class="p">});</span>\n</code></pre></div><p data-pid="MFCOHQlP">对于用户的输入事件，我们可以通过<code>window.addEventListener(&#39;input&#39;, function(event) {})</code>来捕捉用户的输入事件，然后在里面打印一些日志，比如：</p><div class="highlight"><pre><code class="language-js"><span class="nx">javascript复制代码window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>\n    <span class="kd">var</span> <span class="nx">target</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span>\n    <span class="k">if</span> <span class="p">(</span><span class="nx">target</span><span class="p">.</span><span class="nx">tagName</span> <span class="o">===</span> <span class="s1">&#39;INPUT&#39;</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;User input: &#39;</span> <span class="o">+</span> <span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>\n    <span class="p">}</span>\n<span class="p">});</span>\n</code></pre></div><p data-pid="RcKxZ5JT">对于一些用户的交互事件，我们可以通过<code>window.addEventListener(&#39;customEvent&#39;, function(event) {})</code>来捕捉用户的交互事件，然后在里面打印一些日志，比如：</p><div class="highlight"><pre><code class="language-js"><span class="nx">javascript复制代码</span><span class="c1">// 触发自定义事件\n</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">(</span><span class="k">new</span> <span class="nx">CustomEvent</span><span class="p">(</span><span class="s1">&#39;customEvent&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">detail</span><span class="o">:</span> <span class="s1">&#39;User interaction detected.&#39;</span><span class="p">}));</span>\n<span class="err">​</span>\n<span class="c1">// 监听自定义事件\n</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;customEvent&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;User custom event: &#39;</span> <span class="o">+</span> <span class="nx">event</span><span class="p">.</span><span class="nx">detail</span><span class="p">);</span>\n<span class="p">});</span>\n<span class="err">​</span>\n<span class="c1">// 触发自定义事件，我们可以做一个工具函数，比如：这阿姨给你方便在任何地方触发自定义事件\n</span><span class="c1"></span><span class="kd">function</span> <span class="nx">triggerCustomEvent</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">detail</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nb">window</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">(</span><span class="k">new</span> <span class="nx">CustomEvent</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="p">{</span><span class="nx">detail</span><span class="o">:</span> <span class="nx">detail</span><span class="p">}));</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="_j4rHIke">一些情况下，前端页面的交互是通过后端返回的数据来触发的，这个时候，数据的正确性也是非常重要的，我们可以通过<code>window.addEventListener(&#39;ajaxSuccess&#39;, function(event) {})</code>来捕捉用户的交互事件，然后在里面打印一些日志，比如：</p><div class="highlight"><pre><code class="language-js"><span class="nx">javascript复制代码</span><span class="c1">// 添加一个响应拦截器\n</span><span class="c1"></span><span class="nx">axios</span><span class="p">.</span><span class="nx">interceptors</span><span class="p">.</span><span class="nx">response</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 请求成功\n</span><span class="c1"></span>   <span class="c1">// 请求成功\n</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">code</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;Request success, but response data is not as expected.&#39;</span><span class="p">);</span>\n        <span class="nx">triggerCustomEvent</span><span class="p">(</span><span class="s1">&#39;request abnormal&#39;</span><span class="p">,</span> <span class="s1">&#39;Request success, but response data is not as expected.&#39;</span><span class="p">);</span>\n    <span class="p">}</span>\n    <span class="nx">triggerCustomEvent</span><span class="p">(</span><span class="s1">&#39;request Success&#39;</span><span class="p">,</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>\n    <span class="k">return</span> <span class="nx">response</span><span class="p">;</span>\n<span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 请求失败\n</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>\n    <span class="nx">triggerCustomEvent</span><span class="p">(</span><span class="s1">&#39;request Error&#39;</span><span class="p">,</span> <span class="s1">&#39;Ajax request error.&#39;</span><span class="p">);</span>\n    <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>\n<span class="p">});</span>\n</code></pre></div><h2><b>日志规范</b></h2><p data-pid="8qliIZ1X">我们还差一些什么，我们怎么知道打一些日志，但是怎么评估这些日志是否非常容易帮助我们定位问题呢？换句话说，当用户反馈问题的时候，我们怎么知道我们的日志是否能帮助我们快速定位问题呢？</p><p data-pid="e8neRgia">一个场景：用户A，通过反馈说，你们页面加载好慢啊。然后就没有其他信息了。这个时候，我们需要去从日志中发现一些问题。</p><p data-pid="bHDmcdTo">我们会问用户一个问题，比如用户的uid，然后我们就可以通过uid去查找用户的日志，然后我们就可以通过用户的日志来定位问题。</p><p data-pid="WsFJZBtp">那么，我们就需要在日志中加入一些用户的信息，比如用户的uid，用户的设备信息，用户的网络信息等等，这样我们就可以通过用户的日志来定位问题。因此，我们需要在日志中加入一些用户的信息，比如：</p><div class="highlight"><pre><code class="language-js"><span class="nx">javascript复制代码</span>\n<span class="c1">// 获取用户的uid\n</span><span class="c1"></span><span class="err">​</span>\n<span class="kd">var</span> <span class="nx">uid</span> <span class="o">=</span> <span class="nx">getUid</span><span class="p">();</span>\n<span class="err">​</span>\n<span class="c1">// 获取用户的设备信息\n</span><span class="c1"></span><span class="err">​</span>\n<span class="kd">var</span> <span class="nx">deviceInfo</span> <span class="o">=</span> <span class="nx">getDeviceInfo</span><span class="p">();</span>\n<span class="err">​</span>\n<span class="c1">// 获取用户的网络信息\n</span><span class="c1"></span><span class="err">​</span>\n<span class="kd">var</span> <span class="nx">networkInfo</span> <span class="o">=</span> <span class="nx">getNetworkInfo</span><span class="p">();</span>\n<span class="err">​</span>\n<span class="c1">// 打印环境信息\n</span><span class="c1"></span><span class="err">​</span>\n<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;User: &#39;</span> <span class="o">+</span> <span class="nx">uid</span> <span class="o">+</span> <span class="s1">&#39; Device: &#39;</span> <span class="o">+</span> <span class="nx">deviceInfo</span> <span class="o">+</span> <span class="s1">&#39; Network: &#39;</span> <span class="o">+</span> <span class="nx">networkInfo</span> <span class="o">+</span> <span class="s1">&#39; Page load time for &#39;</span> <span class="o">+</span> <span class="nx">pageUrl</span> <span class="o">+</span> <span class="s1">&#39; is &#39;</span> <span class="o">+</span> <span class="nx">loadTime</span> <span class="o">+</span> <span class="s1">&#39; milliseconds.&#39;</span><span class="p">);</span>\n</code></pre></div><h2><b>日志上报</b></h2><p data-pid="Mwe87qEj">有了收集的日志之后，我们上报到日志系统，那么这个日志系统应该是怎么样的呢？现在，我们可以使用 mermaid 来绘制一下整个日志系统的架构图：</p><p data-pid="wIycf_wS">上报存储分析告警前端日志日志系统日志存储日志分析日志告警</p><p data-pid="eYtFgavt">这块后端可能有一些开源的日志系统，比如 ELK、Logstash、Kibana、Prometheus、Grafana 等等，这些都是比较常见的日志系统，我们可以根据自己的需求来选择。</p><p data-pid="fa3psuUz">比如，我们可以上报到ELK，然后通过Kibana来分析日志，通过Prometheus、Grafana来做一些监控。这些的搭建和使用，这里就不展开了。这里最终是需要提供前端日志的上报接口，然后后端来接收这些日志。</p><p data-pid="oQllqmTs">然后前端的日志上报，我们可以通过一些手段来做，比如：</p><div class="highlight"><pre><code class="language-js"><span class="nx">javascript复制代码function</span> <span class="nx">reportToMonitor</span><span class="p">(</span><span class="nx">log</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 上报到监控系统\n</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">img</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Image</span><span class="p">();</span>\n    <span class="nx">img</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">&#39;http://monitor.com/report?log=&#39;</span> <span class="o">+</span> <span class="nx">log</span><span class="p">;</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="dJuUZYub">这里为什么要用<code>img</code>标签来上报日志呢？因为<code>img</code>标签是不会阻塞页面的，而且可以跨域，这样我们就可以通过<code>img</code>标签来上报日志。</p><p data-pid="eqZLR9co">另外，我们还可以通过<code>navigator.sendBeacon</code>来上报日志，这个方法是异步的，不会阻塞页面，比如：</p><div class="highlight"><pre><code class="language-js"><span class="nx">javascript复制代码function</span> <span class="nx">reportToMonitor</span><span class="p">(</span><span class="nx">log</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 上报到监控系统\n</span><span class="c1"></span>    <span class="nx">navigator</span><span class="p">.</span><span class="nx">sendBeacon</span><span class="p">(</span><span class="s1">&#39;http://monitor.com/report&#39;</span><span class="p">,</span> <span class="nx">log</span><span class="p">);</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="lwOr16Vy">然后，为了保证日志的可靠性，我们还可以通过<code>localStorage</code>来存储日志，然后在下一次用户访问的时候，再上报日志，比如：</p><div class="highlight"><pre><code class="language-js"><span class="nx">javascript复制代码function</span> <span class="nx">reportToMonitor</span><span class="p">(</span><span class="nx">log</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 上报到监控系统\n</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">sendBeacon</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">navigator</span><span class="p">.</span><span class="nx">sendBeacon</span><span class="p">(</span><span class="s1">&#39;http://monitor.com/report&#39;</span><span class="p">,</span> <span class="nx">log</span><span class="p">);</span>\n    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n        <span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="s1">&#39;log&#39;</span><span class="p">,</span> <span class="nx">log</span><span class="p">);</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="g-6IdHlm">有些人可能会说，我还需要做一些日志的压缩和加密，这个时候，我们可以通过<code>pako</code>来做日志的压缩，通过<code>CryptoJS</code>来做日志的加密，比如：</p><div class="highlight"><pre><code class="language-js"><span class="nx">javascript复制代码function</span> <span class="nx">reportToMonitor</span><span class="p">(</span><span class="nx">log</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 上报到监控系统\n</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">compressedLog</span> <span class="o">=</span> <span class="nx">pako</span><span class="p">.</span><span class="nx">deflate</span><span class="p">(</span><span class="nx">log</span><span class="p">,</span> <span class="p">{</span> <span class="nx">to</span><span class="o">:</span> <span class="s1">&#39;string&#39;</span> <span class="p">});</span>\n    <span class="kd">var</span> <span class="nx">encryptedLog</span> <span class="o">=</span> <span class="nx">CryptoJS</span><span class="p">.</span><span class="nx">AES</span><span class="p">.</span><span class="nx">encrypt</span><span class="p">(</span><span class="nx">compressedLog</span><span class="p">,</span> <span class="s1">&#39;secret key&#39;</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span>\n    <span class="kd">var</span> <span class="nx">img</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Image</span><span class="p">();</span>\n    <span class="nx">img</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">&#39;http://monitor.com/report?log=&#39;</span> <span class="o">+</span> <span class="nx">encryptedLog</span><span class="p">;</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="TnlQs0Ra">有人可能会讲，频繁的发送请求，可能会导致一些性能问题，能不能积攒一批日志，然后再发送呢？这个时候，我们可以通过<code>setTimeout</code>来做，比如：</p><div class="highlight"><pre><code class="language-js"><span class="nx">javascript复制代码var</span> <span class="nx">logs</span> <span class="o">=</span> <span class="p">[];</span> <span class="c1">// 存储日志\n</span><span class="c1"></span><span class="kd">function</span> <span class="nx">reportToMonitor</span><span class="p">(</span><span class="nx">log</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 存储日志\n</span><span class="c1"></span>    <span class="nx">logs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">log</span><span class="p">);</span>\n    <span class="c1">// 延迟发送日志\n</span><span class="c1"></span>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>\n        <span class="kd">var</span> <span class="nx">img</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Image</span><span class="p">();</span>\n        <span class="nx">img</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">&#39;http://monitor.com/report?log=&#39;</span> <span class="o">+</span> <span class="nx">logs</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">);</span>\n        <span class="nx">logs</span> <span class="o">=</span> <span class="p">[];</span>\n    <span class="p">},</span> <span class="mi">5000</span><span class="p">);</span>  <span class="c1">// 5秒后发送日志\n</span><span class="c1"></span><span class="p">}</span>\n</code></pre></div><h3><b>结构化日志</b></h3><p data-pid="7AfmkcTL">我们有了上述日志之后就，针对一个具体用户进行搜索，看到可能是这样的一些个日志：</p><ul><li data-pid="6IIpItjP">User: 123456 Device: iPhone 6s Network: 4G enter page /home  2024-02-12 12:00:00</li><li data-pid="ciA3VEIV">User: 123456 Device: iPhone 6s Network: 4G  Page load time for /home is 3000 milliseconds 2024-02-12 12:00:03</li><li data-pid="8gi1Y5Mb">User: 123456 Device: iPhone 6s Network: 4G  User clicked button: submit 2024-02-12 12:00:05</li><li data-pid="i1cLIpHR">User: 123456 Device: iPhone 6s Network: 4G  User input[id=userName] : zhangsan 2024-02-12 12:00:06</li><li data-pid="IdACkAKs">User: 123456 Device: iPhone 6s Network: 4G  User input[id=password] : 123456 2024-02-12 12:00:07</li><li data-pid="qswQ7Jj5">User: 123456 Device: iPhone 6s Network: 4G  User clicked button: login 2024-02-12 12:00:08</li><li data-pid="cjcfIEMT">User: 123456 Device: iPhone 6s Network: 4G  Request success, url: /login. 2024-02-12 12:00:12</li><li data-pid="UDmFPQAt">User: 123456 Device: iPhone 6s Network: 4G  User navigated to /dashboard 2024-02-12 12:00:13</li><li data-pid="y6Dm_Kxo">User: 123456 Device: iPhone 6s Network: 4G  Page load time for /dashboard is 3000 milliseconds 2024-02-12 12:00:16</li><li data-pid="tVAU7iSM">User: 123456 Device: iPhone 6s Network: 4G  Request Failed, url: /dashboard. {errMessage: &#39;Internal Server Error&#39;} 2024-02-12 12:00:20</li></ul><p data-pid="1IRwe8fi">这样，我们就可以通过用户的日志来定位问题。</p><h3><b>日志图形化</b></h3><p data-pid="8V1SeR5t">比如，我们可以将用户的日志，使用 mermaid 来画一下这个流程图：</p><p data-pid="uutgJctG">3000ms3000msenter page /homeUser clicked button: submitUser input username: zhangsanUser input password: 123456User clicked button: loginRequest success, url: /loginUser navigated to /dashboardRequest Failed, url: /dashboard</p><p data-pid="ItHLW1hL">篇幅有限，顺着思路，本来想在写一些监控相关的内容，但是感觉篇幅有点长了，就到这里吧。后续在继续写一些监控相关的。</p><p></p><p></p><p></p>',
      is_labeled: false,
      visited_count: 15,
      favorite_count: 6,
    },
    brief: '{"source": "TS", "type": "article", "id": 688313503}',
    attached_info:
      'CtIECMPzgYGx4uu+jgEQBxoJMjQxMDg4ODg1IIKN8K8GKAEwAEAYSiMKGFRTX1NPVVJDRV9XQVJNX1VQX0JPT1NUMRIBMBgAIAA6AEoiChdUU19TT1VSQ0VfV0FSTVVQX1JVQ0VORRIBMBgAIAA6AGIgY2NkZDU1YTFkZjRmNGQyZTNmOTc5Yzc5ZWFkMmIwNzNyCTY4ODMxMzUwM6oBCXJlY29tbWVuZMIBIGI2NTllODhmOTkxZDNkZTEzZDUxMDlhZGUxMzBiZGNm8gEKCAwSBk5vcm1hbPIBKAgKEiQyMjllNDU3ZC05ZDM4LTQ4ZjYtOGJhOC01MGNjZDIwMmM5MTXyAQUICxIBNYICAIgC/M7tyuYxkgIgYjY1OWU4OGY5OTFkM2RlMTNkNTEwOWFkZTEzMGJkY2aaAgDaAhhUU19TT1VSQ0VfV0FSTV9VUF9CT09TVDHoAgP6AgtOT1JNQUxfRkxPV4oDIGU2YTVhMjFkNWIwYTQzNDk5YjE1M2U2ZTlkMTIwM2EwmgMNCgJ2MBAAGgVvdGhlcqgDD9gDAOoDC3RleHRfcnVjZW5l+gMQEgxVTktOT1dOX01PREUgAIAEAIgEAJIEBk5vcm1hbJoEATOgBACoBACwBAC6BAJhacIEAzQwMMgEANIED+aOqOiNkOW3suabtOaWsNgEAPAEAPkEAAAA4FqYqT+BBQAAAAAAAAAAiQUW8eVyxj6tP5IFCeatpuS+r+WMupoFA2RmdKIFA2RmdLIFATG5BQAAAAAAAAAA0AUA4AUA6AUA8AUFkgIkCgkyNDEwODg4ODUSCTY4ODMxMzUwMxgHIgpJTUFHRV9URVhU',
    action_card: false,
  },
  {
    id: '25_1711164581.842',
    type: 'feed',
    offset: 25,
    verb: 'TOPIC_ACKNOWLEDGED_ANSWER',
    created_time: 1711164581,
    updated_time: 1711164581,
    target: {
      id: 2960297411,
      type: 'answer',
      url: 'https://api.zhihu.com/answers/2960297411',
      author: {
        id: '82150c2f8c522a346f505e3c84b54553',
        url: 'https://api.zhihu.com/people/82150c2f8c522a346f505e3c84b54553',
        user_type: 'people',
        url_token: 'miao-miao-yu-wei-ba',
        name: '虞小希',
        headline: '家居家电| 数码科技 | 产品测评 （合作看简介）',
        avatar_url:
          'https://pic1.zhimg.com/50/v2-5996c70460f39491889235039e477cf6_l.jpg?source=b6762063',
        is_org: false,
        gender: 0,
        followers_count: 23328,
        is_following: false,
        is_followed: false,
      },
      created_time: 1680145895,
      updated_time: 1680154872,
      voteup_count: 5098,
      thanks_count: 21798,
      comment_count: 151,
      is_copyable: false,
      question: {
        id: 515906042,
        type: 'question',
        url: 'https://api.zhihu.com/questions/515906042',
        author: {
          id: '30c7f95dd634e5576fe9ec4372919a18',
          url: 'https://api.zhihu.com/people/30c7f95dd634e5576fe9ec4372919a18',
          user_type: 'people',
          url_token: 'xiao-er-hei-56-2',
          name: '小二黑',
          headline: '无产阶级先锋队，永远缅怀教员',
          avatar_url:
            'https://pic1.zhimg.com/50/v2-8e07a676f3cc66d7d188f97bc6b16be9_l.jpg?source=b6762063',
          is_org: false,
          gender: 1,
          followers_count: 48,
          is_following: false,
          is_followed: false,
        },
        title: '人民日报这种金句摘抄在哪里找呀?',
        created: 1644541809,
        answer_count: 0,
        follower_count: 0,
        comment_count: 2,
        bound_topic_ids: [1309, 11405, 114127, 184684],
        is_following: false,
        excerpt: '',
        relationship: {
          is_author: false,
        },
        detail: '',
        question_type: 'normal',
      },
      thumbnail:
        'https://pica.zhimg.com/50/v2-f37a4f8751fc3bf19255f2f88cad8d45_720w.jpg?source=b6762063',
      excerpt:
        '1、 我将玫瑰藏于身后，风起花落，从此鲜花赠自己，纵马踏花向自由。 2、 山茶花读不懂白玫瑰，北山的风吹不到南山尾。 3、 落日沉溺于橘色的海，晚风沦陷于赤诚的爱。 4、 山海自有归期，风雨自有相逢。 5、 这辈子千万不要马虎两件事，一是找对爱人，二是找对事业。 因为太阳升起时要投身事业，太阳落山时要与爱人相拥。 6、 慢慢来，好戏都在烟火里。 7、 身处低谷，怎么走都是向上。没有谁生来自带铠甲，但你可以让自己无坚…',
      excerpt_new:
        '1、 我将玫瑰藏于身后，风起花落，从此鲜花赠自己，纵马踏花向自由。 2、 山茶花读不懂白玫瑰，北山的风吹不到南山尾。 3、 落日沉溺于橘色的海，晚风沦陷于赤诚的爱。 4、 山海自有归期，风雨自有相逢。 5、 这辈子千万不要马虎两件事，一是找对爱人，二是找对事业。 因为太阳升起时要投身事业，太阳落山时要与爱人相拥。 6、 慢慢来，好戏都在烟火里。 7、 身处低谷，怎么走都是向上。没有谁生来自带铠甲，但你可以让自己无坚…',
      preview_type: 'default',
      preview_text: '',
      reshipment_settings: 'disallowed',
      content:
        '<p data-pid="XZOFu9lD">1、</p><p data-pid="xaQYgbGa"><b>我将玫瑰藏于身后，风起花落，从此鲜花赠自己，纵马踏花向自由。</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="PniDG9pv">2、</p><p data-pid="GSerU11e">山茶花读不懂白玫瑰，北山的风吹不到南山尾。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="p7a4aMsA">3、</p><p data-pid="1-AhW9vN"><b>落日沉溺于橘色的海，晚风沦陷于赤诚的爱。</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="b0AtzM4p">4、</p><p data-pid="5ZzPYQSu">山海自有归期，风雨自有相逢。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="AOVtFMMM">5、</p><p data-pid="IS55Yv_G">这辈子千万不要马虎两件事，一是找对爱人，二是找对事业。</p><p data-pid="J0vyYdDI">因为太阳升起时要投身事业，太阳落山时要与爱人相拥。</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-44b95995399437733a6d5e0f6c6f0bbe_b.jpg" data-rawwidth="700" data-rawheight="700" data-size="normal" data-original-token="v2-44b95995399437733a6d5e0f6c6f0bbe" data-default-watermark-src="https://pica.zhimg.com/v2-539abb29ff516b151ec849d77ad09850_b.jpg" class="origin_image zh-lightbox-thumb" width="700" data-original="https://pic1.zhimg.com/v2-44b95995399437733a6d5e0f6c6f0bbe_r.jpg"/></figure><p data-pid="EdVzxhc9">6、</p><p data-pid="4OkBHgwU"><b>慢慢来，好戏都在烟火里。</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="u6hbZlng">7、</p><p data-pid="rLVCKQMN">身处低谷，怎么走都是向上。没有谁生来自带铠甲，但你可以让自己无坚不摧。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="VNuzi7qY">8、</p><p data-pid="wZW3oy9_">慢品人间烟火色，闲观万事岁月长。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="yrkeLPxt">9、</p><p data-pid="l9b4ZMmi">旦逢良辰，顺颂时宜。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="t4d-BwET">10、</p><p data-pid="4_viBtNV">​<b>少年与爱永不老去，即使披荆斩棘，丢失怒马鲜衣。</b></p><figure data-size="normal"><img src="https://pic3.zhimg.com/v2-6f7aaa4a86d1a31e6e6878be26cdc928_b.jpg" data-rawwidth="700" data-rawheight="700" data-size="normal" data-original-token="v2-6f7aaa4a86d1a31e6e6878be26cdc928" data-default-watermark-src="https://pica.zhimg.com/v2-5ee737719ce35da0c10eb03b9f798e36_b.jpg" class="origin_image zh-lightbox-thumb" width="700" data-original="https://pic3.zhimg.com/v2-6f7aaa4a86d1a31e6e6878be26cdc928_r.jpg"/></figure><p data-pid="iZXl9tBN">11、</p><p data-pid="OsFUVhps"><b>囿于市井，面向山海，远隔巷弄，且看花开。</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="O8xl0tRK">12、</p><p data-pid="UlVC70ZA">倘若南风知我意，莫将晚霞落黄昏。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="LEjTEEKb">13、</p><p data-pid="MdCNgXZl">日日行不怕千万里，天天讲不吝千万言，时时做不惧千万事。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="hE-Vywyf">14、</p><p data-pid="GsV8tid5"><b>市井长巷，聚拢来是烟火，摊开是人间。</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="MwfolqpJ">15、</p><p data-pid="AorbYNHh">恰似人间惊鸿客，墨染星辰云水间。</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-47178fbfa3166264c6782e413cb35478_b.jpg" data-rawwidth="700" data-rawheight="700" data-size="normal" data-original-token="v2-47178fbfa3166264c6782e413cb35478" data-default-watermark-src="https://pica.zhimg.com/v2-9552017d083fb2c3711023cd0374541e_b.jpg" class="origin_image zh-lightbox-thumb" width="700" data-original="https://pic1.zhimg.com/v2-47178fbfa3166264c6782e413cb35478_r.jpg"/></figure><p data-pid="lV36_Stf">16、</p><p data-pid="tHhFTLYr">愿你千山暮雪海棠依旧，不为岁月惊扰平添忧愁。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="O25tPujb">17、</p><p data-pid="UrOW75d2">总有人间一两风，填我十万八千梦。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="8pUCLiBx">18、</p><p data-pid="q-OKqP7o">一半烟火以谋生，一半诗意以谋爱。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="pLhzzZxf">19、</p><p data-pid="-AhI7T8q"><b>一个人使劲踮起脚尖靠近太阳的时候，全世界都挡不住他的阳光。</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="J-XEYsRV">20、</p><p data-pid="fZYW8P4V">我本无意惹惊鸿，奈何惊鸿入我心。</p><figure data-size="normal"><img src="https://pic3.zhimg.com/v2-5314f80bebbd742bf0c537b6c7e10d42_b.jpg" data-rawwidth="700" data-rawheight="700" data-size="normal" data-original-token="v2-5314f80bebbd742bf0c537b6c7e10d42" data-default-watermark-src="https://pic1.zhimg.com/v2-1fb03a68146c98f20b1ada73e12420ea_b.jpg" class="origin_image zh-lightbox-thumb" width="700" data-original="https://pic3.zhimg.com/v2-5314f80bebbd742bf0c537b6c7e10d42_r.jpg"/></figure><p data-pid="ORof1Sur">21、</p><p data-pid="mqyweIzs">从此烟雨落金城，一人撑伞两人行。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="Dc5fPcZ6">22、</p><p data-pid="_A7WuwAQ">温柔、有趣、不必太激烈；三餐、四季，不必太匆忙。</p><p data-pid="cKfZuNMl">不疾不徐地，把自己活成一道美景，还给生活最美好的样子。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="V4T2ELbt">23、</p><p data-pid="N0JygP1q"><b>山高水长，怕什么来不及，慌什么到不了。天顺其然，地顺其性，人顺其变，一切都是刚刚好。</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="G0381aFx">24、</p><p data-pid="hnHcUWXO">画图的度，可以用尺量，而生活的度，需要用心去感知。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="C-ERQqmn">25、</p><p data-pid="rN0wYKnp"><b>遇见，获得，失去，成长，释怀，完结。我与旧事归于尽，来年依旧迎花开。</b></p><figure data-size="normal"><img src="https://pic4.zhimg.com/v2-6c9a42100f13853ff1a1174cc3eac851_b.jpg" data-rawwidth="641" data-rawheight="641" data-size="normal" data-original-token="v2-6c9a42100f13853ff1a1174cc3eac851" data-default-watermark-src="https://picx.zhimg.com/v2-7f0f723f917a458e506a73406bb6ec69_b.jpg" class="origin_image zh-lightbox-thumb" width="641" data-original="https://pic4.zhimg.com/v2-6c9a42100f13853ff1a1174cc3eac851_r.jpg"/></figure><p data-pid="guUGMAHz">26、</p><p data-pid="fckpVwF2"><b>日出有盼，日落有思， 平平安安，所遇皆甜。</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="aA1FyAKa">27、</p><p data-pid="e78bFs7O">且行且忘且随风，且行且看且从容。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="mfWwOBi9">28、</p><p data-pid="Nkf1Y6Hz">生活的真谛从来都不在别处，就在日常一点一滴的奋斗里。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="xqNSgOUz">29、</p><p data-pid="r_1u9PLl"><b>生活是活给自己看的，你有多大成色，世界才会给你多大脸色。</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="GwWERfRD">30、</p><p data-pid="KEbgvaVh">最慢的步伐不是跬步，而是徘徊；最快的脚步不是冲刺，而是坚持。</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-3cb3e7c5bcba0f9a87aff749bfecbce2_b.jpg" data-rawwidth="641" data-rawheight="641" data-size="normal" data-original-token="v2-3cb3e7c5bcba0f9a87aff749bfecbce2" data-default-watermark-src="https://picx.zhimg.com/v2-b75e255da1a0d84fad7fe1d2feeac2a1_b.jpg" class="origin_image zh-lightbox-thumb" width="641" data-original="https://pic1.zhimg.com/v2-3cb3e7c5bcba0f9a87aff749bfecbce2_r.jpg"/></figure><p data-pid="RTV1BZOP">图文源自网络，侵删。</p><p data-pid="ZIOGyL8A">⭕哈喽，我是 <a class="member_mention" href="https://www.zhihu.com/people/82150c2f8c522a346f505e3c84b54553" data-hash="82150c2f8c522a346f505e3c84b54553" data-hovercard="p$b$82150c2f8c522a346f505e3c84b54553">@虞小希</a> ，一个热爱生活的自由创作者，喜欢文字和研究，我会在这里分享优质文案 | 生活好物 | 产品测评。</p><p data-pid="X4LaKprp">如果你喜欢我的内容，可以<b>点赞+关注</b>告诉我，我会持续更新哒~</p><hr/><p data-pid="BPDORNWd">猜你想看↓↓↓</p><a data-draft-node="block" data-draft-type="link-card" href="https://www.zhihu.com/question/463384439/answer/2958561882" data-image="https://pic4.zhimg.com/v2-5fc8f354312cdf9a1ec99310a45e8a8b_720w.jpg" data-image-width="700" data-image-height="700" class="internal">有什么一眼万年的短句文案？</a><p class="ztext-empty-paragraph"><br/></p><a data-draft-node="block" data-draft-type="link-card" href="https://www.zhihu.com/question/500150158/answer/2952514564" data-image="https://pic2.zhimg.com/v2-448fb0b5e9aa5d060806ad4283945c43_720w.jpg" data-image-width="700" data-image-height="700" class="internal">有没有人间清醒的文案？</a><p class="ztext-empty-paragraph"><br/></p><a data-draft-node="block" data-draft-type="link-card" href="https://www.zhihu.com/question/378005304/answer/2949341670" data-image="https://picx.zhimg.com/v2-688f8e7fb0781b8f627b2844d0399b27_720w.jpg" data-image-width="700" data-image-height="874" class="internal">让你醍醐灌顶的一句话？</a><p></p>',
      relationship: {
        is_thanked: false,
        is_nothelp: false,
        voting: 0,
      },
      is_labeled: false,
      visited_count: 465943,
      thumbnails: [
        'https://pic1.zhimg.com/50/v2-f37a4f8751fc3bf19255f2f88cad8d45_720w.jpg?source=b6762063',
        'https://pic1.zhimg.com/50/v2-a29b61faf462aa6ca01dd2071b9887d5_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-6944dca43f534f575c78bf8669151f3c_720w.jpg?source=b6762063',
        'https://pic1.zhimg.com/50/v2-5954ab0340b4dbcb435eb5702a9701c5_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-91beeef8bc66edf2ddd3d05c66e04388_720w.jpg?source=b6762063',
        'https://pica.zhimg.com/50/v2-6f51866c9780c4e20fea0138b9283ed3_720w.jpg?source=b6762063',
      ],
      favorite_count: 35576,
      answer_type: 'normal',
    },
    brief: '{"source": "TS", "type": "answer", "id": 2960297411}',
    attached_info:
      'CoEFCMPzgYGx4uu+jgEQBBoJNTY4MzIwNTk2IOf7k6EGKOonMJcBQBlKMAobVFNfU09VUkNFX0JBU0lDX0lORk9fUkVDQUxMEgEwGAAgADoKeyJyYXciOiIifVoINzY5MjcyNjViIGNjZGQ1NWExZGY0ZjRkMmUzZjk3OWM3OWVhZDJiMDczcgoyOTYwMjk3NDExigEJNTE1OTA2MDQyqgEJcmVjb21tZW5kwgEgODIxNTBjMmY4YzUyMmEzNDZmNTA1ZTNjODRiNTQ1NTPyAQoIDBIGTm9ybWFs8gEoCAoSJGIxNGIxNWU5LTJmNzktNGRlMS1iMjc4LTBjMDUwYTA2YjMyZfIBBQgLEgE1ggIAiAL9zu3K5jGSAiA4MjE1MGMyZjhjNTIyYTM0NmY1MDVlM2M4NGI1NDU1M5oCAMoCG09sZENvbnRlbnRSZWR1Y2U1V2VpZ2h0UnVsZdoCG1RTX1NPVVJDRV9CQVNJQ19JTkZPX1JFQ0FMTOgCAvoCC05PUk1BTF9GTE9XigMgZTZhNWEyMWQ1YjBhNDM0OTliMTUzZTZlOWQxMjAzYTCaAw0KAnYwEAAaBW90aGVyqAOXuBzYAwDqAxFiYXNpY19pbmZvX3JlY2FsbPoDEBIMVU5LTk9XTl9NT0RFIACABACIBACSBAZOb3JtYWyaBAEyoAQAqAQAsAQAugQGbWFudWFswgQDMTYwyAQA0gQP5o6o6I2Q5bey5pu05paw2AQA8AQA+QQAAACAIvSWP4EFAAAAAAAAAACJBRbx5XLGPq0/kgUJ5q2m5L6v5Yy6mgUDZGZ0ogUDZGZ0sgUBMbkFAAAAAAAAAADQBQDgBQDoBQDwBQWSAiUKCTU2ODMyMDU5NhIKMjk2MDI5NzQxMRgEIgpJTUFHRV9URVhU',
    action_card: false,
  },
  {
    id: '26_1711164581.15',
    type: 'feed',
    offset: 26,
    verb: 'TOPIC_ACKNOWLEDGED_ANSWER',
    created_time: 1711164581,
    updated_time: 1711164581,
    target: {
      id: 3437117120,
      type: 'answer',
      url: 'https://api.zhihu.com/answers/3437117120',
      author: {
        id: 'b263ab4eb60332beacd9034d044c4229',
        url: 'https://api.zhihu.com/people/b263ab4eb60332beacd9034d044c4229',
        user_type: 'people',
        url_token: 'bing-gan-si-diao-liao-75-18',
        name: '饼干死掉了',
        headline: '我是饼干，可盐可甜可咸……',
        avatar_url:
          'https://picx.zhimg.com/50/v2-6ad32164aa2c9140a0ae91a0ad134c30_l.jpg?source=b6762063',
        is_org: false,
        gender: 1,
        followers_count: 231,
        is_following: false,
        is_followed: false,
      },
      created_time: 1710911055,
      updated_time: 1710913028,
      voteup_count: 1010,
      thanks_count: 58,
      comment_count: 110,
      is_copyable: false,
      question: {
        id: 649035276,
        type: 'question',
        url: 'https://api.zhihu.com/questions/649035276',
        author: {
          id: '5fe0f8a57fb8a63bc0547d24d291a4c9',
          url: 'https://api.zhihu.com/people/5fe0f8a57fb8a63bc0547d24d291a4c9',
          user_type: 'people',
          url_token: 'jin-shou-zhi-6-73',
          name: '大熊猫',
          headline: '嗯～嗯嗯～嗯嗯～嗯！（熊猫语）',
          avatar_url:
            'https://picx.zhimg.com/50/v2-faa63afd62c3be1af3f4ec9931829bd0_l.jpg?source=b6762063',
          is_org: false,
          gender: -1,
          followers_count: 1228,
          is_following: false,
          is_followed: false,
        },
        title:
          '邯郸遇害 13 岁初中生遗体已进行尸检，其父和律师全程见证，哪些信息值得关注？',
        created: 1710728491,
        answer_count: 0,
        follower_count: 0,
        comment_count: 14,
        bound_topic_ids: [17729, 117461, 100947, 3363130],
        is_following: false,
        excerpt: '',
        relationship: {
          is_author: false,
        },
        detail: '',
        question_type: 'normal',
      },
      thumbnail:
        'https://pica.zhimg.com/50/v2-5f2f326ebcb626e48ee5505619f6f472_720w.jpg?source=b6762063',
      excerpt:
        '律师说的时候，都是强忍着情绪。 强忍啊，那么成熟，那么专业的律师在讲述具体情况的时候，鼻子都一下子红了，可想而知到底有多惨。   小弟弟，那是生前被铁锹硬生生的，一拍一拍的，拍在脸上，眼球都出来了，那是人啊，活生生的人啊，不是鸡鸭鱼！ 肝脏甚至还被刺穿，脖颈被砍七刀。 我甚至能想象到，三人作恶时不仅不会害怕，甚至是激动兴奋，小子耀，他的哭泣，他的祈求，在三个出生的眼里，就像是没听到一样。 律师说小弟弟…',
      excerpt_new:
        '律师说的时候，都是强忍着情绪。 强忍啊，那么成熟，那么专业的律师在讲述具体情况的时候，鼻子都一下子红了，可想而知到底有多惨。   小弟弟，那是生前被铁锹硬生生的，一拍一拍的，拍在脸上，眼球都出来了，那是人啊，活生生的人啊，不是鸡鸭鱼！ 肝脏甚至还被刺穿，脖颈被砍七刀。 我甚至能想象到，三人作恶时不仅不会害怕，甚至是激动兴奋，小子耀，他的哭泣，他的祈求，在三个出生的眼里，就像是没听到一样。 律师说小弟弟…',
      preview_type: 'default',
      preview_text: '',
      reshipment_settings: 'disallowed',
      content:
        '<p data-pid="ussFj70n">律师说的时候，都是强忍着情绪。</p><p data-pid="RfAC8Hf9">强忍啊，那么成熟，那么专业的律师在讲述具体情况的时候，鼻子都一下子红了，可想而知到底有多惨。</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-ef3b3109c6ca5e5253724a1763f39cba_b.jpg" data-rawwidth="1080" data-rawheight="2340" data-size="normal" data-original-token="v2-ef3b3109c6ca5e5253724a1763f39cba" data-default-watermark-src="https://pic3.zhimg.com/v2-2fbda34b68b57ae7521658bfaf407b9e_b.jpg" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic1.zhimg.com/v2-ef3b3109c6ca5e5253724a1763f39cba_r.jpg"/></figure><p data-pid="6EJua-vd" class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pica.zhimg.com/v2-57b9b5aafe08f2a890038dc606c8f32c_b.jpg" data-rawwidth="1080" data-rawheight="2340" data-size="normal" data-original-token="v2-57b9b5aafe08f2a890038dc606c8f32c" data-default-watermark-src="https://pic2.zhimg.com/v2-ce002b86146c75a0221d078fe377f237_b.jpg" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pica.zhimg.com/v2-57b9b5aafe08f2a890038dc606c8f32c_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://picx.zhimg.com/v2-de5a28a0e36e51c83b1b309c390e8145_b.jpg" data-rawwidth="1080" data-rawheight="2340" data-size="normal" data-original-token="v2-de5a28a0e36e51c83b1b309c390e8145" data-default-watermark-src="https://pic3.zhimg.com/v2-4f42bcad9cc769db25133511dca719d2_b.jpg" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://picx.zhimg.com/v2-de5a28a0e36e51c83b1b309c390e8145_r.jpg"/></figure><p data-pid="lmOqKFc0">小弟弟，那是生前被铁锹硬生生的，一拍一拍的，拍在脸上，眼球都出来了，那是人啊，活生生的人啊，不是鸡鸭鱼！</p><p data-pid="YxebPu2o">肝脏甚至还被刺穿，脖颈被砍七刀。</p><p data-pid="rg49cr0g">我甚至能想象到，三人作恶时不仅不会害怕，甚至是激动兴奋，小子耀，他的哭泣，他的祈求，在三个出生的眼里，就像是没听到一样。</p><p data-pid="kMQ94jXq">律师说小弟弟想用手挡，手掌被铁锹硬生生拍断。</p><p data-pid="L6ryTa4f">奄奄一息，失去知觉后，几人甚至用尖锐物品将弟弟捅穿……</p><p data-pid="Ha5289oN">三个出生，出生中的出生！</p><p data-pid="Rg8Slg8g">日本出生当年也不过如此了，p社玩家都觉得反人类！</p><p data-pid="RgCl1ldl">这种出生，凭什么让他再呼吸！</p><p data-pid="bwanlZ2K">小弟弟出事前一天还在跟爸爸说，想吃一碗炸酱面。</p><p data-pid="v7mIfdfG">是真的想吃吗？真的吃到那碗炸酱面了吗？</p><p data-pid="H9d4lSMq">那十五块怕是也进了仨出生口袋里。</p><p data-pid="wxQIe7h2">小弟弟那个委屈的表情，我肯定，他当时肯定是被逼无奈了，最终才问爸爸要钱。</p><p data-pid="p_aAiVT9">啊啊啊啊啊，出生！</p><p data-pid="m-c-cV2e">绷不住了，真的绷不住了，看到弟弟那句话，我一个大男人都想哭</p><figure data-size="normal"><img src="https://pica.zhimg.com/v2-f12deddfb6ecf1db43030e1074dca12c_b.jpg" data-rawwidth="1080" data-rawheight="2340" data-size="normal" data-original-token="v2-f12deddfb6ecf1db43030e1074dca12c" data-default-watermark-src="https://pic2.zhimg.com/v2-c9f56c204a0b922c7a49cf0c62e55147_b.jpg" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pica.zhimg.com/v2-f12deddfb6ecf1db43030e1074dca12c_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-ce3de87ad263c0edbf61f57d694bf550_b.jpg" data-rawwidth="1080" data-rawheight="2340" data-size="normal" data-original-token="v2-ce3de87ad263c0edbf61f57d694bf550" data-default-watermark-src="https://picx.zhimg.com/v2-3e6824c0ed47a273643c39320307cb6b_b.jpg" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic1.zhimg.com/v2-ce3de87ad263c0edbf61f57d694bf550_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic3.zhimg.com/v2-7b51cc3feed047ed6e4be9ecc7350a9e_b.jpg" data-rawwidth="1080" data-rawheight="2340" data-size="normal" data-original-token="v2-7b51cc3feed047ed6e4be9ecc7350a9e" data-default-watermark-src="https://pic3.zhimg.com/v2-da2c7417848e985b423baff3578b350a_b.jpg" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic3.zhimg.com/v2-7b51cc3feed047ed6e4be9ecc7350a9e_r.jpg"/></figure><p></p>',
      relationship: {
        is_thanked: false,
        is_nothelp: false,
        voting: 0,
      },
      is_labeled: false,
      visited_count: 56629,
      thumbnails: [
        'https://pic1.zhimg.com/50/v2-5f2f326ebcb626e48ee5505619f6f472_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-57185a3a5a176e2b45fc50ca65819d45_720w.jpg?source=b6762063',
        'https://pic1.zhimg.com/50/v2-b11c5a495c056d2a5bab83453f306260_720w.jpg?source=b6762063',
        'https://pica.zhimg.com/50/v2-6fb55ced689aa4b069b2f804a2f48403_720w.jpg?source=b6762063',
        'https://pic1.zhimg.com/50/v2-1dcc4fd3d1b1677d9b1b0c92918950ff_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-c25b4a6627c52ddcde0b1f397448b23f_720w.jpg?source=b6762063',
      ],
      favorite_count: 59,
      answer_type: 'normal',
    },
    brief: '{"source": "TS", "type": "answer", "id": 3437117120}',
    attached_info:
      'Cp0FCMPzgYGx4uu+jgEQBBoJNjU1MDA0ODkzIM/c6a8GKPIHMG5AGkowChtUU19TT1VSQ0VfRkVFRFJFX1RJTUVMSU5FU1MSATAYACAAOgp7InJhdyI6IiJ9WgkxMDY1MDc3MjhiIGNjZGQ1NWExZGY0ZjRkMmUzZjk3OWM3OWVhZDJiMDczcgozNDM3MTE3MTIwigEJNjQ5MDM1Mjc2qgEJcmVjb21tZW5kwgEgYjI2M2FiNGViNjAzMzJiZWFjZDkwMzRkMDQ0YzQyMjnyAQoIDBIGTm9ybWFs8gEoCAoSJGY0YjU0OTNmLWZiMDEtNDUxNC1iNWE2LTc3YTBlMjcxZTM5YvIBBQgLEgE1ggIAiAL9zu3K5jGSAiBiMjYzYWI0ZWI2MDMzMmJlYWNkOTAzNGQwNDRjNDIyOZoCAMoCG09sZENvbnRlbnRSZWR1Y2U1V2VpZ2h0UnVsZcoCGVVuZnJpZW5kbGluZXNzV2VpZ2h0UnVsZTLaAhtUU19TT1VSQ0VfRkVFRFJFX1RJTUVMSU5FU1PoAgL6AgtOT1JNQUxfRkxPV4oDIGU2YTVhMjFkNWIwYTQzNDk5YjE1M2U2ZTlkMTIwM2EwmgMNCgJ2MBAAGgVvdGhlcqgDtboD2AMA6gMRZmVlZHJlX3RpbWVsaW5lc3P6AxASDFVOS05PV05fTU9ERSAAgAQAiAQAkgQGTm9ybWFsmgQBMqAEAKgEALAEALoEBm1hbnVhbMIEAzE2MMgEANIED+aOqOiNkOW3suabtOaWsNgEAPAEAPkEAAAAAPH8wD+BBQAAAAAAAAAAiQUW8eVyxj6tP5IFCeatpuS+r+WMupoFA2RmdKIFA2RmdLIFATG5BQAAAAAAAAAA0AUA4AUA6AUA8AUFkgIlCgk2NTUwMDQ4OTMSCjM0MzcxMTcxMjAYBCIKSU1BR0VfVEVYVA==',
    action_card: false,
  },
  {
    id: '27_1711164581.49',
    type: 'feed',
    offset: 27,
    verb: 'TOPIC_ACKNOWLEDGED_ANSWER',
    created_time: 1711164581,
    updated_time: 1711164581,
    target: {
      id: 3423375392,
      type: 'answer',
      url: 'https://api.zhihu.com/answers/3423375392',
      author: {
        id: 'edde1ef86d9b9eb62e7fbcab94807615',
        url: 'https://api.zhihu.com/people/edde1ef86d9b9eb62e7fbcab94807615',
        user_type: 'people',
        url_token: 'wang-xuan-72-10',
        name: '小小透明',
        headline: '程序猿',
        avatar_url:
          'https://pica.zhimg.com/50/v2-aa6a969ca017f614582701b6953871c9_l.jpg?source=b6762063',
        is_org: false,
        gender: -1,
        followers_count: 1865,
        is_following: false,
        is_followed: false,
      },
      created_time: 1709889117,
      updated_time: 1709889483,
      voteup_count: 2401,
      thanks_count: 176,
      comment_count: 200,
      is_copyable: true,
      question: {
        id: 643506968,
        type: 'question',
        url: 'https://api.zhihu.com/questions/643506968',
        author: {
          id: 'aea63cac4f190ec052d291e7baf32d6e',
          url: 'https://api.zhihu.com/people/aea63cac4f190ec052d291e7baf32d6e',
          user_type: 'people',
          url_token: '32-75-92-61',
          name: '和狗狗录播组',
          headline: '',
          avatar_url:
            'https://picx.zhimg.com/50/v2-47e684ee257a3a06b876fa41261f47b0_l.jpg?source=b6762063',
          is_org: false,
          gender: -1,
          followers_count: 66,
          is_following: false,
          is_followed: false,
        },
        title: '神解释：为什么程序员怕改需求？',
        created: 1707340900,
        answer_count: 0,
        follower_count: 0,
        comment_count: 7,
        bound_topic_ids: [311, 2276, 14228],
        is_following: false,
        excerpt: '',
        relationship: {
          is_author: false,
        },
        detail: '',
        question_type: 'normal',
      },
      excerpt:
        '第一天 产品：我需要一个东西喝水。 甲：用来喝水？是水杯吗？ 产品：对对对，就是水杯！你懂我！ 甲：那就做个普通水杯？ 产品：对对对，没问题！ ------------------------------------------------------------- 甲：需求来了需求来了，要我们做个杯子，一周搞完； 乙：小问题，就一个杯子，两天可以搞定。 第二天 产品：我昨天看了下别人家的水杯，然后想了想，觉得水杯太小了。我想要个大的！ 甲：大的？怎么大？ 产品：要…',
      excerpt_new:
        '第一天 产品：我需要一个东西喝水。 甲：用来喝水？是水杯吗？ 产品：对对对，就是水杯！你懂我！ 甲：那就做个普通水杯？ 产品：对对对，没问题！ ------------------------------------------------------------- 甲：需求来了需求来了，要我们做个杯子，一周搞完； 乙：小问题，就一个杯子，两天可以搞定。 第二天 产品：我昨天看了下别人家的水杯，然后想了想，觉得水杯太小了。我想要个大的！ 甲：大的？怎么大？ 产品：要…',
      preview_type: 'default',
      preview_text: '',
      reshipment_settings: 'allowed',
      content:
        '<p data-pid="RsGLXgV_">第一天</p><p data-pid="yA5sA5LP">产品：我需要一个东西喝水。</p><p data-pid="5TJ2raFm">甲：用来喝水？是水杯吗？</p><p data-pid="hMROMote">产品：对对对，就是水杯！你懂我！</p><p data-pid="LuvWGIVV">甲：那就做个普通水杯？</p><p data-pid="ry2OUWW7">产品：对对对，没问题！</p><p data-pid="huFkZhKd">-------------------------------------------------------------</p><p data-pid="4XOa-nNP">甲：需求来了需求来了，要我们做个杯子，一周搞完；</p><p data-pid="RmGAkW5_">乙：小问题，就一个杯子，两天可以搞定。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="twBac2Z-">第二天</p><p data-pid="EEbh2vKE">产品：我昨天看了下别人家的水杯，然后想了想，觉得水杯太小了。我想要个大的！</p><p data-pid="-o0eOxT8">甲：大的？怎么大？</p><p data-pid="Ul057M_5">产品：要比水杯大很多</p><p data-pid="8bVBaecR">甲：比水杯大很多？莫不是水缸？</p><p data-pid="7bhUX4EU">产品：对对对，就是水缸，你可真是懂我啊，知己！</p><p data-pid="-u7hVqCc">-------------------------------------------------------------</p><p data-pid="gWsGfoDY">甲：刚刚产品说，需求要小改一下，不是一个杯子，杯子太小了，要做个水缸</p><p data-pid="Q7ymK2re">乙：我杯子都做快做好，算了，还有六天，做个大水缸也绰绰有余，我改。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="TL6qstLW">第三天</p><p data-pid="Ceg7lkd_">产品：我昨天又想了想，水缸也小了</p><p data-pid="ERI8XY_R">甲：小了？</p><p data-pid="sP3TlJSK">产品：对，我希望能够有人在里面游泳，而且是可以很多人在里面游泳</p><p data-pid="SFJfeAll">甲：那不就是游泳池吗，和水缸有啥关系啊！</p><p data-pid="EIl7NEUI">产品：对对对，就是泳池，你真是太懂我了。</p><p data-pid="eP1PKX2n">产品：不过泳池也就是比水缸大一点，哪儿没关系了？</p><p data-pid="0DQl7LL0">甲：。。。。</p><p data-pid="e1r6GMte">甲：你说有关系就有关系吧。那就挖个泳池（重音），可不能再改了啊</p><p data-pid="yIXdXgCn">产品：不改了不改了，谁改谁小狗</p><p data-pid="6uYdqFZl">产品（小声BB）：谁改需求了啊，我需求就是这样从来没变过，你们一直没懂我说啥还怪我咯</p><p data-pid="RnFIEDBD">------------------------------------------------------------------------------------</p><p data-pid="cwkNYr_4">甲：刚刚产品又说了，之前没沟通清楚，不是要水缸，是要弄个游泳池</p><p data-pid="akiLeR9Q">乙：尼玛，水缸和泳池这也差得太远了吧。这TM叫没沟通清楚？唉，只有五天了，水缸不要了，现在赶快动手开挖游泳池吧，时间虽然有点紧，但是也是能做完的。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="xhH_v2p1">第四天</p><p data-pid="c5R6q1HJ">产品：我刚刚看你们在地上挖？</p><p data-pid="QFD83xw4">甲：对啊，挖泳池啊。</p><p data-pid="291GK3Ed">产品：不对不对，我的需求是要在顶楼弄一个，还要玻璃的，你们在地上挖是绝对不行的！</p><p data-pid="6NJjz5_W">甲：我昨天有没有问你说挖个泳池，不改了，你在顶楼怎么挖泳池？</p><p data-pid="mHnAxMm3">产品：我不管，我又没改需求，我就是要玻璃的，在顶楼</p><p data-pid="tRBxhONr">甲（忍住怒火）：最后一次了啊</p><p data-pid="p7zJInQm">产品：是的，绝对最后一次</p><p data-pid="9c0rFWMH">产品（内心活动）：理解个需求都这么费劲，啥人啊都是</p><p data-pid="0FZsKn4h">--------------------------------------------------------------------------------------------</p><p data-pid="6xSORtK8">甲：那龟孙又来了，说我们理解得不对，他要的是在顶楼弄一个玻璃泳池</p><p data-pid="LK8cvnlQ">乙：我去TM的。他龟儿子能不能把屁一次性放完？还有四天了，建玻璃泳池？来得及吗？</p><p data-pid="0CbSCh2W">甲：消消气消消气，大家加点班，争取原计划搞定</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="DbJZnnoZ">第五天</p><p data-pid="ZXIU_O_5">甲：今天你没啥要改的了吧？时间来不及了哦，我们加班都不一定能够按时把玻璃泳池给你建好！</p><p data-pid="t6duQDaR">产品：不改了了不改了。不对啊，我啥时候改过需求，我需求一直都是这个。就是你们理解不到位</p><p data-pid="f5N7f0Ke">甲：。。。</p><p data-pid="wEabi9Z0">--------------------------------------------------------------------------------------</p><p data-pid="XAWfAaBi">乙：那货不会又有啥幺蛾子了吧？</p><p data-pid="YP0jyLNZ">甲：刚刚确认过了，没了，我们安心建玻璃泳池吧</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="9PyAel71">第六天</p><p data-pid="IXhAlamP">产品：做成什么样了啊，啥时候能看一下阶段成果啊</p><p data-pid="i1pe2fcz">甲：你当是许愿机呢，肯定还要时间才能搞完</p><p data-pid="h2GPhJ1u">----------------------------------------------------------------------------</p><p data-pid="wqayTY-l">甲：兄弟们加把劲，时间卡得比较死，我们得在这周把泳池交付了。辛苦大家</p><p data-pid="9uvJ0dBF">乙（内心）：辛苦的又不是你，站着说话不腰疼</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="uQ2W2s9d">第七天</p><p data-pid="UA4fxQFD">甲：我们整个组通宵了几天，终于把玻璃泳池建好了，产品你验收一下</p><p data-pid="ai5Q4MU_">产品：嗯，不错。顶楼、玻璃、能有人游泳</p><p data-pid="IS8ox2S7">产品：咦，把（把手）呢？没把我怎么拿起来喝水？</p><p data-pid="PxgoCfFU">甲：喝水？泳池喝什么水？</p><p data-pid="3wxNU75-">产品：我要的是一个可以拿起来当杯子喝水的玻璃泳池，你们这个少了一个关键功能，不合格。验收不通过</p><p data-pid="RD4t84Pk">甲：。。。</p><p data-pid="BHHVrVwB">乙：别拦着我，我去砍死这个傻逼！！！！</p>',
      relationship: {
        is_thanked: false,
        is_nothelp: false,
        voting: 0,
      },
      is_labeled: false,
      visited_count: 207904,
      favorite_count: 275,
      answer_type: 'normal',
    },
    brief: '{"source": "TS", "type": "answer", "id": 3423375392}',
    attached_info:
      'CoIFCMPzgYGx4uu+jgEQBBoJNjUyNTA3MjMzIN2sq68GKOESMMgBQBtKIAoVVFNfU09VUkNFX1RIRU1FX01FUkdFEgEwGAAgADoASigKE1RTX1NPVVJDRV9GRUVEUkVfVjcSATAYACAAOgp7InJhdyI6IiJ9WgkxMDUyNzkzMDJiIGNjZGQ1NWExZGY0ZjRkMmUzZjk3OWM3OWVhZDJiMDczcgozNDIzMzc1MzkyigEJNjQzNTA2OTY4qgEJcmVjb21tZW5kwgEgZWRkZTFlZjg2ZDliOWViNjJlN2ZiY2FiOTQ4MDc2MTXyAQoIDBIGTm9ybWFs8gEoCAoSJGI4YzMwNGVmLWRhNzItNDY1MC04NGZkLTBhNzkzNDkwYTc5Y/IBBQgLEgE1ggIAiAL9zu3K5jGSAiBlZGRlMWVmODZkOWI5ZWI2MmU3ZmJjYWI5NDgwNzYxNZoCANoCFVRTX1NPVVJDRV9USEVNRV9NRVJHRegCAvoCC05PUk1BTF9GTE9XigMgZTZhNWEyMWQ1YjBhNDM0OTliMTUzZTZlOWQxMjAzYTCaAw0KAnYwEAAaBW90aGVyqAOg2AzYAwDqAxt0aGVtZU1lcmdlVXBncmFkZVYxUmVjYWxsZXL6AxASDFVOS05PV05fTU9ERSAAgAQAiAQAkgQGTm9ybWFsmgQBMqAEAKgEALAEALoEBm1hbnVhbMIEAzE2MMgEANIED+aOqOiNkOW3suabtOaWsNgEAPAEAPkEAAAAYLelvz+BBQAAAAAAAAAAiQUW8eVyxj6tP5IFCeatpuS+r+WMupoFA2RmdKIFA2RmdLIFATG5BQAAAAAAAAAA0AUA4AUA6AUA8AUFkgIlCgk2NTI1MDcyMzMSCjM0MjMzNzUzOTIYBCIKSU1BR0VfVEVYVA==',
    action_card: false,
  },
  {
    id: '28_1711164581.249',
    type: 'feed',
    offset: 28,
    verb: 'TOPIC_ACKNOWLEDGED_ANSWER',
    created_time: 1711164581,
    updated_time: 1711164581,
    target: {
      id: 3171570299,
      type: 'answer',
      url: 'https://api.zhihu.com/answers/3171570299',
      author: {
        id: 'dbcd54ef970d4e37e4d9f72fb55addd9',
        url: 'https://api.zhihu.com/people/dbcd54ef970d4e37e4d9f72fb55addd9',
        user_type: 'people',
        url_token: 'shen-jie-48',
        name: '四海浪人',
        headline: '通航从业者，喜欢冲浪、滑雪、自驾，渴望探索这个世界！',
        avatar_url:
          'https://pic1.zhimg.com/50/v2-42b60bee8d4897f90548edcbf072a822_l.jpg?source=b6762063',
        is_org: false,
        gender: 1,
        followers_count: 1234,
        is_following: false,
        is_followed: false,
      },
      created_time: 1692346021,
      updated_time: 1692346021,
      voteup_count: 23717,
      thanks_count: 6204,
      comment_count: 1299,
      is_copyable: true,
      question: {
        id: 608943054,
        type: 'question',
        url: 'https://api.zhihu.com/questions/608943054',
        author: {
          id: 'dd5f20cb6d6d24c106d879dafe500abf',
          url: 'https://api.zhihu.com/people/dd5f20cb6d6d24c106d879dafe500abf',
          user_type: 'people',
          url_token: 'reng-yong-bing',
          name: '昔日少年',
          headline: '聊一聊职场的那些事儿 ......',
          avatar_url:
            'https://picx.zhimg.com/50/v2-8d7753f45d0bd5fb0e365457fb0f9935_l.jpg?source=b6762063',
          is_org: false,
          gender: 1,
          followers_count: 477,
          is_following: false,
          is_followed: false,
        },
        title: '你是什么时候发现，上班是没有意义的？',
        created: 1687847449,
        answer_count: 0,
        follower_count: 0,
        comment_count: 66,
        bound_topic_ids: [1761, 8542, 9469],
        is_following: false,
        excerpt: '',
        relationship: {
          is_author: false,
        },
        detail: '',
        question_type: 'normal',
      },
      excerpt:
        '建议你找个工作日的时间，比如周一下午，去一趟当地最大最豪华的商场，比如万象城、SKP或者恒隆中心等地方。 你会发现，原来这个世界上有很多人是根本不上班的。他们或者是自由职业、或者是网店店主、或者是自媒体从业人、或者是小老板、或者只是单纯的家庭主妇。 原本这个世界上根本没有上班这个事情，几十年前大家都是日出而作、日落而息的，阴天下雨天气不好就在家休息。只是因为资本主义的进程，将劳动力从土地上解放了出来…',
      excerpt_new:
        '建议你找个工作日的时间，比如周一下午，去一趟当地最大最豪华的商场，比如万象城、SKP或者恒隆中心等地方。 你会发现，原来这个世界上有很多人是根本不上班的。他们或者是自由职业、或者是网店店主、或者是自媒体从业人、或者是小老板、或者只是单纯的家庭主妇。 原本这个世界上根本没有上班这个事情，几十年前大家都是日出而作、日落而息的，阴天下雨天气不好就在家休息。只是因为资本主义的进程，将劳动力从土地上解放了出来…',
      preview_type: 'default',
      preview_text: '',
      reshipment_settings: 'allowed',
      content:
        '<p data-pid="hG09txLs">建议你找个工作日的时间，比如周一下午，去一趟当地最大最豪华的商场，比如万象城、SKP或者恒隆中心等地方。</p><p data-pid="HzX8jwft">你会发现，原来这个世界上有很多人是根本不上班的。他们或者是自由职业、或者是网店店主、或者是自媒体从业人、或者是小老板、或者只是单纯的家庭主妇。</p><p data-pid="XjCtN59t">原本这个世界上根本没有上班这个事情，几十年前大家都是日出而作、日落而息的，阴天下雨天气不好就在家休息。只是因为资本主义的进程，将劳动力从土地上解放了出来，驱赶大家进入工厂，开始形成朝九晚五的工作制度。近几年，随着这个时代的不断内卷，996形成了，大家开始自我加压，本来都是生产队的毛驴，非要自己给自己来两鞭子，感动自我，奉献资本家。</p><p data-pid="R0Mqws7g">所以，上班本来就是个工作的形式，并不是这个社会的主流，我们觉得大家都上班只是因为我们身边最主要的一种关系叫同事关系，感觉好像身边人都在上班，那是因为我们每天最多的时间是处于这个围城里面的，走出去才发现，原来人和人真是不一样的。</p><p data-pid="kNQnwU1x">另一方面，上班的意义其实就是两方面，一方面是工作的成就感，另一方面是薪资。从工作成就感方面，刚才已经说过了，都是生产队的毛驴，对得起工资就行，本身成就感就是资本家为我们套的一个笼头，是为了让你更加卖力得干活。人生都是一场偶然，都是一段经历，本来就是没意义的，你缺非要给自己拉磨去找意义，不是缘木求鱼吗？另一方面是薪资，干活养家不丢人，但别为了干活忘记自己为什么干活，到最后把工作当成了这辈子的意义，这是很可悲的。</p><p data-pid="PpREhdG-">当你发现自己忙死忙活绞尽脑汁想出来的方案，到了上位者那里其实根本没什么区别；当你发现自己一个月的工资，其实只是别人饭局上的一盘菜而已；当你发现自己从小给孩子灌输辛勤劳动的观点，在“鲇鱼”“二代”眼里只是跳梁小丑的时候，你会发现工作根本毫无意义。</p><p data-pid="FxkFfLma">最有意义的是你，是此时此刻的你，是那个有想法有行动的你，而不是我在格子间里的你，不是那个地铁里写日报的你，不是那个大气不敢吭的你。</p><p data-pid="E4Lw18yQ">人生本无意义，工作更无意义，但你是有意义的，所有的意义都需要你去赋予，别走得太远忘记为什么出发。</p>',
      relationship: {
        is_thanked: false,
        is_nothelp: false,
        voting: 0,
      },
      is_labeled: false,
      visited_count: 4410647,
      favorite_count: 13941,
      answer_type: 'normal',
    },
    brief: '{"source": "TS", "type": "answer", "id": 3171570299}',
    attached_info:
      'CusECMPzgYGx4uu+jgEQBBoJNjA2NzMzMTQ1IKXN/KYGKKW5ATCTCkAcSigKE1RTX1NPVVJDRV9GRUVEUkVfVjcSATAYACAAOgp7InJhdyI6IiJ9Wgg5NzYwMTQzOGIgY2NkZDU1YTFkZjRmNGQyZTNmOTc5Yzc5ZWFkMmIwNzNyCjMxNzE1NzAyOTmKAQk2MDg5NDMwNTSqAQlyZWNvbW1lbmTCASBkYmNkNTRlZjk3MGQ0ZTM3ZTRkOWY3MmZiNTVhZGRkOfIBCggMEgZOb3JtYWzyASgIChIkMzg2YWFkNDMtMzRiZC00ZjdjLThjN2EtYzQ1NDcwMWUxNWJj8gEFCAsSATWCAgCIAv3O7crmMZICIGRiY2Q1NGVmOTcwZDRlMzdlNGQ5ZjcyZmI1NWFkZGQ5mgIAygIbT2xkQ29udGVudFJlZHVjZTVXZWlnaHRSdWxl2gITVFNfU09VUkNFX0ZFRURSRV9WN+gCAvoCC05PUk1BTF9GTE9XigMgZTZhNWEyMWQ1YjBhNDM0OTliMTUzZTZlOWQxMjAzYTCaAw0KAnYwEAAaBW90aGVyqAOXmo0C2AMA6gMJZmVlZHJlX3Y3+gMQEgxVTktOT1dOX01PREUgAIAEAIgEAJIEBk5vcm1hbJoEATKgBACoBACwBAC6BAZtYW51YWzCBAMxNjDIBADSBA/mjqjojZDlt7Lmm7TmlrDYBADwBAD5BAAAAKD897A/gQUAAAAAAAAAAIkFFvHlcsY+rT+SBQnmrabkvq/ljLqaBQNkZnSiBQNkZnSyBQExuQUAAAAAAAAAANAFAOAFAOgFAPAFBZICJQoJNjA2NzMzMTQ1EgozMTcxNTcwMjk5GAQiCklNQUdFX1RFWFQ=',
    action_card: false,
  },
  {
    id: '29_1711164581.192',
    type: 'feed',
    offset: 29,
    verb: 'TOPIC_ACKNOWLEDGED_ANSWER',
    created_time: 1711164581,
    updated_time: 1711164581,
    target: {
      id: 3417964936,
      type: 'answer',
      url: 'https://api.zhihu.com/answers/3417964936',
      author: {
        id: 'e7017a83fabbc111e1ad12e2cd113dea',
        url: 'https://api.zhihu.com/people/e7017a83fabbc111e1ad12e2cd113dea',
        user_type: 'people',
        url_token: 'zhang-hao-yu-39-60',
        name: '张浩予',
        headline: '北京德惠众合信息技术有限公司WEB程序员',
        avatar_url:
          'https://pica.zhimg.com/50/v2-4002a3e3f74a300ea4da42552a881d7c_l.jpg?source=b6762063',
        is_org: false,
        gender: 1,
        followers_count: 51,
        is_following: false,
        is_followed: false,
      },
      created_time: 1709525793,
      updated_time: 1709687570,
      voteup_count: 94,
      thanks_count: 31,
      comment_count: 149,
      is_copyable: false,
      question: {
        id: 646970166,
        type: 'question',
        url: 'https://api.zhihu.com/questions/646970166',
        author: {
          id: '688f3e9625990a918c069eacaedb36ef',
          url: 'https://api.zhihu.com/people/688f3e9625990a918c069eacaedb36ef',
          user_type: 'people',
          url_token: 'yan-yan-79-54-82',
          name: '执着',
          headline: '安于现状，执着未来',
          avatar_url:
            'https://pica.zhimg.com/50/v2-73e9f3366143092496252cbc89beaaf1_l.jpg?source=b6762063',
          is_org: false,
          gender: -1,
          followers_count: 0,
          is_following: false,
          is_followed: false,
        },
        title: '前端真的已经死了嘛?',
        created: 1709524723,
        answer_count: 0,
        follower_count: 0,
        comment_count: 0,
        bound_topic_ids: [225, 769, 87560],
        is_following: false,
        excerpt: '',
        relationship: {
          is_author: false,
        },
        detail: '',
        question_type: 'normal',
      },
      excerpt:
        '如果你限定的前端仅只是 ts + css + webpack + vue 的话，那现在的前端行业的确已经从蓝海步入红海阶段了。 如果你提及的是【现代】前端，那正是整个行业急需大量新生代人才的时候。 现代前端应该有的样子至少是 初级前端html / css3 / typescript / ES6webpack + nodejsvue / react / angularjs / bootstrap / jQuery 甚至，越多越好。中级前端（含初级部分）Wasm + Rust至少熟悉 基础库：wasm-bindgen crate, gloo crate, futu…',
      excerpt_new:
        '如果你限定的前端仅只是 ts + css + webpack + vue 的话，那现在的前端行业的确已经从蓝海步入红海阶段了。 如果你提及的是【现代】前端，那正是整个行业急需大量新生代人才的时候。 现代前端应该有的样子至少是 初级前端html / css3 / typescript / ES6webpack + nodejsvue / react / angularjs / bootstrap / jQuery 甚至，越多越好。中级前端（含初级部分）Wasm + Rust至少熟悉 基础库：wasm-bindgen crate, gloo crate, futu…',
      preview_type: 'default',
      preview_text: '',
      reshipment_settings: 'disallowed',
      content:
        '<p data-pid="hzyqCZUO">如果你限定的前端仅只是 ts + css + webpack + vue 的话，那现在的前端行业的确已经从蓝海步入红海阶段了。</p><p data-pid="4ClS9y3M">如果你提及的是【现代】前端，那正是整个行业急需大量新生代人才的时候。</p><p data-pid="RlLR2sKp">现代前端应该有的样子至少是</p><h2>初级前端</h2><ol><li data-pid="ePwZIu40">html / css3 / typescript / ES6</li><li data-pid="qwJOxlvK">webpack + nodejs</li><li data-pid="u0Wyi60b">vue / react / angularjs / bootstrap / jQuery 甚至，越多越好。</li></ol><h2>中级前端（含初级部分）</h2><ol><li data-pid="VkQa_6tJ">Wasm + Rust</li><li data-pid="rrvmdz4q">至少熟悉 </li><ol><li data-pid="yhROy2lJ">基础库：wasm-bindgen crate, gloo crate,  futures crate</li><li data-pid="McSTmqTe">UI 库：yew.rs crate, </li><li data-pid="IuqFec6x">构建打包库：wasm-pack crate 和 trunk crate。此两个 crates 都需要掌握，因为它们面向的工程应用场景不同。简单地讲，前者面向有脸有<code>UI</code>的<code>ES Module</code>；而后者面向<code>standalone wasm-webapp</code> </li></ol><li data-pid="9uFrm-oC">electron + nodejs</li><li data-pid="aj7wO8k-">nodejs N-API + Rust</li><li data-pid="1fD3TlHz">electron N-API + Rust</li><li data-pid="ZM_IzXin">至少熟悉 node-bindgen crate</li><li data-pid="q6fCBJqX">swcpack + Rust / vite + Go — <i>这一点，我还没做到</i></li></ol><h2>高级前端（含初中级部分）</h2><ol><li data-pid="i0ihBOB1">鸿蒙 ArkTs</li><li data-pid="pbvbUqO1">ArkTs N-API + Rust</li><li data-pid="h0ggtxUQ">至少熟悉 </li><ol><li data-pid="B_AARmqF">ohos-node-bindgen crate</li><li data-pid="dQ35H6S9">Rust 条件编译 与 交叉编译 技巧，因为鸿蒙硬件类型繁杂至少跨了三款<code>CPU</code>架构</li></ol></ol><p data-pid="6j-SemjH">我不是卖课的，也是苦命前端开发一枚。仅只热心肠，想从程序员的 P 序列成长发展聊起，帮助题主解惑。谁还没遇到过成长的迷茫时刻？</p><p data-pid="Ps-AG3Kn">沿 P 序列的职业成长路径前行，就是需要我们逐步掌握在【前端】业务线上关键位置起到“画龙点睛”作用且有点难度的技术手段。</p><ol><li data-pid="7JVbqlb8">wasm 与 napi 就是前端技术栈中这样的技术点（当然，它们同时也是“新”技术 — 其实也不新了）。至于，大家是选择 c++ 20 还是 rust 来达成技术目标不重要。我个人偏向于 rust。</li><li data-pid="UtmgLBUB">至于，鸿蒙。谁让 华为 蹭了前端的热度呢。让前端参与鸿蒙 App 开发又不是我定的，不是我定的。我仅只描述，我亲身所见所经历的事实。</li></ol>',
      relationship: {
        is_thanked: false,
        is_nothelp: false,
        voting: 0,
      },
      is_labeled: true,
      visited_count: 32525,
      favorite_count: 208,
      answer_type: 'normal',
    },
    brief: '{"source": "TS", "type": "answer", "id": 3417964936}',
    attached_info:
      'CrcFCMPzgYGx4uu+jgEQBBoJNjUxNTIzNTAzIKGWla8GKF4wlQFAHUo0Ch9UU19TT1VSQ0VfTkVXQklFX1RFWFRfVFdPX1RPV0VSEgEwGAAgADoKeyJyYXciOiIifUooChNUU19TT1VSQ0VfRkVFRFJFX1Y3EgEwGAAgADoKeyJyYXciOiIifVoJMTA2MDQ4NTM4YiBjY2RkNTVhMWRmNGY0ZDJlM2Y5NzljNzllYWQyYjA3M3IKMzQxNzk2NDkzNooBCTY0Njk3MDE2NqoBCXJlY29tbWVuZMIBIGU3MDE3YTgzZmFiYmMxMTFlMWFkMTJlMmNkMTEzZGVh8gEKCAwSBk5vcm1hbPIBKAgKEiRkYzdiZGMzYi1iMWM3LTRkOGUtOWIwNS0zNDY4Y2VlMDM0M2HyAQUICxIBNYICAIgC/c7tyuYxkgIgZTcwMTdhODNmYWJiYzExMWUxYWQxMmUyY2QxMTNkZWGaAgDKAhJUaGVtZUlzb2xhdGlvblJ1bGXaAh9UU19TT1VSQ0VfTkVXQklFX1RFWFRfVFdPX1RPV0VS6AID+gILTk9STUFMX0ZMT1eKAyBlNmE1YTIxZDViMGE0MzQ5OWIxNTNlNmU5ZDEyMDNhMJoDDQoCdjAQABoFb3RoZXKoA43+AdgDAOoDHm5ld2JpZV90ZXh0X3Rvd190b3dlcl9ub19saW1pdPoDEBIMVU5LTk9XTl9NT0RFIACABACIBACSBAZOb3JtYWyaBAEzoAQAqAQAsAQAugQGbWFudWFswgQDMTcwyAQA0gQP5o6o6I2Q5bey5pu05paw2AQA8AQA+QQAAACAP7vOP4EFAAAAAAAAAACJBRbx5XLGPq0/kgUJ5q2m5L6v5Yy6mgUDZGZ0ogUDZGZ0sgUBMbkFAAAAAAAAAADQBQDgBQDoBQDwBQWSAiUKCTY1MTUyMzUwMxIKMzQxNzk2NDkzNhgEIgpJTUFHRV9URVhU',
    action_card: false,
  },

  {
    id: '30_1711164582.599',
    type: 'feed',
    offset: 30,
    verb: 'TOPIC_ACKNOWLEDGED_ANSWER',
    created_time: 1711164582,
    updated_time: 1711164582,
    target: {
      id: 3358749454,
      type: 'answer',
      url: 'https://api.zhihu.com/answers/3358749454',
      author: {
        id: '1e2844530192fca2ef2c65e0a03339e6',
        url: 'https://api.zhihu.com/people/1e2844530192fca2ef2c65e0a03339e6',
        user_type: 'people',
        url_token: 'xiao-annde-tong-qu',
        name: '冼才才',
        headline: '美文分享｜成长感悟｜文案干货',
        avatar_url:
          'https://picx.zhimg.com/50/v2-5e6ef8eec181f25c8a450f648153707c_l.jpg?source=b6762063',
        is_org: false,
        gender: 0,
        followers_count: 11141,
        is_following: false,
        is_followed: false,
      },
      created_time: 1704974337,
      updated_time: 1704974337,
      voteup_count: 17217,
      thanks_count: 16985,
      comment_count: 655,
      is_copyable: false,
      question: {
        id: 537552336,
        type: 'question',
        url: 'https://api.zhihu.com/questions/537552336',
        author: {
          id: '9201bb52a9baa43e33c5f18d4ced0eab',
          url: 'https://api.zhihu.com/people/9201bb52a9baa43e33c5f18d4ced0eab',
          user_type: 'people',
          url_token: 'meng-dong-wu-zhi-de-shao-nian-70-58',
          name: '懵懂无知的少年',
          headline: '',
          avatar_url:
            'https://pica.zhimg.com/50/v2-98b3d23720d72c0cdd3f5472dcf04fc7_l.jpg?source=b6762063',
          is_org: false,
          gender: -1,
          followers_count: 9,
          is_following: false,
          is_followed: false,
        },
        title: '你成长的私人暗器是什么？',
        created: 1655133073,
        answer_count: 0,
        follower_count: 0,
        comment_count: 20,
        bound_topic_ids: [405, 1575, 7129, 24963],
        is_following: false,
        excerpt: '',
        relationship: {
          is_author: false,
        },
        detail: '',
        question_type: 'normal',
      },
      thumbnail:
        'https://pic1.zhimg.com/50/v2-498bac40879dfc6d497931d52c563005_720w.jpg?source=b6762063',
      excerpt:
        '1、 持续禁欲。放弃短期内能够让你上瘾的东西，比如打游戏、熬夜、刷剧，这些“奶头乐”只能够给你带来短期的快乐，并不能够让你成长，甚至会带来痛苦和无聊。 而那些长期能够给你带来快乐和收益的事情，往往一开始是痛苦的、无聊的，比如读书、健身、早睡，但这些事情带来的快乐远比短期快乐反馈更多。 2、 刻意做那些让自己害怕的事。每完成一件，成长值提升5%。比如，害怕跟陌生人说话，就每天从打招呼开始做起；害怕当众说话…',
      excerpt_new:
        '1、 持续禁欲。放弃短期内能够让你上瘾的东西，比如打游戏、熬夜、刷剧，这些“奶头乐”只能够给你带来短期的快乐，并不能够让你成长，甚至会带来痛苦和无聊。 而那些长期能够给你带来快乐和收益的事情，往往一开始是痛苦的、无聊的，比如读书、健身、早睡，但这些事情带来的快乐远比短期快乐反馈更多。 2、 刻意做那些让自己害怕的事。每完成一件，成长值提升5%。比如，害怕跟陌生人说话，就每天从打招呼开始做起；害怕当众说话…',
      preview_type: 'default',
      preview_text: '',
      reshipment_settings: 'disallowed',
      content:
        '<p data-pid="P4BZqdyi"><b>1、</b></p><p data-pid="3e9wPONJ"><b>持续禁欲。</b></p><p data-pid="bXcI-7di">放弃短期内能够让你上瘾的东西，比如打游戏、熬夜、刷剧，这些“奶头乐”只能够给你带来短期的快乐，并不能够让你成长，甚至会带来痛苦和无聊。</p><p data-pid="t4IooMzB">而那些长期能够给你带来快乐和收益的事情，往往一开始是痛苦的、无聊的，比如读书、健身、早睡，但这些事情带来的快乐远比短期快乐反馈更多。</p><p data-pid="OdtPwzQQ"><b>2、</b></p><p data-pid="404z0NEq"><b>刻意做那些让自己害怕的事。</b></p><p data-pid="t2fPoDG6">每完成一件，成长值提升5%。比如，害怕跟陌生人说话，就每天从打招呼开始做起；害怕当众说话，就每次开会主动发一次言。久而久之，你会发现这段日子是你进步最快的时候。</p><p data-pid="5Tt2UGOw"><b>3、</b></p><p data-pid="dUIZcVLK"><b>写东西给他人看</b></p><p data-pid="gceMdAUG">把自己从生活中、工作中，感悟的道理，或者规则，写下来。<br/>把自己读书、与他人交谈获得的成果，写下来。<br/><br/>由于需要写下来，所以必须理顺前因后果，必须能清晰化的描述其关键环节，必须复盘来检查有没有漏洞和谬误。<br/><br/>由于需要给别人看，就需要考虑文字的连贯性，逻辑不能跳脱，以及语言的兼容性。<br/><br/>这实际上是费曼（Richard Feynman）学习法的一种进阶应用。</p><p data-pid="Vo5GzmVj"><b>4、</b></p><p data-pid="xjQHzYhH"><b>多看书，疯狂看书。</b></p><p data-pid="hc2kKC6b">历史、文学、社科、心理学、经济学、哲学等书籍都要有所涉猎。腹有诗书气自华， 且经常看书的人思维更透彻。</p><p data-pid="ljNet3A7"><b>5、</b></p><p data-pid="1jsgQCjF"><b>减少内耗。</b></p><p data-pid="36dc8T1X">把时间和精力花在有用的事情上。如果你才20多岁，30多岁，建议是少关注一些无用的人和事，多关注自己。<br/><br/>多看纪录片，少追综艺、电视剧。知道脱贫比脱单重要，会把更多的时间和精力投入到提升自己上。</p><figure data-size="normal"><img src="https://pic3.zhimg.com/v2-ca1c212ad30f45cd5bed8c1be2835984_b.jpg" data-caption="" data-size="normal" data-rawwidth="731" data-rawheight="730" data-original-token="v2-09045e9f75d6682994c539fcfefc7205" data-default-watermark-src="https://pica.zhimg.com/v2-479a1b5d0a2ffd6c3f03dff850a15490_b.jpg" class="origin_image zh-lightbox-thumb" width="731" data-original="https://pic3.zhimg.com/v2-ca1c212ad30f45cd5bed8c1be2835984_r.jpg"/></figure><p data-pid="7WedRZyX"><b>6、</b></p><p data-pid="AkVf-mdq"><b>打工千万不能入戏太深。打工的唯一目的是偷师出道，其本质就是拿钱办事。</b></p><p data-pid="88NGtuqI">所以，不要恋战，你工作的目的不是为了养老，而是为了在获得资源并熟悉脉络之后，升职或跳槽。</p><p data-pid="6bRRiS3S">你上班只是为下一步晋升做准备，不要在同事和上级的赞赏中迷失了自我，只有浑噩噩的庸人才以摸鱼为荣。</p><p data-pid="ETYbV6ig"><b>7、</b></p><p data-pid="WC9FNd1B"><b>当你把自我价值和工作挂钩时，你就把评价自己的权利，交给上位者。</b></p><p data-pid="_l0rvoSA">但工作中的评价大多主观，且为利益既得者服务，这样的动机下的评价，自然不具备参考价值，反而会让你深陷评价标签的困苦中。</p><p data-pid="nFH7jVkw"><b>8、</b></p><p data-pid="O_SvlGo2"><b>不刷朋友圈、抖音等耗费精神的软件。</b></p><p data-pid="QAIcqFn0">每天比同龄人，至少多出1小时时间，用来看书、护肤、健身，学习，理财等，充实自己，武装自己。</p><p data-pid="KsUwAR1w"><b>刷知乎看到好回答，双击屏幕，不仅能快速收藏，还能锻炼手指力量。</b></p><p data-pid="k1SQ7jVK"><b>9、</b></p><p data-pid="r7hOcVMu"><b>猛看片，不挑国家。</b></p><p data-pid="BE-MlOi8">不管是中国的，外国的，各个国家的纪录片、TED、科普片都可以去看。补充自己的知识盲区，聊天时还能有更多话题。<br/><br/>多去涉猎提升口才能力的事情，看演讲、看视频、看书籍、提升情商，成为一个受欢迎的人。</p><p data-pid="S03rP1H1">10、</p><p data-pid="BjYCcadk"><b>永远不要多管闲事。</b></p><p data-pid="TLeegdXo">心理学有个著名“100-1=0”的原则：即便你帮别人做100件好事，但只要有一件事做错了，别人就只会因为你做错的那件事而记恨你，你之前做的好事白费职场上，你热心肠帮同事完成工作，本意确实是好的，但会慢慢把这种好当做理所当然，如果你下次没有帮他，别人反而记恨你。</p><figure data-size="normal"><img src="https://pic4.zhimg.com/v2-fa485918083e64be5bec1b4680f6ef4f_b.jpg" data-caption="" data-size="normal" data-rawwidth="694" data-rawheight="692" data-original-token="v2-85c362029f9c70e9548a52f770b0ddc7" data-default-watermark-src="https://picx.zhimg.com/v2-9482cff3267c05022344a99dd03aeadf_b.jpg" class="origin_image zh-lightbox-thumb" width="694" data-original="https://pic4.zhimg.com/v2-fa485918083e64be5bec1b4680f6ef4f_r.jpg"/></figure><p data-pid="zRKmzD1g"><b>11、</b></p><p data-pid="aGRzT2a9"><b>偶尔的中断，不是放弃，而是休息。</b></p><p data-pid="w8JKPV3A">大部分人认为自控力、毅力是一切，跑步就必须每天跑，一旦中断了几天，那自己就是彻底失败了。<br/><br/>做成一件事，最重要的是养成习惯，而不是坚持、毅力、自控力这些虚无缥缈的东西，大部分人都难以拥有一个顶尖的毅力、自控力。</p><p data-pid="c8lOS_F3"><b>12、</b></p><p data-pid="_-OgqsFT"><b>人的动物性越强，越容易获得世俗的成功。</b><br/><br/>所以，在30岁之前，戒掉情绪。开启冷冰冰的理性模式。情绪很大程度上是和过去的经验行为绑定在一起的，情绪主导意味着你会做你以前习惯做的事。<br/><br/>你想通过人情、通过道德获得优势，占到便宜。结果是什么？你有做人的底线，但流氓扎你一刀，不带眨眼的。你珍惜彼此的缘分，对方把你当傻x。<br/><br/>这是一个博弈的世界，善良的人最会变成当年他最瞧不起的模样。</p><p data-pid="OTycrURp"><b>13、</b></p><p data-pid="qkmZBmYs"><b>学会复盘，定期复盘。</b><br/><br/>学会复盘，是一个人成长最快的方式。所谓复盘，就是能反观过去，反思不足，总结经验。<br/><br/>当一个人走过一段路后，能及时停下，不仅可以关注过去，找到前行的方向，还能展望未来，谋取发展先机，寻得属于自己的一套成功秘笈。</p><p data-pid="2AEEkWaf">14、</p><p data-pid="wSCpF-Nh"><b>对待底层人，能骗就骗，能瞒就瞒。绝不能透露隐私，不然你就倒霉了。</b><br/><br/>对底层人不能有好脸色，不然他们容易骑在你头上拉屎拉尿。底层人动物性浓厚，适合丛林法则，你要是表现得自己好说话，他早晚会来咬你一口。</p><p data-pid="Tf0T8_mj">15、</p><p data-pid="06IH3h9A"><b>刻意做那些让自己害怕的事。每完成一件，成长值提升5%。</b><br/><br/>比如，害怕跟陌生人说话，就每天从打招呼开始做起；害怕当众说话，就每次开会主动发一次言。久而久之，你会发现这段日子是你进步最快的时候。</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-0260530f10a572dc6a8206ea41a8f418_b.jpg" data-caption="" data-size="normal" data-rawwidth="700" data-rawheight="695" data-original-token="v2-afdb5f07e7f262996c3ef21682d9dd11" data-default-watermark-src="https://pic4.zhimg.com/v2-b21e6610205445e0afac56ff3bc2d483_b.jpg" class="origin_image zh-lightbox-thumb" width="700" data-original="https://pic1.zhimg.com/v2-0260530f10a572dc6a8206ea41a8f418_r.jpg"/></figure><p data-pid="FpxegMid">16、</p><p data-pid="AsbqYYqp"><b>墨菲定律：大数据不会骗人，当你刷到这里，点赞留下一句“我很好”，与过去和解，你将越来越顺利！❤️</b></p><p data-pid="T3HvjtKN"><b>17、</b></p><p data-pid="kLxEySxx"><b>定期扔东西。</b><br/><br/>对，你没看错，一些旧物，该扔就扔，屯着基本用不上。比如单只的袜子，破旧的数据线，没了弹力的内裤和Bra。仍完之后，你的大脑就像清空了垃圾一样流畅。</p><p data-pid="Gy2krE3Y">18、</p><p data-pid="6dzD7RBy"><b>保持身心健康。</b><br/><br/>当你工作很累的时候，你对自己的健康要求会降低。但你知不知道小区楼下，一群老头在一起都是在比谁的血压低。人总要与自己和解，人生才几年，纠结内耗占几年？</p><p data-pid="Srcmqi3K">19、</p><p data-pid="DkUhpvqh"><b>提高睡眠质量，才能高效休息，提高做事效率！提高睡眠质量的小技巧：</b><br/><br/>①睡前不进食不喝水；<br/>②睡前三件套：泡脚、冥想、听书；<br/>③裸睡。</p><p data-pid="Vm2H2ESk">20、</p><p data-pid="sFuxYSbD"><b>兜里有存款，心里有底气。  </b><br/><br/>定期存钱，是一个人最大的安全感。借用《小狗钱钱》的541原则，50%养鹅，40%用来梦想储蓄罐，10%零花钱。  <br/><br/>学会在阳光灿烂的时候给自己修屋顶，不管是存钱，还是多学一项技能，都是这种道理。</p><figure data-size="normal"><img src="https://pic3.zhimg.com/v2-09b69334d007bf6e2be3bce413737436_b.jpg" data-caption="" data-size="normal" data-rawwidth="696" data-rawheight="617" data-original-token="v2-01b128b5d56bc8f35d3daae95417bef5" data-default-watermark-src="https://pic4.zhimg.com/v2-ccd6d8c45bbd49b553efc9d3cd5a5e49_b.jpg" class="origin_image zh-lightbox-thumb" width="696" data-original="https://pic3.zhimg.com/v2-09b69334d007bf6e2be3bce413737436_r.jpg"/></figure><p data-pid="GhiemWb-">21、</p><p data-pid="38XoeUEX"><b>坚持早睡早起，颜值至少还能提升个30%。</b><br/><br/>这个「私人暗器」是真的好用，早睡早起不仅能让你精神饱满皮肤变好，还能增加人生的掌控感。<br/><br/> 22、  </p><p data-pid="TbIJEe_O"><b>事以密成，言以泄败。</b><br/><br/>事情没做成之前，不要到处嚷嚷，说什么不瘦十斤不换头像，默默地做成事情，才会让人刮目相看。<br/><br/> 23、  </p><p data-pid="MgsrpSBA"><b>一定一定要学习理财知识。</b><br/><br/>建立正确的消费观，并且开始存钱。一个奢侈品没办法让你获得身份认同，对虚荣心的满足也是暂时的，越早开始理财，你就越能跑在同龄人的前头。<br/><br/> 24、  </p><p data-pid="NTmY0GOT"><b>要想成为10%的人，就不要在意90%的人说的话</b><br/><br/>当你过度在意别人的评价时，把这句话听进心里：别人的评价都是暂时的，只有自己的经历和成绩是伴随一生的。<br/><br/> 25、  </p><p data-pid="qbZVeOkT"><b>用离职的心态打工，工作反而会顺畅很多。</b><br/><br/>该说的问题说，该推进的工作推进；不愿意的场合，不用强求自己表现。拒绝情绪浪费，干得了就干，干不了就散，不用质疑自己，不合适的不必强求。</p><figure data-size="normal"><img src="https://pic2.zhimg.com/v2-8579ab054f6d1b1ada8936e15187e6d9_b.jpg" data-caption="" data-size="normal" data-rawwidth="699" data-rawheight="699" data-original-token="v2-3c4e49b54a8f616afc6361266a3daf69" data-default-watermark-src="https://pic2.zhimg.com/v2-441176ac1a74e3085e7d567cbb04cad7_b.jpg" class="origin_image zh-lightbox-thumb" width="699" data-original="https://pic2.zhimg.com/v2-8579ab054f6d1b1ada8936e15187e6d9_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="WSw6fIeg"><b>看到自己认可的回答我总会点一个赞❤，这个赞其实并不是给答主点赞，更是给想要改变的自己点赞，同时培养了赞美的好习惯。</b></p><p data-pid="tejFNiAQ"><b>图文来源于网络，侵删！</b></p><p data-pid="gH_W-bAa"><b>Hi~ 我是</b> <a class="member_mention" href="https://www.zhihu.com/people/1e2844530192fca2ef2c65e0a03339e6" data-hash="1e2844530192fca2ef2c65e0a03339e6" data-hovercard="p$b$1e2844530192fca2ef2c65e0a03339e6">@冼才才</a><b>，一个热衷分享，热爱生活的正能量女孩，喜欢搞钱，爱自己，关注我，一起变美，一起成长，一起变有钱哟~</b></p><p data-pid="xtCOIDk_"><i>往期精彩回答：</i></p><a href="https://www.zhihu.com/question/381856658/answer/3357062032" data-draft-node="block" data-draft-type="link-card" data-image="https://pic1.zhimg.com/v2-4887cc101e8ee53a1943ff60e048ee9c_120x160.jpg" data-image-width="1440" data-image-height="1920" class="internal">感觉自己身上已经没有能量了怎么办？</a><a href="https://www.zhihu.com/question/316797926/answer/3349933169" data-draft-node="block" data-draft-type="link-card" data-image="https://pic1.zhimg.com/v2-0eaa71b67211b9eac4f2e19ef398b25a_120x160.jpg" data-image-width="1137" data-image-height="1516" class="internal">你听过三观极正的一句话是什么？</a><p></p>',
      relationship: {
        is_thanked: false,
        is_nothelp: false,
        voting: 0,
      },
      is_labeled: false,
      visited_count: 889420,
      thumbnails: [
        'https://picx.zhimg.com/50/v2-498bac40879dfc6d497931d52c563005_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-9e4f7bae7c4495bda1b03e26934bed88_720w.jpg?source=b6762063',
        'https://pic1.zhimg.com/50/v2-1b1aaa31aa6d4236e650be093c5e5986_720w.jpg?source=b6762063',
        'https://pica.zhimg.com/50/v2-274f70507c4d79f21416790d331aa22f_720w.jpg?source=b6762063',
      ],
      favorite_count: 53792,
      answer_type: 'normal',
    },
    brief: '{"source": "TS", "type": "answer", "id": 3358749454}',
    attached_info:
      'CswECJrymKy4hf2mrgEQBBoJNjQwNzU4NDc5IIGw/6wGKMGGATCPBUAeSigKE1RTX1NPVVJDRV9GRUVEUkVfVjcSATAYACAAOgp7InJhdyI6IiJ9Wgg4MTczNzkzOGIgY2NkZDU1YTFkZjRmNGQyZTNmOTc5Yzc5ZWFkMmIwNzNyCjMzNTg3NDk0NTSKAQk1Mzc1NTIzMzaqAQlyZWNvbW1lbmTCASAxZTI4NDQ1MzAxOTJmY2EyZWYyYzY1ZTBhMDMzMzllNvIBCggMEgZOb3JtYWzyASgIChIkMDZjOGY1NDEtOGYxMy00N2ViLWE5NjUtMzZjMGZmNThhMjFm8gEFCAsSATaCAgCIAp/W7crmMZICIDFlMjg0NDUzMDE5MmZjYTJlZjJjNjVlMGEwMzMzOWU2mgIA2gITVFNfU09VUkNFX0ZFRURSRV9WN+gCAvoCC05PUk1BTF9GTE9XigMgMjQ1ZTFiODY1NGE5NGY0ODg2NTMyNjBkNzc3MGRkYzSaAw0KAnYwEAAaBW90aGVyqAPMpDbYAwDqAwlmZWVkcmVfdjf6AxASDFVOS05PV05fTU9ERSAAgAQAiAQAkgQGTm9ybWFsmgQBMqAEAKgEALAEALoEBm1hbnVhbMIEAzE2MMgEANIED+aOqOiNkOW3suabtOaWsNgEAPAEAPkEAAAAQFKTnT+BBQAAAAAAAAAAiQXQ6n5BlAGwP5IFCeatpuS+r+WMupoFA2RmdKIFA2RmdLIFATG5BQAAAAAAAAAA0AUA4AUA6AUA8AUGkgIlCgk2NDA3NTg0NzkSCjMzNTg3NDk0NTQYBCIKSU1BR0VfVEVYVA==',
    action_card: false,
  },
  {
    id: '31_1711164582.497',
    type: 'feed',
    offset: 31,
    verb: 'TOPIC_ACKNOWLEDGED_ANSWER',
    created_time: 1711164582,
    updated_time: 1711164582,
    target: {
      id: 3264541552,
      type: 'answer',
      url: 'https://api.zhihu.com/answers/3264541552',
      author: {
        id: 'eacac4635e025f09fd6a2d0a8a64199b',
        url: 'https://api.zhihu.com/people/eacac4635e025f09fd6a2d0a8a64199b',
        user_type: 'people',
        url_token: 'qiu-xie-piao-ling-31',
        name: '浅浅同学',
        headline: '公众号【浅浅同学】，家居家电，产品测评，数码科技，优质文案',
        avatar_url:
          'https://picx.zhimg.com/50/v2-df7ea3f53a161d9ba6e7e76e92081f00_l.jpg?source=b6762063',
        is_org: false,
        gender: 0,
        followers_count: 30281,
        is_following: false,
        is_followed: false,
      },
      created_time: 1698246760,
      updated_time: 1698246760,
      voteup_count: 8448,
      thanks_count: 22952,
      comment_count: 350,
      is_copyable: false,
      question: {
        id: 582806167,
        type: 'question',
        url: 'https://api.zhihu.com/questions/582806167',
        author: {
          id: '9123329afb2d0675f5d390f01ccd6757',
          url: 'https://api.zhihu.com/people/9123329afb2d0675f5d390f01ccd6757',
          user_type: 'people',
          url_token: '94-36-90-69-87',
          name: '核平使者',
          headline: '',
          avatar_url:
            'https://picx.zhimg.com/50/v2-d11fea1c49f1c7349ad2799cfe47a135_l.jpg?source=b6762063',
          is_org: false,
          gender: 1,
          followers_count: 1,
          is_following: false,
          is_followed: false,
        },
        title: '人民日报出过那些金句？',
        created: 1675848562,
        answer_count: 0,
        follower_count: 0,
        comment_count: 4,
        bound_topic_ids: [9014, 11405, 184684],
        is_following: false,
        excerpt: '',
        relationship: {
          is_author: false,
        },
        detail: '',
        question_type: 'normal',
      },
      thumbnail:
        'https://picx.zhimg.com/50/v2-1d275bf405ede94d8b85f8b75491d0b4_720w.jpg?source=b6762063',
      excerpt:
        '1、 一个人如果不看书，那么他的价值观就会由他身边的人决定， 因为他没有别的输入途径，只能模仿身边的人或者慢慢被环境所改变， 周围流行什么，就跟随什么，永远找不到自己。 ——《人民日报》 2、 你背不下来的书，总有人能背下来，你做不出来的题， 总有人能做出来，你愿意拖到明天的事，总有人今天努力做完， 那么不好意思，你想去的学校也只能别人去了，你想过的人生也只能别人过了。 ——《人民日报》 3、 世界上什么都不…',
      excerpt_new:
        '1、 一个人如果不看书，那么他的价值观就会由他身边的人决定， 因为他没有别的输入途径，只能模仿身边的人或者慢慢被环境所改变， 周围流行什么，就跟随什么，永远找不到自己。 ——《人民日报》 2、 你背不下来的书，总有人能背下来，你做不出来的题， 总有人能做出来，你愿意拖到明天的事，总有人今天努力做完， 那么不好意思，你想去的学校也只能别人去了，你想过的人生也只能别人过了。 ——《人民日报》 3、 世界上什么都不…',
      preview_type: 'default',
      preview_text: '',
      reshipment_settings: 'disallowed',
      content:
        '<p data-pid="1kr8y4jh">1、</p><p data-pid="GI39QaYG">一个人如果不看书，那么他的价值观就会由他身边的人决定，</p><p data-pid="8lBrCrm-">因为他没有别的输入途径，只能模仿身边的人或者慢慢被环境所改变，</p><p data-pid="0OSeUe5j">周围流行什么，就跟随什么，永远找不到自己。</p><p data-pid="9utEL48k">——《人民日报》  </p><p class="ztext-empty-paragraph"><br/></p><p data-pid="H2QjAjr4">2、</p><p data-pid="D79lNb1S">你背不下来的书，总有人能背下来，你做不出来的题，</p><p data-pid="GccNCxt5">总有人能做出来，你愿意拖到明天的事，总有人今天努力做完，</p><p data-pid="YfnFz7dz">那么不好意思，你想去的学校也只能别人去了，你想过的人生也只能别人过了。 </p><p data-pid="KqmY5J05">——《人民日报》 </p><p class="ztext-empty-paragraph"><br/></p><p data-pid="hrmM5Lp7">3、</p><p data-pid="CcksL2Kj">世界上什么都不公平，唯独时间最公平，如果你整天这样，不读书不运动，不节制消费，</p><p data-pid="yBOheKvQ">不自律，无兴趣无爱好，不读书不运动，无目标无期望，生活是不会变好的，努力不是为了得到更多，而是为了人生有更多的选择。  </p><p data-pid="mQ0drYH5">努力的意义：大概就是当好运来临的时候，你觉得你值得。</p><p data-pid="AtrvTCbL">所以，从现在开始努力，一切还来得及，别在最好的年纪，辜负了最好的自己。  </p><p data-pid="Zra_SZya">——《人民日报》</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="8-eMk5Gv">4、</p><p data-pid="Qdgdns8y">顺境时学会清空自己，逆境时学会提醒自己，向内清醒，向外谦逊，美好才会与你不期而遇。</p><p data-pid="f0k3uO2U">——《人民日报》</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="76u_rWf8">5、</p><p data-pid="GrkHaPmM">那些读过的书，都会在未来铺就你脚下的路；</p><p data-pid="NpKp7q88">学过的每一点知识，都会在某一天，以意想不到的方式回馈到你身上。</p><p data-pid="3jt2wmgJ">——《人民日报》</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-f085d930895b6e1f07fea01f0a6b8b96_b.jpg" data-rawwidth="1080" data-rawheight="1794" data-size="normal" data-original-token="v2-f085d930895b6e1f07fea01f0a6b8b96" data-default-watermark-src="https://pic2.zhimg.com/v2-52bfab5a735b93891e2a45f51a95b9ab_b.jpg" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic1.zhimg.com/v2-f085d930895b6e1f07fea01f0a6b8b96_r.jpg"/></figure><p data-pid="6rhHqMKv">6、</p><p data-pid="kMA0Dw12">千万不要混，你一个月五千，一年六万，20岁混到30岁，十年就混了六十来万，存款估计不到20%。  </p><p data-pid="ULyp_wZP">混一天和努力一天看不到任何差别，但是两三个月以后你会看到气场不同，三五年会看到人生道路不同。  </p><p data-pid="dTg-B15_">别在该努力的年纪选择安逸时光，别到时候家里人需要你的时候你一无所有。  </p><p data-pid="itxi7bHy">走自己的道路，为了梦想去努力，即使有人会亏待你，时间也不会亏待你。</p><p data-pid="viwSVAKo">——《人民日报》</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="y-IQjbFS">7、</p><p data-pid="wWp_EcfZ">我渐渐把“这种事为什么要发生在我身上”的想法替换成了“这种事想教会我什么”，然后发现身边的一切都改变了。  </p><p data-pid="PpHYrFhF">——《人民日报》  </p><p class="ztext-empty-paragraph"><br/></p><p data-pid="_qUcSOyo">8、</p><p data-pid="hcMpIqb0">你所有的压力，都是因为你太想要。  你所有的痛苦，都是因为你太较真了。  </p><p data-pid="Lb6zSr-m">有些事不能尽你心意，就是提醒你该转弯了。  </p><p data-pid="wpteJmUn">如果事事都如意，那就不叫生活了，所以睡前原谅一切，醒来不问过往，珍惜所有的不期而遇，看淡所有的不辞而别。  </p><p data-pid="Yvke8Red">——《人民日报》 </p><p class="ztext-empty-paragraph"><br/></p><p data-pid="Vav6hAEu"> 9、</p><p data-pid="Q_UT-oAw">人这辈子千万不要马虎两件事：  </p><p data-pid="TAA0ylT0">一是找对爱人，二是找对事业。  </p><p data-pid="fMjqw5i_">因为太阳升起的时候要投身事业，太阳落山时要与爱人相拥的。  </p><p data-pid="a_1Drpw0">我们终其一生，都在寻找两样东西：  </p><p data-pid="uSbL7H58">一是价值感，二是归属感。  </p><p data-pid="r_62UEya">价值感来源于肯定，归属感来源于被爱。 </p><p data-pid="ZBIGXwNR">——《人民日报》</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="clgmzhTy">10、</p><p data-pid="TanV9elk">你一定要狠下心来去努力，努力变成一个很厉害的人，没有必要让别人知道你的计划，退出不合适的圈子，不合适的人，断开不如意的感情，</p><p data-pid="gqPypWCp">告别过去，做真实的自己。</p><p data-pid="TFOCeVcs">记住一句话，未来都是惊喜，你生来本应为高山并非草芥。 </p><p data-pid="4fmjUdRG">——《人民日报》</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-4b5d9d453ef589b8d4bd12abc7c4c81e_b.jpg" data-rawwidth="1080" data-rawheight="1672" data-size="normal" data-original-token="v2-4b5d9d453ef589b8d4bd12abc7c4c81e" data-default-watermark-src="https://picx.zhimg.com/v2-7a8b93915258c98df981f2f37c83ca7f_b.jpg" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic1.zhimg.com/v2-4b5d9d453ef589b8d4bd12abc7c4c81e_r.jpg"/></figure><p data-pid="78HzoIPq">11、</p><p data-pid="yPlOI2Tb">我从未见过，一个早起、勤奋、谨慎、诚实的人，抱怨命运不好的。  </p><p data-pid="8ILHZ0vz">最完美的状态，不是你从不失误，而是你从没放弃成长。  </p><p data-pid="8nD53QK-">没人能把你变得越来越好，时间和精力只是陪衬，支撑你变得越来越好的，是你坚强的意志、修养、品行、以及不断的反思和修正。  </p><p data-pid="sUyg84Hm">很喜欢的一段话：“人生最好的贵人就是努力向上的自己。”  </p><p data-pid="CHwdeasq">生活不会辜负一个一直在努力的人。  </p><p data-pid="ERnsGSq-">愿我们都能在各自坚持的道路上，遇见更好的自己。  </p><p data-pid="zgn-ZMFD">——《人民日报》</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="_V6o_njz">12、</p><p data-pid="W8qyigSr">世界上没有一份工作不辛苦，也没有一处人事不复杂，无论当下你在经历什么，都要调整好心态继续前行，继续努力。</p><p data-pid="D3lgEM48">总有人嫌你不好，也总有人觉得你哪里都好，爱你的人自然爱你，不爱你的人说再多也无用，所以，活在当下，及时行乐最为重要。 </p><p data-pid="NqOD2Gvw">始终相信上天安排我到哪里，都是为了去做自己该做的事情，遇见该遇见的人，熬得住无人问津的寂寞，才配得上诗和远方。  </p><p data-pid="aIPN3z9-">——《人民日报》  </p><p class="ztext-empty-paragraph"><br/></p><p data-pid="1QMpEuXE">13、</p><p data-pid="r38l2Bmz">最好的药物是忙碌，最好的治愈是读书，最好的爱情是自爱，最好的自爱是自律。  </p><p data-pid="TMm3OpGK">——《人民日报》</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="3YhOP_oJ">14、</p><p data-pid="FWO1aRJ2">人生本来就有无数种可能，有少年得志，也有大器晚成。多一点耐心，认真做好自己，踏实前行，所有美好定会不期而遇。</p><p data-pid="MpriOCxL">——《人民日报》</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="Iubh_5Jj">15、</p><p data-pid="gVxDnqQJ">生活是活给自己看的，你有多大成色，世界才会给你多大脸色。 </p><p data-pid="PRVQjN7b">——《人民日报》</p><figure data-size="normal"><img src="https://pic4.zhimg.com/v2-0aa4ca25df1d2cb2dd02b4b532795157_b.jpg" data-rawwidth="1080" data-rawheight="1512" data-size="normal" data-original-token="v2-0aa4ca25df1d2cb2dd02b4b532795157" data-default-watermark-src="https://pic2.zhimg.com/v2-7de52c8fe3aab82a0d6f04709f45f96b_b.jpg" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic4.zhimg.com/v2-0aa4ca25df1d2cb2dd02b4b532795157_r.jpg"/></figure><p data-pid="08bpbnKa">16、</p><p data-pid="SToDmZGX">以前我觉得成绩不重要。清华 、北大、复旦、交大 ，只能代表学生时代的成就。</p><p data-pid="Jp3mPbjh">后来我发现，努力是种习惯，它会贯穿终生。</p><p data-pid="-yBoICk9">——《人民日报》</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="YuXMlKBn">17、</p><p data-pid="ECB4UEGJ">我们总喜欢拿顺其自然敷衍人生道路上的荆棘坎坷，却很少承认，真正的顺其自然，</p><p data-pid="iD-WjOIO">其实是竭尽所能之后的不强求，而非两手一摊的不作为。</p><p data-pid="MO-qSURq">——《人民日报》</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="TRVw08Cg">18、</p><p data-pid="lNBG2EiW">没有任何一朵花，一开始便是花。也没有任何一朵花，直到最后也仍是花。</p><p data-pid="RZr8sNKV">——《人民日报》</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="gMD9KBNq">19、</p><p data-pid="u2oUOihx">只有敢于走别人没有走过的路，才能收获别样的风景。</p><p data-pid="QHQjO2PJ">勇于探索不怕失败，敢于攻坚不怕风险，善于突破不怕挫折。</p><p data-pid="NzRf1AiV">——《人民日报》</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="1GvprGQm">20、</p><p data-pid="DxEZ-qCp">人生这条路很长，未来如星辰大海般璀璨，不必踟躇与过去的半亩方塘。</p><p data-pid="Fsp6b2YT">那些所谓的遗憾，可能是一种成长；那些曾受过的伤，终会化作照亮前路的光。</p><p data-pid="CH0D_lt3">——《人民日报》</p><figure data-size="normal"><img src="https://pic3.zhimg.com/v2-d3aecda213d47658d8553e69286795f2_b.jpg" data-rawwidth="1080" data-rawheight="1728" data-size="normal" data-original-token="v2-d3aecda213d47658d8553e69286795f2" data-default-watermark-src="https://pic3.zhimg.com/v2-a292f3a653258918d8cc13515d3f2060_b.jpg" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic3.zhimg.com/v2-d3aecda213d47658d8553e69286795f2_r.jpg"/></figure><p data-pid="rGRrVlTH">21、</p><p data-pid="sii-iOFZ">在崩溃中隐忍，在撕扯中前行，这才是成年人真正的强大。</p><p data-pid="6hXhhU5i">——《人民日报》</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="UJ4vSUat">22、</p><p data-pid="MM2xP387">从没有白费的努力，也没有碰巧的成功，只要认真对待生活，终有一天，你的每一份努力，都将绚烂成花。</p><p data-pid="SVAvu0bP">——《人民日报》</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="SxxX1a-3">23、</p><p data-pid="XVWk1IVp">真正有光的人，压的时间越久，深度越深，绽放的光芒才可以灿烂。</p><p data-pid="p0tsl1DK">——《人民日报》</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="DAt--nth">24、</p><p data-pid="olVXMWBu">每一个人都有苦楚，很多事都有难处，但也正是这些不顺利在逼迫着我们不断进步。</p><p data-pid="awLBYR3p">风雪的摧残，成就了雪莲花的惊艳。物如此，人亦如是。唯有沐浴风雨，才能不惧风雨。</p><p data-pid="8Uvw2ISy">饭要自己吃，路要自己走，成长路上的难关也要靠自己闯过去。一个人真正的强大，都是从治愈自己开始的。</p><p data-pid="SuRWrjdH">——《人民日报》</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="9uzyz4RS">25、</p><p data-pid="LNA5QnPE">先努力优秀，再大方拥有。眼界不够，看到的都是问题；格局不够，纠结的都是鸡毛蒜皮。</p><p data-pid="Wqm3Be2-">愿你熬过万丈孤苦，藏下星辰大海。半山腰总是最拥挤的，你得去山顶看看。</p><p data-pid="ucHw2D7t">——《人民日报》</p><figure data-size="normal"><img src="https://picx.zhimg.com/v2-a5606f264076cb2d386c636207162da1_b.jpg" data-rawwidth="1080" data-rawheight="1630" data-size="normal" data-original-token="v2-a5606f264076cb2d386c636207162da1" data-default-watermark-src="https://pic3.zhimg.com/v2-391368838bace3f843fde548e5561532_b.jpg" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://picx.zhimg.com/v2-a5606f264076cb2d386c636207162da1_r.jpg"/></figure><p data-pid="qGrnn4ty">26、</p><p data-pid="XasTrWYT">春日初藏，夏阳初长。</p><p data-pid="sV20ciHs">繁花未落尽，荠麦正青青。</p><p data-pid="EIGgVBMf">若说春日是浪漫与温柔，那么夏天便是天真与热忱。</p><p data-pid="yBXlbXM-">——《人民日报》</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="_TbaKe29">27、</p><p data-pid="O9ucLyfV">夜色难免黑凉，前行必有曙光。 </p><p data-pid="9-YoJojn">一些看似不起眼的点滴努力，</p><p data-pid="445wNlxP">会在日后开花结果，会在某一刻，突然让你看到坚持的意义。</p><p data-pid="Cs44HiSe">——《人民日报》</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="bmF7xo79">28、</p><p data-pid="IcZJnIc-">当你能量越来越高的时候，你开始真正理解每一个人，没有好坏，没有对错，</p><p data-pid="R6sVy6fv">只是他处在不同的能量频率 ，呈现出了不同的状态，做了不同的选择。</p><p data-pid="zOSV2FMJ">言慢者贵，性柔者富，德厚者旺。</p><p data-pid="hMaAIpCE">请允许自己做自己 ，也允许别人做别人，你会活得更洒脱。</p><p data-pid="H8FijI7B">——《人民日报》</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="Lkw_mv5V">29、</p><p data-pid="w8hNU6lB">那些成长的磨砺、奋斗的汗水，都将化作你的底气和格局，</p><p data-pid="32IxPLBy">累积成你向上攀爬的阶梯，支撑着你看到更高处的风景。</p><p data-pid="1JvayQqN">——《人民日报》</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="ByeHSkJz">30、</p><p data-pid="_A3bfQ6s">成才之路不一定会创造人生奇迹，但一定要有奋发向上的轨迹；</p><p data-pid="746gbDL_">成才之路不一定非要跑得最快，但一定需要屡败屡战的韧性；</p><p data-pid="z_J6sHQe">成才之路不一定拥有鲜花掌声，但应进一寸有一寸的欢喜。</p><p data-pid="hIpWdOaH">——《人民日报》</p><figure data-size="normal"><img src="https://pic3.zhimg.com/v2-3be4c3cb635c19b7e57b4ae3e95480a4_b.jpg" data-rawwidth="1080" data-rawheight="1512" data-size="normal" data-original-token="v2-3be4c3cb635c19b7e57b4ae3e95480a4" data-default-watermark-src="https://pic4.zhimg.com/v2-b736550652e464e35965055e4a720b1d_b.jpg" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic3.zhimg.com/v2-3be4c3cb635c19b7e57b4ae3e95480a4_r.jpg"/></figure><p data-pid="NIhOSX4Y">❤️感谢你在千千万万个回答中点开了我的，如果觉得这些句子不错，记得点赞、收藏呀～  </p><p data-pid="FIbAgkW2">图片和文案均来自网络，侵删~</p><p data-pid="tYcNGsbp">嗨，我是浅浅，全网6W粉的自由撰稿人，致力于分享优质文案｜女性成长｜自律精进｜阅读写作｜学习干货～</p><p data-pid="sqFxjEZN">欢迎关注我 <a class="member_mention" href="https://www.zhihu.com/people/eacac4635e025f09fd6a2d0a8a64199b" data-hash="eacac4635e025f09fd6a2d0a8a64199b" data-hovercard="p$b$eacac4635e025f09fd6a2d0a8a64199b">@浅浅同学</a> ，我们一起精进自我，成为更好的自己。</p>',
      relationship: {
        is_thanked: false,
        is_nothelp: false,
        voting: 0,
      },
      is_labeled: false,
      visited_count: 1122191,
      thumbnails: [
        'https://picx.zhimg.com/50/v2-1d275bf405ede94d8b85f8b75491d0b4_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-09b85035e884634dd803de27153ba8e9_720w.jpg?source=b6762063',
        'https://pica.zhimg.com/50/v2-d736767abc75551385686f31622d76fc_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-a6f8e74326b038b0fbbd2fc2548c223d_720w.jpg?source=b6762063',
        'https://pic1.zhimg.com/50/v2-cb1a72ff4663d9382c0aa2712c76f0d0_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-6da4d4b58c328c0f0599a75c1c12b9bc_720w.jpg?source=b6762063',
      ],
      favorite_count: 41079,
      answer_type: 'normal',
    },
    brief: '{"source": "TS", "type": "answer", "id": 3264541552}',
    attached_info:
      'CoEFCJrymKy4hf2mrgEQBBoJNjIzNjMyNTE1IOjg5KkGKIBCMN4CQB9KMAobVFNfU09VUkNFX0JBU0lDX0lORk9fUkVDQUxMEgEwGAAgADoKeyJyYXciOiIifVoIOTE3OTM5MzhiIGNjZGQ1NWExZGY0ZjRkMmUzZjk3OWM3OWVhZDJiMDczcgozMjY0NTQxNTUyigEJNTgyODA2MTY3qgEJcmVjb21tZW5kwgEgZWFjYWM0NjM1ZTAyNWYwOWZkNmEyZDBhOGE2NDE5OWLyAQoIDBIGTm9ybWFs8gEoCAoSJDI2MmM2MTMyLTNkMzktNGU2NC1hY2U5LTBhMWRlYTgwZmQzNvIBBQgLEgE2ggIAiAKf1u3K5jGSAiBlYWNhYzQ2MzVlMDI1ZjA5ZmQ2YTJkMGE4YTY0MTk5YpoCAMoCG09sZENvbnRlbnRSZWR1Y2U1V2VpZ2h0UnVsZdoCG1RTX1NPVVJDRV9CQVNJQ19JTkZPX1JFQ0FMTOgCAvoCC05PUk1BTF9GTE9XigMgMjQ1ZTFiODY1NGE5NGY0ODg2NTMyNjBkNzc3MGRkYzSaAw0KAnYwEAAaBW90aGVyqAOPv0TYAwDqAxFiYXNpY19pbmZvX3JlY2FsbPoDEBIMVU5LTk9XTl9NT0RFIACABACIBACSBAZOb3JtYWyaBAEyoAQAqAQAsAQAugQGbWFudWFswgQDMTYwyAQA0gQP5o6o6I2Q5bey5pu05paw2AQA8AQA+QQAAACAMXKYP4EFAAAAAAAAAACJBdDqfkGUAbA/kgUJ5q2m5L6v5Yy6mgUDZGZ0ogUDZGZ0sgUBMbkFAAAAAAAAAADQBQDgBQDoBQDwBQaSAiUKCTYyMzYzMjUxNRIKMzI2NDU0MTU1MhgEIgpJTUFHRV9URVhU',
    action_card: false,
  },
  {
    id: '32_1711164582.219',
    type: 'feed',
    offset: 32,
    verb: 'TOPIC_ACKNOWLEDGED_ANSWER',
    created_time: 1711164582,
    updated_time: 1711164582,
    target: {
      id: 3438707929,
      type: 'answer',
      url: 'https://api.zhihu.com/answers/3438707929',
      author: {
        id: 'c9da3a57e8ae3605f0efc072f8364632',
        url: 'https://api.zhihu.com/people/c9da3a57e8ae3605f0efc072f8364632',
        user_type: 'people',
        url_token: 'you-guan-niu-nai',
        name: '有罐牛奶',
        headline: '',
        avatar_url:
          'https://pic1.zhimg.com/50/v2-d9bedeb465777c90d7bf4d19ee950541_l.jpg?source=b6762063',
        is_org: false,
        gender: -1,
        followers_count: 9958,
        is_following: false,
        is_followed: false,
      },
      created_time: 1711015986,
      updated_time: 1711015986,
      voteup_count: 1729,
      thanks_count: 70,
      comment_count: 221,
      is_copyable: false,
      question: {
        id: 649088469,
        type: 'question',
        url: 'https://api.zhihu.com/questions/649088469',
        author: {
          id: 'f2f99f25ff7db669cb9e38bb5c5bc484',
          url: 'https://api.zhihu.com/people/f2f99f25ff7db669cb9e38bb5c5bc484',
          user_type: 'people',
          url_token: '18101729033-19',
          name: '喵大人',
          headline: '个人理财经理',
          avatar_url:
            'https://pic1.zhimg.com/50/v2-6a2417a809f4bf6967262aee489be9af_l.jpg?source=b6762063',
          is_org: false,
          gender: 0,
          followers_count: 10955,
          is_following: false,
          is_followed: false,
        },
        title: '为啥学霸反而很少被霸凌？',
        created: 1710748828,
        answer_count: 0,
        follower_count: 0,
        comment_count: 13,
        bound_topic_ids: [34095, 42777],
        is_following: false,
        excerpt: '',
        relationship: {
          is_author: false,
        },
        detail: '',
        question_type: 'normal',
      },
      excerpt:
        '我一个同学，学习优异，高考时当过县城榜眼。 有一次他打篮球被人欺负了，因为近视眼，没认出欺负他的是谁。 他回去告诉他爸，他爸告诉村长，村长带了两卡车父老，沿街把体育馆附近的小流氓都揍了一遍。 然后根据小流氓的口供，锁定嫌疑人，当场征服。 当时有位草莽小俊杰不服气，被直接丢下护城河，喝了半小时的排污水。 我闻讯到场的时候，已经临近尾声，这位俊杰跪在路口，自打耳光到村长和派出所长喝完酒回来为止，差不多晚…',
      excerpt_new:
        '我一个同学，学习优异，高考时当过县城榜眼。 有一次他打篮球被人欺负了，因为近视眼，没认出欺负他的是谁。 他回去告诉他爸，他爸告诉村长，村长带了两卡车父老，沿街把体育馆附近的小流氓都揍了一遍。 然后根据小流氓的口供，锁定嫌疑人，当场征服。 当时有位草莽小俊杰不服气，被直接丢下护城河，喝了半小时的排污水。 我闻讯到场的时候，已经临近尾声，这位俊杰跪在路口，自打耳光到村长和派出所长喝完酒回来为止，差不多晚…',
      preview_type: 'default',
      preview_text: '',
      reshipment_settings: 'disallowed',
      content:
        '<p data-pid="8CJk_ZmL">我一个同学，学习优异，高考时当过县城榜眼。</p><p data-pid="ooMKIM34">有一次他打篮球被人欺负了，因为近视眼，没认出欺负他的是谁。</p><p data-pid="Cq2h4sp5">他回去告诉他爸，他爸告诉村长，村长带了两卡车父老，沿街把体育馆附近的小流氓都揍了一遍。</p><p data-pid="3XS60CHE">然后根据小流氓的口供，锁定嫌疑人，当场征服。</p><p data-pid="sYtyyhCr">当时有位草莽小俊杰不服气，被直接丢下护城河，喝了半小时的排污水。</p><p data-pid="h0w_AmED">我闻讯到场的时候，已经临近尾声，这位俊杰跪在路口，自打耳光到村长和派出所长喝完酒回来为止，差不多晚上八点。</p>',
      relationship: {
        is_thanked: false,
        is_nothelp: false,
        voting: 0,
      },
      is_labeled: false,
      visited_count: 301056,
      favorite_count: 71,
      answer_type: 'normal',
    },
    brief: '{"source": "TS", "type": "answer", "id": 3438707929}',
    attached_info:
      'CvAECJrymKy4hf2mrgEQBBoJNjU1MjkzMjYxILKQ8K8GKMENMN0BQCBKKAoTVFNfU09VUkNFX0ZFRURSRV9WNxIBMBgAIAA6CnsicmF3IjoiIn1aCTEwNjUxOTU2NWIgY2NkZDU1YTFkZjRmNGQyZTNmOTc5Yzc5ZWFkMmIwNzNyCjM0Mzg3MDc5MjmKAQk2NDkwODg0NjmqAQlyZWNvbW1lbmTCASBjOWRhM2E1N2U4YWUzNjA1ZjBlZmMwNzJmODM2NDYzMvIBCggMEgZOb3JtYWzyASgIChIkOTc2YmFmM2MtNWFlZS00N2Y3LTk3MjctN2ViNmJmZGIzMThi8gEFCAsSATaCAgCIAp/W7crmMZICIGM5ZGEzYTU3ZThhZTM2MDVmMGVmYzA3MmY4MzY0NjMymgIAygIhR2VuZXJhbFRpbWVsaW5lc3NSZWR1Y2VXZWlnaHRSdWxl2gITVFNfU09VUkNFX0ZFRURSRV9WN+gCAvoCC05PUk1BTF9GTE9XigMgMjQ1ZTFiODY1NGE5NGY0ODg2NTMyNjBkNzc3MGRkYzSaAw0KAnYwEAAaBW90aGVyqAOAsBLYAwDqAwlmZWVkcmVfdjf6AxASDFVOS05PV05fTU9ERSAAgAQAiAQAkgQGTm9ybWFsmgQBMqAEAKgEALAEALoEBm1hbnVhbMIEAzE2MMgEANIED+aOqOiNkOW3suabtOaWsNgEAPAEAPkEAAAAYGh1tj+BBQAAAAAAAAAAiQXQ6n5BlAGwP5IFCeatpuS+r+WMupoFA2RmdKIFA2RmdLIFATG5BQAAAAAAAAAA0AUA4AUA6AUA8AUGkgIlCgk2NTUyOTMyNjESCjM0Mzg3MDc5MjkYBCIKSU1BR0VfVEVYVA==',
    action_card: false,
  },
  {
    id: '33_1711164582.65',
    type: 'feed',
    offset: 33,
    verb: 'TOPIC_ACKNOWLEDGED_ANSWER',
    created_time: 1711164582,
    updated_time: 1711164582,
    target: {
      id: 3404118713,
      type: 'answer',
      url: 'https://api.zhihu.com/answers/3404118713',
      author: {
        id: '217fb3e06eceee8835f1a8f743cdacd6',
        url: 'https://api.zhihu.com/people/217fb3e06eceee8835f1a8f743cdacd6',
        user_type: 'people',
        url_token: 'kingofzoo',
        name: '高山昙',
        headline: '且听龙吟',
        avatar_url:
          'https://picx.zhimg.com/50/7c674b886dc276058d640e0fa64c8089_l.jpg?source=b6762063',
        is_org: false,
        gender: 1,
        followers_count: 69399,
        is_following: false,
        is_followed: false,
      },
      created_time: 1708514355,
      updated_time: 1711070791,
      voteup_count: 2679,
      thanks_count: 402,
      comment_count: 448,
      is_copyable: false,
      question: {
        id: 643962948,
        type: 'question',
        url: 'https://api.zhihu.com/questions/643962948',
        author: {
          id: '05ba767c5997d9557c70a2ad72b9c1bf',
          url: 'https://api.zhihu.com/people/05ba767c5997d9557c70a2ad72b9c1bf',
          user_type: 'people',
          url_token: 'leritec',
          name: 'LERITEC莱立得',
          headline: '莱立得，让拳击更智能\n全网同名',
          avatar_url:
            'https://pic1.zhimg.com/50/v2-567ff1e5a8723a20f037334196db1b97_l.jpg?source=b6762063',
          is_org: false,
          gender: 0,
          followers_count: 8,
          is_following: false,
          is_followed: false,
        },
        title: '为什么贾玲瘦了以后，肉变得那么紧致，也没有纹?',
        created: 1707617592,
        answer_count: 0,
        follower_count: 0,
        comment_count: 43,
        bound_topic_ids: [658, 974, 15545, 28596, 167410],
        is_following: false,
        excerpt: '',
        relationship: {
          is_author: false,
        },
        detail: '',
        question_type: 'normal',
      },
      thumbnail:
        'https://pica.zhimg.com/50/v2-242836c09023c20e8100d4af77a2c39a_720w.jpg?source=b6762063',
      excerpt:
        '都快紧致成风干肉效果了差不多得了 励志一下 骗骗自己就行了 别再骗大家了 贾老师一下子老了十多岁好吧 从胖乎乎的女生一下子变成了苍老的辛苦阿姨 这种暴击式减肥对身体有巨大的伤害 除了像贾玲这种搏一搏能进账好几亿的 普通人根本不应该学这套 我有个同学本来180cm/190斤 要说也就是小胖 结果跟老婆狂虐了半年 体重倒是下去了 但整个年龄面貌从红润饱满的30多岁小伙子 一下变成了干巴枯黄的王石 看上去就像是大病初愈一样 这…',
      excerpt_new:
        '都快紧致成风干肉效果了差不多得了 励志一下 骗骗自己就行了 别再骗大家了 贾老师一下子老了十多岁好吧 从胖乎乎的女生一下子变成了苍老的辛苦阿姨 这种暴击式减肥对身体有巨大的伤害 除了像贾玲这种搏一搏能进账好几亿的 普通人根本不应该学这套 我有个同学本来180cm/190斤 要说也就是小胖 结果跟老婆狂虐了半年 体重倒是下去了 但整个年龄面貌从红润饱满的30多岁小伙子 一下变成了干巴枯黄的王石 看上去就像是大病初愈一样 这…',
      preview_type: 'default',
      preview_text: '',
      reshipment_settings: 'disallowed',
      content:
        '<h2>都快紧致成风干肉效果了</h2><p data-pid="pI3cY8tv">差不多得了</p><p data-pid="RyGy_FWa">励志一下 骗骗自己就行了</p><p data-pid="ongYgRIg">别再骗大家了</p><p data-pid="KzRA5n0l">贾老师一下子老了十多岁好吧</p><p data-pid="Ep7kFeOU">从胖乎乎的女生一下子变成了苍老的辛苦阿姨</p><figure data-size="normal"><img src="https://picx.zhimg.com/v2-ea0d64f06c02b46ecead79c17b0fdf61_b.jpg" data-rawwidth="1080" data-rawheight="1538" data-size="normal" data-original-token="v2-9dd682dfff64872ba59c708bf1baf67e" data-default-watermark-src="https://pica.zhimg.com/v2-9ca929575df55d308e7fbfefa3ef1daa_b.jpg" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://picx.zhimg.com/v2-ea0d64f06c02b46ecead79c17b0fdf61_r.jpg"/></figure><p data-pid="bKGbjPPm">这种暴击式减肥对身体有巨大的伤害</p><p data-pid="AmGCMTSf">除了像贾玲这种搏一搏能进账好几亿的</p><p data-pid="NxcoopMq">普通人根本不应该学这套</p><p data-pid="uitNxE2j">我有个同学本来180cm/190斤</p><p data-pid="dX42Rq3t">要说也就是小胖</p><p data-pid="u5f_6L2P">结果跟老婆狂虐了半年</p><p data-pid="DD9WpqRw">体重倒是下去了</p><p data-pid="YIhBEASo">但整个年龄面貌从红润饱满的30多岁小伙子</p><p data-pid="gSXNnjta">一下变成了干巴枯黄的王石</p><p data-pid="qN0nABGZ">看上去就像是大病初愈一样</p><p data-pid="aRb69caY">这种激进式减肥绝对严重伤害身体</p><figure data-size="normal"><img src="https://picx.zhimg.com/v2-59ca92492f304fabc0895dfc87b6cc65_b.jpg" data-rawwidth="685" data-rawheight="727" data-size="normal" data-original-token="v2-19a72675916ebe243b9cdf6f39d0cd7b" data-default-watermark-src="https://pic4.zhimg.com/v2-7a94d2df8fb53c6eb9ab89d622a9602d_b.jpg" class="origin_image zh-lightbox-thumb" width="685" data-original="https://picx.zhimg.com/v2-59ca92492f304fabc0895dfc87b6cc65_r.jpg"/></figure><p></p>',
      relationship: {
        is_thanked: false,
        is_nothelp: false,
        voting: 0,
      },
      is_labeled: false,
      visited_count: 1089042,
      thumbnails: [
        'https://picx.zhimg.com/50/v2-242836c09023c20e8100d4af77a2c39a_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-c86c06015a55d04c1b33e3d54917e3a5_720w.jpg?source=b6762063',
      ],
      favorite_count: 174,
      answer_type: 'normal',
    },
    brief: '{"source": "TS", "type": "answer", "id": 3404118713}',
    attached_info:
      'CqIFCJrymKy4hf2mrgEQBBoJNjQ5MDA3NTIwILO4164GKPcUMMADQCFKNAofVFNfU09VUkNFX05FV0JJRV9URVhUX1RXT19UT1dFUhIBMBgAIAA6CnsicmF3IjoiIn1KKAoTVFNfU09VUkNFX0ZFRURSRV9WNxIBMBgAIAA6CnsicmF3IjoiIn1aCTEwNTM4MDY3NWIgY2NkZDU1YTFkZjRmNGQyZTNmOTc5Yzc5ZWFkMmIwNzNyCjM0MDQxMTg3MTOKAQk2NDM5NjI5NDiqAQlyZWNvbW1lbmTCASAyMTdmYjNlMDZlY2VlZTg4MzVmMWE4Zjc0M2NkYWNkNvIBCggMEgZOb3JtYWzyASgIChIkMDg3MmNkNWEtYTY2Yy00OGU1LThjZTgtNDc5ZDlhYTM0ZGQ48gEFCAsSATaCAgCIAp/W7crmMZICIDIxN2ZiM2UwNmVjZWVlODgzNWYxYThmNzQzY2RhY2Q2mgIA2gIfVFNfU09VUkNFX05FV0JJRV9URVhUX1RXT19UT1dFUugCAvoCC05PUk1BTF9GTE9XigMgMjQ1ZTFiODY1NGE5NGY0ODg2NTMyNjBkNzc3MGRkYzSaAw0KAnYwEAAaBW90aGVyqAOSvELYAwDqAx5uZXdiaWVfdGV4dF90b3dfdG93ZXJfbm9fbGltaXT6AxASDFVOS05PV05fTU9ERSAAgAQAiAQAkgQGTm9ybWFsmgQBMqAEAKgEALAEALoEBm1hbnVhbMIEAjMwyAQA0gQP5o6o6I2Q5bey5pu05paw2AQA8AQA+QQAAACA/7m4P4EFAAAAAAAAAACJBdDqfkGUAbA/kgUJ5q2m5L6v5Yy6mgUDZGZ0ogUDZGZ0sgUBMbkFAAAAAAAAAADQBQDgBQDoBQDwBQaSAiUKCTY0OTAwNzUyMBIKMzQwNDExODcxMxgEIgpJTUFHRV9URVhU',
    action_card: false,
  },
  {
    id: '34_1711164582.866',
    type: 'feed',
    offset: 34,
    verb: 'TOPIC_ACKNOWLEDGED_ANSWER',
    created_time: 1711164582,
    updated_time: 1711164582,
    target: {
      id: 3438038128,
      type: 'answer',
      url: 'https://api.zhihu.com/answers/3438038128',
      author: {
        id: 'def0a9963aa7f89bc096c21d5bf2f942',
        url: 'https://api.zhihu.com/people/def0a9963aa7f89bc096c21d5bf2f942',
        user_type: 'people',
        url_token: 'renen',
        name: '佚名用户007',
        headline: '我只是看看',
        avatar_url:
          'https://pic1.zhimg.com/50/v2-3a3dce054ca2f1ba610ebb2637a98dac_l.jpg?source=b6762063',
        is_org: false,
        gender: 1,
        followers_count: 85,
        is_following: false,
        is_followed: false,
      },
      created_time: 1710983631,
      updated_time: 1710983631,
      voteup_count: 3527,
      thanks_count: 232,
      comment_count: 399,
      is_copyable: true,
      question: {
        id: 41771935,
        type: 'question',
        url: 'https://api.zhihu.com/questions/41771935',
        author: {
          id: '',
          url: '',
          user_type: 'people',
          url_token: '',
          name: '匿名用户',
          headline: '',
          avatar_url:
            'https://picx.zhimg.com/v2-d41c2ceaed8f51999522f903672a521f_l.jpg?source=b6762063',
          is_org: false,
          gender: -1,
          followers_count: 0,
          is_following: false,
          is_followed: false,
        },
        title: '5星级酒店是如何杜绝黄色服务的？',
        created: 1458881781,
        answer_count: 0,
        follower_count: 0,
        comment_count: 6,
        bound_topic_ids: [45129, 109661],
        is_following: false,
        excerpt: '',
        relationship: {
          is_author: false,
        },
        detail: '',
        question_type: 'normal',
      },
      excerpt:
        '去年和朋友去杭州，在西湖边香格里拉住，上楼刚出电梯就看见了一位身材高挑的妹子，忍不住多看了两眼，刷了房卡正要关门时，妹子推开门，问能进来抽根烟吗，进来后就说能提供服务，多人也可以，要是对她不满意，可以帮叫别人出来，学生、模特之类的，隔天要早起就婉拒了，加了个微信，看朋友圈很平常，自拍也很保守，外贸公司上班。',
      excerpt_new:
        '去年和朋友去杭州，在西湖边香格里拉住，上楼刚出电梯就看见了一位身材高挑的妹子，忍不住多看了两眼，刷了房卡正要关门时，妹子推开门，问能进来抽根烟吗，进来后就说能提供服务，多人也可以，要是对她不满意，可以帮叫别人出来，学生、模特之类的，隔天要早起就婉拒了，加了个微信，看朋友圈很平常，自拍也很保守，外贸公司上班。',
      preview_type: 'default',
      preview_text: '',
      reshipment_settings: 'allowed',
      content:
        '<p data-pid="1zBLBsJd">去年和朋友去杭州，在西湖边香格里拉住，上楼刚出电梯就看见了一位身材高挑的妹子，忍不住多看了两眼，刷了房卡正要关门时，妹子推开门，问能进来抽根烟吗，进来后就说能提供服务，多人也可以，要是对她不满意，可以帮叫别人出来，学生、模特之类的，隔天要早起就婉拒了，加了个微信，看朋友圈很平常，自拍也很保守，外贸公司上班。</p>',
      relationship: {
        is_thanked: false,
        is_nothelp: false,
        voting: 0,
      },
      is_labeled: false,
      visited_count: 1038670,
      favorite_count: 655,
      answer_type: 'normal',
    },
    brief: '{"source": "TS", "type": "answer", "id": 3438038128}',
    attached_info:
      'Cs0FCJrymKy4hf2mrgEQBBoJNjU1MTcxNjIwIM+T7q8GKMcbMI8DQCJKKgofVFNfU09VUkNFX0hPVF9DUk9TU19ORVdfQ09OVEVOVBIBMBgAIAA6AEo0CilUU19TT1VSQ0VfSE9UX0NST1NTX1JFQUxfVElNRV9ORVdfQ09OVEVOVBIBMBgAIAA6AEooChNUU19TT1VSQ0VfRkVFRFJFX1Y3EgEwGAAgADoKeyJyYXciOiIifVoHODkxNjE0MWIgY2NkZDU1YTFkZjRmNGQyZTNmOTc5Yzc5ZWFkMmIwNzNyCjM0MzgwMzgxMjiKAQg0MTc3MTkzNaoBCXJlY29tbWVuZMIBIGRlZjBhOTk2M2FhN2Y4OWJjMDk2YzIxZDViZjJmOTQy8gEKCAwSBk5vcm1hbPIBKAgKEiQwNjU3MzZiNi0zZGY2LTQ0ZTAtYmFhNC1kYmU1MDZjOGFiNWXyAQUICxIBNoICAIgCn9btyuYxkgIgZGVmMGE5OTYzYWE3Zjg5YmMwOTZjMjFkNWJmMmY5NDKaAgDaAh9UU19TT1VSQ0VfSE9UX0NST1NTX05FV19DT05URU5U6AIC+gILTk9STUFMX0ZMT1eKAyAyNDVlMWI4NjU0YTk0ZjQ4ODY1MzI2MGQ3NzcwZGRjNJoDDQoCdjAQABoFb3RoZXKoA86yP9gDAOoDH2hvdENyb3NzTWVyZ2VOZXdDb250ZW50UmVjYWxsZXL6AxASDFVOS05PV05fTU9ERSAAgAQAiAQAkgQGTm9ybWFsmgQBMqAEAKgEALAEALoEBm1hbnVhbMIEAzE2MMgEANIED+aOqOiNkOW3suabtOaWsNgEAPAEAPkEAAAAIFE9rj+BBQAAAAAAAAAAiQXQ6n5BlAGwP5IFCeatpuS+r+WMupoFA2RmdKIFA2RmdLIFATG5BQAAAAAAAAAA0AUA4AUA6AUA8AUGkgIlCgk2NTUxNzE2MjASCjM0MzgwMzgxMjgYBCIKSU1BR0VfVEVYVA==',
    action_card: false,
  },
  {
    id: '35_1711164582.212',
    type: 'feed',
    offset: 35,
    verb: 'TOPIC_ACKNOWLEDGED_ANSWER',
    created_time: 1711164582,
    updated_time: 1711164582,
    target: {
      id: 3413771595,
      type: 'answer',
      url: 'https://api.zhihu.com/answers/3413771595',
      author: {
        id: 'f6b3b21a7103693a94168df303f2b2db',
        url: 'https://api.zhihu.com/people/f6b3b21a7103693a94168df303f2b2db',
        user_type: 'people',
        url_token: 'fasteng',
        name: '墨昔',
        headline: '逝者如斯夫，不舍昼夜',
        avatar_url:
          'https://picx.zhimg.com/50/v2-bbb715508e86f97e6e2b1b3af0699279_l.jpg?source=b6762063',
        is_org: false,
        gender: -1,
        followers_count: 479,
        is_following: false,
        is_followed: false,
      },
      created_time: 1709195953,
      updated_time: 1709195953,
      voteup_count: 1152,
      thanks_count: 1524,
      comment_count: 261,
      is_copyable: false,
      question: {
        id: 643117526,
        type: 'question',
        url: 'https://api.zhihu.com/questions/643117526',
        author: {
          id: '969b2f2346e603ed801209d12482c3e5',
          url: 'https://api.zhihu.com/people/969b2f2346e603ed801209d12482c3e5',
          user_type: 'people',
          url_token: 'zhi-wen-72-75',
          name: '知问',
          headline: '',
          avatar_url:
            'https://picx.zhimg.com/50/v2-abed1a8c04700ba7d72b45195223e0ff_l.jpg?source=b6762063',
          is_org: false,
          gender: -1,
          followers_count: 1,
          is_following: false,
          is_followed: false,
        },
        title: '有什么副业，不求挣很多?',
        created: 1707139665,
        answer_count: 0,
        follower_count: 0,
        comment_count: 0,
        bound_topic_ids: [12705, 68370, 137247],
        is_following: false,
        excerpt: '',
        relationship: {
          is_author: false,
        },
        detail: '',
        question_type: 'normal',
      },
      excerpt:
        '1、准备一部手机，一张电话卡，注册一个抖音、一个小红书、一个视频号。 2、选择中医、易经、心学等任一国学相关赛道，取一个与赛道匹配的四字以内昵称，头像、资料、背景做相应修改。 3、下载微软语音，选择文化解说类音库，语速调整到0.85-0.9区间备用。 4、使用赛道关键词在抖音搜索，选择近一周、最高点赞量、一分钟以内的视频，复制链接到轻抖小程序提取文案。 5、修改文案中的错别字，部分语句略作优化修改，粘贴到微软语…',
      excerpt_new:
        '1、准备一部手机，一张电话卡，注册一个抖音、一个小红书、一个视频号。 2、选择中医、易经、心学等任一国学相关赛道，取一个与赛道匹配的四字以内昵称，头像、资料、背景做相应修改。 3、下载微软语音，选择文化解说类音库，语速调整到0.85-0.9区间备用。 4、使用赛道关键词在抖音搜索，选择近一周、最高点赞量、一分钟以内的视频，复制链接到轻抖小程序提取文案。 5、修改文案中的错别字，部分语句略作优化修改，粘贴到微软语…',
      preview_type: 'default',
      preview_text: '',
      reshipment_settings: 'disallowed',
      content:
        '<p data-pid="z7lSPHZx">1、准备一部手机，一张电话卡，注册一个抖音、一个小红书、一个视频号。</p><p data-pid="HrOpXp6m">2、选择中医、易经、心学等任一国学相关赛道，取一个与赛道匹配的四字以内昵称，头像、资料、背景做相应修改。</p><p data-pid="7mMELlAd">3、下载微软语音，选择文化解说类音库，语速调整到0.85-0.9区间备用。</p><p data-pid="qaPCuNn5">4、使用赛道关键词在抖音搜索，选择近一周、最高点赞量、一分钟以内的视频，复制链接到轻抖小程序提取文案。</p><p data-pid="UOWkUYJz">5、修改文案中的错别字，部分语句略作优化修改，粘贴到微软语音，合成成音频下载。</p><p data-pid="pHUwdMVR">6、打开剪映，导入一张4:3的横屏图片，图片透明度调为100%，背景设置为黑色。</p><p data-pid="rMHDfpDg">7、导入5中合成语音，匹配字幕，把字幕调为居中，选择合适的字体、颜色，并添加动画效果。</p><p data-pid="QQwEI0_u">8、根据赛道属性添加合适的贴纸，贴纸放在左上角。</p><p data-pid="S8pg2pfy">9、如果文案来自于某位历史人物或书籍，则添加该人物图片放于右侧，书籍名置于文字下方。</p><p data-pid="OzIogzPH">10、添加合适的音乐后将视频导出，分别发布到抖音、小红书、视频号，添加赛道热门话题。</p><p data-pid="eoUw_K62">11、坚持按照以上步骤制作视频起号，内容选择得当，一到两周可获得一个几千粉的账号。</p><p data-pid="0s-Q2eD-">12、3000粉以上开通抖音橱窗、小红书买手，视频号小店，如带货书籍，则在视频中间穿插书籍图片并挂车。</p>',
      relationship: {
        is_thanked: false,
        is_nothelp: false,
        voting: 0,
      },
      is_labeled: false,
      visited_count: 174676,
      favorite_count: 7446,
      answer_type: 'normal',
    },
    brief: '{"source": "TS", "type": "answer", "id": 3413771595}',
    attached_info:
      'Co4FCJrymKy4hf2mrgEQBBoJNjUwNzYwODYxILGFga8GKIAJMIUCQCNKMAobVFNfU09VUkNFX0JBU0lDX0lORk9fUkVDQUxMEgEwGAAgADoKeyJyYXciOiIifUooChNUU19TT1VSQ0VfRkVFRFJFX1Y3EgEwGAAgADoKeyJyYXciOiIifVoJMTA1MTkyNjM4YiBjY2RkNTVhMWRmNGY0ZDJlM2Y5NzljNzllYWQyYjA3M3IKMzQxMzc3MTU5NYoBCTY0MzExNzUyNqoBCXJlY29tbWVuZMIBIGY2YjNiMjFhNzEwMzY5M2E5NDE2OGRmMzAzZjJiMmRi8gEKCAwSBk5vcm1hbPIBKAgKEiRmNjczYWZiZC03ODg2LTQ4MGUtYjEyMS1lMjVmNjkzZjIyYjPyAQUICxIBNoICAIgCn9btyuYxkgIgZjZiM2IyMWE3MTAzNjkzYTk0MTY4ZGYzMDNmMmIyZGKaAgDaAhtUU19TT1VSQ0VfQkFTSUNfSU5GT19SRUNBTEzoAgL6AgtOT1JNQUxfRkxPV4oDIDI0NWUxYjg2NTRhOTRmNDg4NjUzMjYwZDc3NzBkZGM0mgMNCgJ2MBAAGgVvdGhlcqgD1NQK2AMA6gMRYmFzaWNfaW5mb19yZWNhbGz6AxASDFVOS05PV05fTU9ERSAAgAQAiAQAkgQGTm9ybWFsmgQBMqAEAKgEALAEALoEBm1hbnVhbMIEAzE2MMgEANIED+aOqOiNkOW3suabtOaWsNgEAPAEAPkEAAAAoPM7rz+BBQAAAAAAAAAAiQXQ6n5BlAGwP5IFCeatpuS+r+WMupoFA2RmdKIFA2RmdLIFATG5BQAAAAAAAAAA0AUA4AUA6AUA8AUGkgIlCgk2NTA3NjA4NjESCjM0MTM3NzE1OTUYBCIKSU1BR0VfVEVYVA==',
    action_card: false,
  },

  {
    id: '36_1711164583.557',
    type: 'feed',
    offset: 36,
    verb: 'TOPIC_ACKNOWLEDGED_ARTICLE',
    created_time: 1711164583,
    updated_time: 1711164583,
    target: {
      id: 688409210,
      type: 'article',
      url: 'https://api.zhihu.com/articles/688409210',
      author: {
        id: 'da30398b2fcdc1ecf31e65257615fba2',
        url: 'https://api.zhihu.com/people/da30398b2fcdc1ecf31e65257615fba2',
        user_type: 'people',
        url_token: '45-95-89-33',
        name: '知知',
        headline: '',
        avatar_url:
          'https://picx.zhimg.com/50/v2-d03f60fadb06249fc9d75a05dfae9151_l.jpg?source=b6762063',
        is_org: false,
        gender: 0,
        followers_count: 13,
        is_following: false,
        is_followed: false,
      },
      title: 'Vue组件之间的通讯',
      comment_permission: 'all',
      created: 1711075208,
      updated: 1711075208,
      voteup_count: 0,
      voting: 0,
      comment_count: 0,
      linkbox: {
        category: '',
        pic: '',
        title: '',
        url: '',
      },
      excerpt:
        '前言在月初时，我开始了我的Vue3学习之旅，作为一名大三学生，刚接触到它就能明显感觉到它带给我的便利，相比于之前在学校学的Html+css+js三个文件开发前端页面，显然Vue给我带来了十分不一样的体验。最近我新学习到了Vue中组件之间如何进行通讯，这个问题，在下述文章中我会和大家一起去解决。 一.Vue组件通讯Vue的组件通讯归纳总结为以下三种：1.父子组件通讯 2.子父组件通讯 3.两个任意组件进行通讯下面我会举出案例，一个简…',
      excerpt_new:
        '前言在月初时，我开始了我的Vue3学习之旅，作为一名大三学生，刚接触到它就能明显感觉到它带给我的便利，相比于之前在学校学的Html+css+js三个文件开发前端页面，显然Vue给我带来了十分不一样的体验。最近我新学习到了Vue中组件之间如何进行通讯，这个问题，在下述文章中我会和大家一起去解决。 一.Vue组件通讯Vue的组件通讯归纳总结为以下三种：1.父子组件通讯 2.子父组件通讯 3.两个任意组件进行通讯下面我会举出案例，一个简…',
      preview_type: 'default',
      preview_text: '',
      content:
        '<h2><b>前言</b></h2><p data-pid="K1GAnfLF">在月初时，我开始了我的Vue3学习之旅，作为一名大三学生，刚接触到它就能明显感觉到它带给我的便利，相比于之前在学校学的Html+css+js三个文件开发前端页面，显然Vue给我带来了十分不一样的体验。最近我新学习到了Vue中组件之间如何进行通讯，这个问题，在下述文章中我会和大家一起去解决。</p><h3><b>一.Vue组件通讯</b></h3><ul><li data-pid="ui1IcchD">Vue的组件通讯归纳总结为以下三种：1.父子组件通讯 2.子父组件通讯 3.两个任意组件进行通讯</li></ul><p data-pid="VavPukUp">下面我会举出案例，一个简单的todo_list,只是我们将它分为头部head 和 内容部分body，然后我们会将head和body分别拆成单独的组件，来探究一下它们之间是如何进行通讯传值的。</p><p data-pid="jpKdpmVG">总体代码：</p><p data-pid="fqhxwsZt">App.vue:</p><div class="highlight"><pre><code class="language-text">vue复制代码&lt;template&gt;\n  &lt;div&gt;\n    &lt;div class=&#34;head&#34;&gt;\n      &lt;input type=&#34;text&#34; name=&#34;&#34; v-model=&#34;message&#34;&gt;\n      &lt;button type=&#34;button&#34; @click=&#34;submit&#34;&gt;确定&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;div class=&#34;body&#34;&gt;\n      &lt;ul&gt;\n        &lt;li v-for=&#34;(item, index) in lists&#34; :key=&#34;index&#34;&gt;{{ item }}&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n​\n&lt;script&gt;\n​\nexport default {\n  data() {\n    return {\n      lists: [&#39;html&#39;],\n      message: &#39;&#39;\n    }\n  },\n  methods: {\n    submit() {\n      if (!this.message) return\n      this.lists.push(this.message);\n      this.message = &#39;&#39;\n    }\n  }\n}\n&lt;/script&gt;</code></pre></div><p data-pid="b0RKrU5K">上述代码可以实现下述效果：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-30b0d5aad78056d63fb8aa70c56109a4_b.jpg" data-caption="" data-size="normal" data-rawwidth="561" data-rawheight="373" data-original-token="v2-0020752596cc3e1973fd08e32178428d" class="origin_image zh-lightbox-thumb" width="561" data-original="https://pic1.zhimg.com/v2-30b0d5aad78056d63fb8aa70c56109a4_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="7TFarIs0">下面我们将body部分分离成一个组件，如下：</p><div class="highlight"><pre><code class="language-xml">xml复制代码<span class="nt">&lt;template&gt;</span>\n  <span class="nt">&lt;div&gt;</span>\n    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#34;head&#34;</span><span class="nt">&gt;</span>\n      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&#34;text&#34;</span> <span class="na">name=</span><span class="s">&#34;&#34;</span> <span class="na">v-model=</span><span class="s">&#34;message&#34;</span><span class="nt">&gt;</span>\n      <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&#34;button&#34;</span> <span class="err">@</span><span class="na">click=</span><span class="s">&#34;submit&#34;</span><span class="nt">&gt;</span>确定<span class="nt">&lt;/button&gt;</span>\n    <span class="nt">&lt;/div&gt;</span>\n    <span class="nt">&lt;List</span> <span class="nt">/&gt;</span> \n  <span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;/template&gt;</span></code></pre></div><p data-pid="jUffxNeW"><b>List.vue</b></p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic4.zhimg.com/v2-10dd7f88611bc4add3b1629f55123e0b_b.jpg" data-caption="" data-size="normal" data-rawwidth="751" data-rawheight="464" data-original-token="v2-e53029d5571b4d53b9df754ef44c0371" class="origin_image zh-lightbox-thumb" width="751" data-original="https://pic4.zhimg.com/v2-10dd7f88611bc4add3b1629f55123e0b_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="-SiUVp5N">我们增加了一个button按钮，等下用来对父组件的值进行修改。以上内容（上述代码目前还不能传值，我们还没有进行设置）就是我们下面要讲的第一种组件通讯方式-父子组件通讯。</p><h3><b>1.父子组件通讯</b></h3><ul><li data-pid="oriC4H7B">父组件v-bind绑定属性用于传值，子组件props接受 (props是单向数据流，子组件只能用，不建议修改，改了父组件也无法感应到)</li></ul><p data-pid="H5f_UI1V">代码实现：</p><p data-pid="z5Fcyy6r"><b>APP.vue修改</b>（JS中进行注册这里就不列出来了）：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic2.zhimg.com/v2-c681b27b8acc72e78dcc0b8b98654d33_b.jpg" data-caption="" data-size="normal" data-rawwidth="696" data-rawheight="246" data-original-token="v2-08da93b77111217a1f6afb09e265b729" class="origin_image zh-lightbox-thumb" width="696" data-original="https://pic2.zhimg.com/v2-c681b27b8acc72e78dcc0b8b98654d33_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="7jB9Pxae"><b>List.vue修改：</b></p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic2.zhimg.com/v2-6adc9f2132200d3faf183729a0301927_b.jpg" data-caption="" data-size="normal" data-rawwidth="785" data-rawheight="577" data-original-token="v2-c7a60407209b1fffc96e348336ce8beb" class="origin_image zh-lightbox-thumb" width="785" data-original="https://pic2.zhimg.com/v2-6adc9f2132200d3faf183729a0301927_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="Q4MJnqWt">效果显然依旧能实现：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic2.zhimg.com/v2-25472bbe26aa73fe3a5bcb849ef9fb7d_b.jpg" data-caption="" data-size="normal" data-rawwidth="501" data-rawheight="356" data-original-token="v2-db6ee78b175479f917b62ce4a9ba1f78" class="origin_image zh-lightbox-thumb" width="501" data-original="https://pic2.zhimg.com/v2-25472bbe26aa73fe3a5bcb849ef9fb7d_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="37-V7sOi">！！！为什么点击修改props却能对父组件内容进行修改？刚刚不是说props是单向数据流吗。</p><ul><li data-pid="wffDZfg2">其实，在Vue中，确实是不建议在子组件内直接修改props的值。这是因为props是父组件向子组件传递数据的一种方式，它是单向数据流的，即数据流动的方向是从父组件到子组件。子组件可以通过props接收父组件传递的数据，但应当将这些数据视为不可变的。当子组件试图直接修改props的值时，实际上是在试图违反这种单向数据流。这样的修改虽然在技术上是可行的，但是会导致以下问题：</li></ul><ol><li data-pid="HkVy6_B1"><b>可维护性差：</b> 在Vue中，我们更倾向于让数据的变化在组件内部进行，而不是由外部传递。如果子组件修改了props，那么代码维护起来就会更加困难，因为我们期望props是只读的。</li><li data-pid="sloq5eL-"><b>追踪问题困难：</b> 如果子组件直接修改了props，那么可能会引起一些不可预测的行为，因为父组件无法感应到这种变化。这样的问题可能会很难追踪和调试</li></ol><p class="ztext-empty-paragraph"><br/></p><p data-pid="6ESAeQFw">接着我们将head分离出去，成为一个组件。也就是实现第二种Vue组件通讯-子父组件通讯</p><p data-pid="4ivFJau-">Head.vue:</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic2.zhimg.com/v2-2d2ef5f73a50a054e41f3143fb359d85_b.jpg" data-caption="" data-size="normal" data-rawwidth="881" data-rawheight="485" data-original-token="v2-9d4acbc5a00c68d8011b9eac1bafd6ac" class="origin_image zh-lightbox-thumb" width="881" data-original="https://pic2.zhimg.com/v2-2d2ef5f73a50a054e41f3143fb359d85_r.jpg"/></figure><p data-pid="s0g8TmTY"> App.vue:</p><div class="highlight"><pre><code class="language-xml">xml复制代码<span class="nt">&lt;template&gt;</span>\n  <span class="nt">&lt;div&gt;</span>\n    <span class="nt">&lt;Head</span> <span class="nt">/&gt;</span>\n    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#34;body&#34;</span><span class="nt">&gt;</span>\n      <span class="nt">&lt;ul&gt;</span>\n        <span class="nt">&lt;li</span> <span class="na">v-for=</span><span class="s">&#34;(item,index) in lists&#34;</span> <span class="na">:key=</span><span class="s">&#34;index&#34;</span><span class="nt">&gt;</span>{{ item }}<span class="nt">&lt;/li&gt;</span>\n      <span class="nt">&lt;/ul&gt;</span>\n    <span class="nt">&lt;/div&gt;</span>\n  <span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;/template&gt;</span>\n​\n<span class="nt">&lt;script&gt;</span>\nimport Head from &#39;@/components/body2/Head.vue&#39;\nexport default {\n  components: {\n    Head\n  },\n  data() {\n    return {\n      lists: [&#39;html&#39;],\n    }\n  },\n  methods:{\n    \n  }\n}\n<span class="nt">&lt;/script&gt;</span>\n​\n<span class="nt">&lt;style</span> <span class="na">lang=</span><span class="s">&#34;less&#34;</span><span class="nt">&gt;&lt;/style&gt;</span></code></pre></div><p data-pid="ks_cSR3m">上述代码显然不能将数据传递过去，这次我们换成子组件给父组件传值，如下：</p><h3><b>2.子父组件通讯</b></h3><ul><li data-pid="cZtj1dMW">父组件订阅一个事件，子组件通过$emit发布该事件且携带事件参数，让父组件的订阅生效。</li></ul><p data-pid="6t-qY4Wg"><i>如何实现？</i></p><p data-pid="b3GE8CIY">父组件订阅一个事件： </p><figure data-size="normal"><img src="https://pica.zhimg.com/v2-754108eb675a17e342a4e0212c3188c2_b.jpg" data-caption="" data-size="normal" data-rawwidth="812" data-rawheight="259" data-original-token="v2-d030ef157b202a80aa2ff2d8c105323c" class="origin_image zh-lightbox-thumb" width="812" data-original="https://pica.zhimg.com/v2-754108eb675a17e342a4e0212c3188c2_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic2.zhimg.com/v2-135f2a85c86ddbcc252a9230ebda4e8d_b.jpg" data-caption="" data-size="normal" data-rawwidth="694" data-rawheight="440" data-original-token="v2-08343aaea9cf5e0bdad62cc636e23ce1" class="origin_image zh-lightbox-thumb" width="694" data-original="https://pic2.zhimg.com/v2-135f2a85c86ddbcc252a9230ebda4e8d_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="W9YUmyum">子组件通过$emit发布该事件：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic4.zhimg.com/v2-aac30967f5167eb123a953b295fc520b_b.jpg" data-caption="" data-size="normal" data-rawwidth="537" data-rawheight="222" data-original-token="v2-c3fcc54110cd40756e765c5cec66d775" class="origin_image zh-lightbox-thumb" width="537" data-original="https://pic4.zhimg.com/v2-aac30967f5167eb123a953b295fc520b_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="W2Kroeyo">当点击提交时触发submit函数运行，<code>this.$emit(&#39;add&#39;,this.message)</code>会触发父组件的add事件也就是父组件中handle函数的执行，并传递一个参数this.message给父组件作为val的值。</p><p data-pid="SVrWYffg">我们仍然能够实现之前的功能，如下：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pica.zhimg.com/v2-e854d062b5eb88ece9dccdd65611ae42_b.jpg" data-caption="" data-size="normal" data-rawwidth="504" data-rawheight="356" data-original-token="v2-9f55be06862856302eb35f68799c94e5" class="origin_image zh-lightbox-thumb" width="504" data-original="https://pica.zhimg.com/v2-e854d062b5eb88ece9dccdd65611ae42_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="ydTOLGSF">你是否想过一个问题呢，如今我们实现了父子组件通讯和子父组件通讯，我们是否可以完成任意组件的通讯呢，按理来说是可以的，不过只是需要套很多层就是了，例如有两个组件可能是某个组件的孙子组件，我们通过一层一层关系的传递，子传父，父传子，最终可以实现这两个组件的通讯。显然，可以实现，但是不太现实。层次少还好说，一旦多起来，就会很麻烦。那么Vue中是否存在可以实现两个任意组件的通讯呢。答案是可以的，这就是我们接下来要讲的第三种组件通讯方式- 任意两个组件之间实现通讯。</p><h3><b>3. 两个任意组件的通讯</b></h3><ul><li data-pid="5oCYM-8V">在Vue中，两个任意组件进行通讯可以通过使用状态管理工具或者事件总线来实现。</li></ul><p data-pid="gNfVaqT8">3.1 通过状态管理工具Vuex</p><p data-pid="Yzx6aWFg">在使用Vuex之前，我们需要先安装它。在项目文件的集成终端中输入</p><div class="highlight"><pre><code class="language-lua"><span class="n">lua</span>\n<span class="err">复制代码</span><span class="n">npm</span> <span class="n">install</span> <span class="n">vuex</span><span class="err">@</span><span class="n">next</span> <span class="c1">--save</span></code></pre></div><p data-pid="Z9IUP1y-">使用Yarn的输入下面内容</p><div class="highlight"><pre><code class="language-sql"><span class="k">sql</span>\n<span class="err">复制代码</span><span class="n">yarn</span> <span class="k">add</span> <span class="n">vuex</span><span class="o">@</span><span class="k">next</span> <span class="c1">--save</span></code></pre></div><p data-pid="VzBVlvw9">安装完Vuex后，让我们来创建一个 store。创建过程直截了当——仅需要提供一个初始 state 对象和一些 mutation：</p><div class="highlight"><pre><code class="language-php"><span class="nx">php复制代码import</span> <span class="p">{</span> <span class="nx">createApp</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>\n<span class="nx">import</span> <span class="p">{</span> <span class="nx">createStore</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;vuex&#39;</span>\n<span class="nx">​</span>\n<span class="c1">// 创建一个新的 store 实例\n</span><span class="c1"></span><span class="k">const</span> <span class="no">store</span> <span class="o">=</span> <span class="nx">createStore</span><span class="p">({</span>\n  <span class="nx">state</span> <span class="p">()</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="p">{</span>\n      <span class="nx">count</span><span class="o">:</span> <span class="mi">0</span>\n    <span class="p">}</span>\n  <span class="p">},</span>\n  <span class="nx">mutations</span><span class="o">:</span> <span class="p">{</span>\n    <span class="nx">increment</span> <span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">state</span><span class="o">.</span><span class="nx">count</span><span class="o">++</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n<span class="p">})</span>\n<span class="nx">​</span>\n<span class="nx">​</span>\n<span class="c1">// 下面部分我们在main.js中直接调用use即可app.use(store)\n</span><span class="c1"></span><span class="k">const</span> <span class="no">app</span> <span class="o">=</span> <span class="nx">createApp</span><span class="p">({</span> <span class="cm">/* 根组件 */</span> <span class="p">})</span>\n<span class="nx">​</span>\n<span class="c1">// 将 store 实例作为插件安装\n</span><span class="c1"></span><span class="nx">app</span><span class="o">.</span><span class="k">use</span><span class="p">(</span><span class="nx">store</span><span class="p">)</span>\n</code></pre></div><p data-pid="_KTJAN6j">现在，你可以通过 <code>store.state</code> 来获取状态对象，并通过 <code>store.commit</code> 方法触发状态变更：</p><div class="highlight"><pre><code class="language-arduino"><span class="n">arduino复制代码store</span><span class="p">.</span><span class="n">commit</span><span class="p">(</span><span class="err">&#39;</span><span class="n">increment</span><span class="err">&#39;</span><span class="p">)</span>\n<span class="err">​</span>\n<span class="n">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="n">store</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">count</span><span class="p">)</span> <span class="c1">// -&gt; 1\n</span></code></pre></div><p data-pid="Hb5KInsR">在 Vue 组件中， 可以通过 <code>this.$store</code> 访问store实例。现在我们可以从组件的方法提交一个变更：</p><div class="highlight"><pre><code class="language-js"><span class="nx">javascript复制代码methods</span><span class="o">:</span> <span class="p">{</span>\n  <span class="nx">increment</span><span class="p">()</span> <span class="p">{</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;increment&#39;</span><span class="p">)</span>\n    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="p">)</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div><blockquote data-pid="7Q1WTGzE">再次强调，我们通过提交 mutation 的方式，而非直接改变 <code>store.state.count</code>，是因为我们想要更明确地追踪到状态的变化。这个简单的约定能够让你的意图更加明显，这样你在阅读代码的时候能更容易地解读应用内部的状态改变。此外，这样也让我们有机会去实现一些能记录每次状态改变，保存状态快照的调试工具。有了它，我们甚至可以实现如时间穿梭般的调试体验。<br/>由于 store 中的状态是响应式的，在组件中调用 store 中的状态简单到仅需要在计算属性中返回即可。触发变化也仅仅是在组件的 methods 中提交 mutation。</blockquote><p data-pid="5_6JBndo">以上3.1的内容全来自Vuex的官方文档的使用方法，网站如下：(<a href="https://link.zhihu.com/?target=https%3A//link.juejin.cn/%3Ftarget%3Dhttps%253A%252F%252Fvuex.vuejs.org%252Fzh%252Fguide%252F" class=" wrap external" target="_blank" rel="nofollow noreferrer">开始 | Vuex </a>),下面，我将会将上述todo_list将head和body两个组件都拆分出去，并实现它们之间的通讯。</p><p data-pid="BKXsgj0R"><b>实现 =&gt;</b></p><p data-pid="QVXw0GNp">第一步：首先创建我们自己的store.js(前提已经安装好了Vuex哈),store.js通常放在src下面的store文件夹中。 代码如下（解释写在注释中，就不单独列出来了）：</p><div class="highlight"><pre><code class="language-js"><span class="nx">javascript复制代码</span><span class="c1">// 引入createStore函数，该函数用与创建Vuex store实例\n</span><span class="c1"></span><span class="kr">import</span> <span class="p">{</span> <span class="nx">createStore</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;vuex&#39;</span>\n\n<span class="c1">// 创建实例\n</span><span class="c1"></span><span class="kr">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">createStore</span><span class="p">({</span>\n  <span class="c1">// state是仓库里面的数据源，所有页面公有的\n</span><span class="c1"></span>  <span class="c1">// 但其他页面不能改变这里的数据\n</span><span class="c1"></span>  <span class="nx">state</span><span class="p">(){</span>\n    <span class="k">return</span> <span class="p">{</span>\n      <span class="nx">lists</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;html&#39;</span><span class="p">,</span><span class="s1">&#39;css&#39;</span><span class="p">,</span><span class="s1">&#39;js&#39;</span><span class="p">]</span>\n    <span class="p">}</span>\n  <span class="p">},</span>\n  <span class="c1">// mutations 类似 Vue中的methods\n</span><span class="c1"></span>  <span class="c1">// 我们想修改仓库中的数据只能通过自己在mutations中写的方法进行修改，外部想办法拿到这个方法\n</span><span class="c1"></span>  <span class="nx">mutations</span><span class="o">:</span><span class="p">{</span> <span class="c1">// methods\n</span><span class="c1"></span>    <span class="nx">listsAdd</span><span class="p">(</span><span class="nx">state</span><span class="p">,</span><span class="nx">val</span><span class="p">){</span>\n      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">val</span><span class="p">)</span> <span class="k">return</span>  \n      <span class="nx">state</span><span class="p">.</span><span class="nx">lists</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>\n    <span class="p">}</span> \n  <span class="p">}</span>\n<span class="p">})</span>\n\n<span class="kr">export</span> <span class="k">default</span> <span class="nx">store</span>\n</code></pre></div><p data-pid="VJe_M3Ie">第二步：Head.vue</p><div class="highlight"><pre><code class="language-xml">xml复制代码<span class="nt">&lt;script&gt;</span>\n  // 导入 Vuex 中的 mapMutations 辅助函数\n  import { mapMutations } from &#39;vuex&#39;\n  \n  // 导出 Vue 组件\n  export default {\n    // 数据部分\n    data(){\n      return {\n        message: &#39;&#39;\n      }\n    },\n    // 方法部分\n    methods:{\n      submit(){\n        // 调用 Vuex store 中的 listsAdd mutation 方法，将输入的数据添加到 Vuex store 中的 lists 状态中\n        this.listsAdd(this.message);\n        this.message = &#39;&#39;\n      },\n      // 使用 mapMutations 辅助函数，将 listsAdd mutation 映射到组件的 methods 中\n      ...mapMutations([&#39;listsAdd&#39;])\n    }\n  }\n<span class="nt">&lt;/script&gt;</span></code></pre></div><p data-pid="TtXto5MH"><code>mapMutations</code> 是 Vuex 提供的一个辅助函数，用于在 Vue 组件中简化对 mutations 的调用。具体可查看官方文档，<a href="https://link.zhihu.com/?target=https%3A//link.juejin.cn/%3Ftarget%3Dhttps%253A%252F%252Fvuex.vuejs.org%252Fzh%252Fguide%252Fmutations.html%2523%25E5%259C%25A8%25E7%25BB%2584%25E4%25BB%25B6%25E4%25B8%25AD%25E6%258F%2590%25E4%25BA%25A4-mutation" class=" wrap external" target="_blank" rel="nofollow noreferrer">Mutation | Vuex (vuejs.org)</a>) 。它的作用是将Vuex store 中的 mutations 映射到组件的 methods 中，使得组件可以直接调用 mutations，而不需要手动触发 <code>store.commit</code>。这样做可以提高代码的可读性和简洁性。</p><p data-pid="Cb1doRGh">第三步：List.vue</p><div class="highlight"><pre><code class="language-xml">xml复制代码<span class="nt">&lt;template&gt;</span>\n  <span class="nt">&lt;div&gt;</span>\n    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#34;body&#34;</span><span class="nt">&gt;</span>\n      <span class="nt">&lt;ul&gt;</span>\n        <span class="nt">&lt;li</span> <span class="na">v-for=</span><span class="s">&#34;(item, index) in lists&#34;</span> <span class="na">:key=</span><span class="s">&#34;index&#34;</span><span class="nt">&gt;</span>{{ item }}<span class="nt">&lt;/li&gt;</span>\n      <span class="nt">&lt;/ul&gt;</span>\n    <span class="nt">&lt;/div&gt;</span>\n  <span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;/template&gt;</span>\n\n<span class="nt">&lt;script&gt;</span>\nimport { mapState } from &#39;vuex&#39;\nexport default {\n  // 取出公共数据源中的lists\n  computed: mapState([&#39;lists&#39;])\n}\n<span class="nt">&lt;/script&gt;</span>\n\n<span class="nt">&lt;style</span> <span class="na">lang=</span><span class="s">&#34;less&#34;</span> <span class="err">scoped</span><span class="nt">&gt;&lt;/style&gt;</span></code></pre></div><p data-pid="Pi6LF-SP"><code>mapState</code> 是 Vuex 提供的一个辅助函数，用于在 Vue 组件中简化对 Vuex store 中状态的映射。它允许你将 Vuex store 中的状态直接映射到组件的计算属性中，使得组件可以更轻松地访问和使用这些状态。具体也可以去查看官方文档-(<a href="https://link.zhihu.com/?target=https%3A//link.juejin.cn/%3Ftarget%3Dhttps%253A%252F%252Fvuex.vuejs.org%252Fzh%252Fguide%252Fstate.html%2523mapstate-%25E8%25BE%2585%25E5%258A%25A9%25E5%2587%25BD%25E6%2595%25B0" class=" wrap external" target="_blank" rel="nofollow noreferrer">State | Vuex (vuejs.org)</a>)</p><p data-pid="-yFAB812">最后是App.vue</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pica.zhimg.com/v2-621e66b8873c79bdbeac5999fc426914_b.jpg" data-caption="" data-size="normal" data-rawwidth="831" data-rawheight="496" data-original-token="v2-b89c23d1057f4383e872874efee2b9ea" class="origin_image zh-lightbox-thumb" width="831" data-original="https://pica.zhimg.com/v2-621e66b8873c79bdbeac5999fc426914_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="vyud_Ksz">一开始的效果仍然能够实现：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic2.zhimg.com/v2-32b11c54ef1ecaecbdbbb409529788e3_b.jpg" data-caption="" data-size="normal" data-rawwidth="483" data-rawheight="422" data-original-token="v2-372c53272a23cd022be26826e84296fc" class="origin_image zh-lightbox-thumb" width="483" data-original="https://pic2.zhimg.com/v2-32b11c54ef1ecaecbdbbb409529788e3_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="EYgzzmA_">3.2 通过事件总线</p><ul><li data-pid="sbtbBV4q">事件总线是一种在Vue.js中用于组件通讯的模式，它允许任意两个组件之间进行通讯，而不需要直接引用对方。在Vue中，我们可以使用Vue实例作为事件总线，通过它来发布（emit）和订阅（on）自定义事件，实现组件之间的解耦。</li></ul><div class="highlight"><pre><code class="language-php"><span class="nx">php复制代码</span><span class="c1">// 创建事件总线\n</span><span class="c1"></span><span class="k">const</span> <span class="no">eventBus</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">();</span>\n\n<span class="c1">// 组件A\n</span><span class="c1"></span><span class="nx">eventBus</span><span class="o">.</span><span class="nv">$emit</span><span class="p">(</span><span class="s1">&#39;customEvent&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>\n\n<span class="c1">// 组件B\n</span><span class="c1"></span><span class="nx">eventBus</span><span class="o">.</span><span class="nv">$on</span><span class="p">(</span><span class="s1">&#39;customEvent&#39;</span><span class="p">,</span> <span class="nx">handleEvent</span><span class="p">);</span>\n</code></pre></div><p data-pid="M6F3m1bi">例如：</p><div class="highlight"><pre><code class="language-xml">xml复制代码<span class="c">&lt;!-- 组件A --&gt;</span>\n<span class="nt">&lt;template&gt;</span>\n  <span class="nt">&lt;div&gt;</span>\n    <span class="nt">&lt;button</span> <span class="err">@</span><span class="na">click=</span><span class="s">&#34;sendData&#34;</span><span class="nt">&gt;</span>Send Data<span class="nt">&lt;/button&gt;</span>\n  <span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;/template&gt;</span>\n​\n<span class="nt">&lt;script&gt;</span>\nexport default {\n  methods: {\n    sendData() {\n      // 发布自定义事件，携带数据\n      eventBus.$emit(&#39;customEvent&#39;, &#39;Hello from Component A&#39;);\n    }\n  }\n};\n<span class="nt">&lt;/script&gt;</span>\nxml复制代码<span class="c">&lt;!-- 组件B --&gt;</span>\n<span class="nt">&lt;template&gt;</span>\n  <span class="nt">&lt;div&gt;</span>\n    <span class="nt">&lt;p&gt;</span>Received data: {{ receivedData }}<span class="nt">&lt;/p&gt;</span>\n  <span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;/template&gt;</span>\n​\n<span class="nt">&lt;script&gt;</span>\nexport default {\n  data() {\n    return {\n      receivedData: &#39;&#39;\n    };\n  },\n  mounted() {\n    // 订阅自定义事件\n    eventBus.$on(&#39;customEvent&#39;, this.handleEvent);\n  },\n  methods: {\n    // 事件处理函数\n    handleEvent(data) {\n      this.receivedData = data;\n    }\n  },\n  beforeDestroy() {\n    // 在组件销毁前取消订阅，防止内存泄漏\n    eventBus.$off(&#39;customEvent&#39;, this.handleEvent);\n  }\n};\n<span class="nt">&lt;/script&gt;</span></code></pre></div><h2><b>参考资料</b></h2><ol><li data-pid="oi2vdIJH">(<a href="https://link.zhihu.com/?target=https%3A//link.juejin.cn/%3Ftarget%3Dhttps%253A%252F%252Fvuex.vuejs.org%252Fzh%252F" class=" wrap external" target="_blank" rel="nofollow noreferrer">Vuex 是什么？ | Vuex (vuejs.org)</a>)</li><li data-pid="_7ARpCHQ">(<a href="https://link.zhihu.com/?target=https%3A//link.juejin.cn/%3Ftarget%3Dhttps%253A%252F%252Fvuex.vuejs.org%252Fzh%252Fguide%252Fmutations.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">Mutation | Vuex (vuejs.org)</a>)</li><li data-pid="fEJnCYGW">(<a href="https://link.zhihu.com/?target=https%3A//link.juejin.cn/%3Ftarget%3Dhttps%253A%252F%252Fvuex.vuejs.org%252Fzh%252Fguide%252Fstate.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">State | Vuex (vuejs.org)</a>)</li></ol><p class="ztext-empty-paragraph"><br/></p><blockquote data-pid="mqlRL5qq">作者：minxcs 链接：<a href="https://link.zhihu.com/?target=https%3A//juejin.cn/post/7314983352560500745" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">juejin.cn/post/73149833</span><span class="invisible">52560500745</span><span class="ellipsis"></span></a> 来源：稀土掘金 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</blockquote>',
      is_labeled: false,
      visited_count: 77,
      favorite_count: 2,
    },
    brief: '{"source": "TS", "type": "article", "id": 688409210}',
    attached_info:
      'CtIECMq/ytySx+SvsAEQBxoJMjQxMTEwMjA4IIjf868GKAAwAEAkSiMKGFRTX1NPVVJDRV9XQVJNX1VQX0JPT1NUMRIBMBgAIAA6AEoiChdUU19TT1VSQ0VfV0FSTVVQX1JVQ0VORRIBMBgAIAA6AGIgY2NkZDU1YTFkZjRmNGQyZTNmOTc5Yzc5ZWFkMmIwNzNyCTY4ODQwOTIxMKoBCXJlY29tbWVuZMIBIGRhMzAzOThiMmZjZGMxZWNmMzFlNjUyNTc2MTVmYmEy8gEKCAwSBk5vcm1hbPIBKAgKEiQ0MTRiOGI5OC0zNzUwLTQ1N2UtODBhMC1hNjM5MjNjMGE1MDnyAQUICxIBN4ICAIgChN7tyuYxkgIgZGEzMDM5OGIyZmNkYzFlY2YzMWU2NTI1NzYxNWZiYTKaAgDaAhhUU19TT1VSQ0VfV0FSTV9VUF9CT09TVDHoAgP6AgtOT1JNQUxfRkxPV4oDIDg4N2RmNzgyMzdkNzQ0YWZiNDQ2NTNlZjY1NzZlNGJlmgMNCgJ2MBAAGgVvdGhlcqgDTdgDAOoDC3RleHRfcnVjZW5l+gMQEgxVTktOT1dOX01PREUgAIAEAIgEAJIEBk5vcm1hbJoEATOgBACoBACwBAC6BAJhacIEAzQwMMgEANIED+aOqOiNkOW3suabtOaWsNgEAPAEAPkEAAAAoFezoj+BBQAAAAAAAAAAiQV1LRYwrv+wP5IFCeatpuS+r+WMupoFA2RmdKIFA2RmdLIFATG5BQAAAAAAAAAA0AUA4AUA6AUA8AUHkgIkCgkyNDExMTAyMDgSCTY4ODQwOTIxMBgHIgpJTUFHRV9URVhU',
    action_card: false,
  },
  {
    id: '37_1711164583.641',
    type: 'feed',
    offset: 37,
    verb: 'TOPIC_ACKNOWLEDGED_ANSWER',
    created_time: 1711164583,
    updated_time: 1711164583,
    target: {
      id: 3010691782,
      type: 'answer',
      url: 'https://api.zhihu.com/answers/3010691782',
      author: {
        id: 'c6b29f6d94335bca9c41c40b9421ce23',
        url: 'https://api.zhihu.com/people/c6b29f6d94335bca9c41c40b9421ce23',
        user_type: 'people',
        url_token: 'ddd-99-56',
        name: '血影蛋白',
        headline: '爱聊天爱说话有奇奇怪怪的想法',
        avatar_url:
          'https://pica.zhimg.com/50/v2-45f816b776d3c1cde9091c17a8001700_l.jpg?source=b6762063',
        is_org: false,
        gender: 0,
        followers_count: 297,
        is_following: false,
        is_followed: false,
      },
      created_time: 1683088320,
      updated_time: 1683651776,
      voteup_count: 1586,
      thanks_count: 688,
      comment_count: 127,
      is_copyable: true,
      question: {
        id: 595729638,
        type: 'question',
        url: 'https://api.zhihu.com/questions/595729638',
        author: {
          id: 'eefdedf7282d876508165185e3961184',
          url: 'https://api.zhihu.com/people/eefdedf7282d876508165185e3961184',
          user_type: 'people',
          url_token: 'nlsabe',
          name: '知乎用户NlSaBe',
          headline: '',
          avatar_url:
            'https://pic1.zhimg.com/50/v2-b3e217a90a80a6ff32908f6c1939e209_l.jpg?source=b6762063',
          is_org: false,
          gender: 0,
          followers_count: 0,
          is_following: false,
          is_followed: false,
        },
        title: '男朋友第一次吻你什么感觉?',
        created: 1681532813,
        answer_count: 0,
        follower_count: 0,
        comment_count: 0,
        bound_topic_ids: [6276, 9628],
        is_following: false,
        excerpt: '',
        relationship: {
          is_author: false,
        },
        detail: '',
        question_type: 'normal',
      },
      excerpt:
        '全身都酥了吧…… 当时是他开车送我回家…然后我准备下车的时候，他却把车门锁了，我半天拉不开，就转头问他为什么不给我开门，他就慢慢凑过来，看着我眼睛，一句话也不说，我脸突然就发烫了不知道该怎么办……然后我的初吻就没了……啊啊啊啊啊！！！！而且当时还伸舌头了 ！！！？？？？？？？！！！！！懂得都懂，就只有三十秒左右吧，然后我就瘫在那里，还在回味刚刚的感觉，他问我，门开了，怎么不走了，我脸特红，提着包包…',
      excerpt_new:
        '全身都酥了吧…… 当时是他开车送我回家…然后我准备下车的时候，他却把车门锁了，我半天拉不开，就转头问他为什么不给我开门，他就慢慢凑过来，看着我眼睛，一句话也不说，我脸突然就发烫了不知道该怎么办……然后我的初吻就没了……啊啊啊啊啊！！！！而且当时还伸舌头了 ！！！？？？？？？？！！！！！懂得都懂，就只有三十秒左右吧，然后我就瘫在那里，还在回味刚刚的感觉，他问我，门开了，怎么不走了，我脸特红，提着包包…',
      preview_type: 'default',
      preview_text: '',
      reshipment_settings: 'allowed',
      content:
        '<p data-pid="KKpG2YN6">全身都酥了吧……</p><p data-pid="yX-3ZTMn">当时是他开车送我回家…然后我准备下车的时候，他却把车门锁了，我半天拉不开，就转头问他为什么不给我开门，他就慢慢凑过来，看着我眼睛，一句话也不说，我脸突然就发烫了不知道该怎么办……然后我的初吻就没了……啊啊啊啊啊！！！！而且当时还伸舌头了       ！！！？？？？？？？！！！！！懂得都懂，就只有三十秒左右吧，然后我就瘫在那里，还在回味刚刚的感觉，他问我，门开了，怎么不走了，我脸特红，提着包包就赶紧跑了，啊啊啊真的记忆犹新</p><p data-pid="oSDew9G-">来了来了，统一回复一下大家！</p><p data-pid="-_yinOoP">我和我男朋友家是一个地方的，我俩是初三的时候认识的，然后互相也有好感，但是也没有正式在一起，后来高中考上了不一样的学校也就不联系了。直到高考完之后才又开始联系，然后就立马正式在一起了！现在已经快两年了！！  </p><p data-pid="PlpnYEON">我一直以为他是一个很腼腆的男孩子！！！！！因为初中他给我的印象就是，不怎么爱说话，只有我每天叽叽喳喳那样，我是超级活泼那种！！！我真的是话唠！谁都能聊！！就没有我聊不来的人！</p><p data-pid="E4RX2IHq">因为那次约会我们先是去看了电影嘛，然后是爱情片，就是那种青春文学那种，然后片尾男女主就结婚了嘛，他们就，接吻了……我就有预感他要亲我……可能是我小说看多了吧……！！！     然后等了很长时间！他没有亲！！！他没有亲！！！擦！</p><p data-pid="Hxri4ySH">看完了之后我莫名有点伤感吧……但是又想了想，对方本来就挺腼腆的，不主动也没什么，也很正常吧…就没想太多了……</p><p data-pid="KyCHcZPD">谁知道！！！最后给我玩这出！！！</p><p data-pid="rlUjbHIQ">真的！！！真的！！一晚上没睡着，一晚上都在回味那个感觉，一想起来都会脸红的那种！！！后来的每次亲亲，我都没有原来第一次的感觉了 可能是当时的感受太强烈了吧。。</p>',
      relationship: {
        is_thanked: false,
        is_nothelp: false,
        voting: 0,
      },
      is_labeled: false,
      visited_count: 1149081,
      favorite_count: 638,
      answer_type: 'normal',
    },
    brief: '{"source": "TS", "type": "answer", "id": 3010691782}',
    attached_info:
      'CugECMq/ytySx+SvsAEQBBoJNTc3NDg1MTUwIMDHx6IGKLIMMH9AJUooChNUU19TT1VSQ0VfRkVFRFJFX1Y3EgEwGAAgADoKeyJyYXciOiIifVoIOTQ2NjU3NDliIGNjZGQ1NWExZGY0ZjRkMmUzZjk3OWM3OWVhZDJiMDczcgozMDEwNjkxNzgyigEJNTk1NzI5NjM4qgEJcmVjb21tZW5kwgEgYzZiMjlmNmQ5NDMzNWJjYTljNDFjNDBiOTQyMWNlMjPyAQoIDBIGTm9ybWFs8gEoCAoSJDU3ZjRkYjQ5LTNhZjktNDk0Ny04YzljLWYwMmRkZWNkNDI2NPIBBQgLEgE3ggIAiAKE3u3K5jGSAiBjNmIyOWY2ZDk0MzM1YmNhOWM0MWM0MGI5NDIxY2UyM5oCAMoCG09sZENvbnRlbnRSZWR1Y2U1V2VpZ2h0UnVsZdoCE1RTX1NPVVJDRV9GRUVEUkVfVjfoAgL6AgtOT1JNQUxfRkxPV4oDIDg4N2RmNzgyMzdkNzQ0YWZiNDQ2NTNlZjY1NzZlNGJlmgMNCgJ2MBAAGgVvdGhlcqgDmZFG2AMA6gMJZmVlZHJlX3Y3+gMQEgxVTktOT1dOX01PREUgAIAEAIgEAJIEBk5vcm1hbJoEATKgBACoBACwBAC6BAZtYW51YWzCBAMxNzDIBADSBA/mjqjojZDlt7Lmm7TmlrDYBADwBAD5BAAAAKCAfbE/gQUAAAAAAAAAAIkFdS0WMK7/sD+SBQnmrabkvq/ljLqaBQNkZnSiBQNkZnSyBQExuQUAAAAAAAAAANAFAOAFAOgFAPAFB5ICJQoJNTc3NDg1MTUwEgozMDEwNjkxNzgyGAQiCklNQUdFX1RFWFQ=',
    action_card: false,
  },
  {
    id: '38_1711164583.991',
    type: 'feed',
    offset: 38,
    verb: 'TOPIC_ACKNOWLEDGED_ARTICLE',
    created_time: 1711164583,
    updated_time: 1711164583,
    target: {
      id: 687949376,
      type: 'article',
      url: 'https://api.zhihu.com/articles/687949376',
      author: {
        id: '9cfae6de021f71be91902676e16cc937',
        url: 'https://api.zhihu.com/people/9cfae6de021f71be91902676e16cc937',
        user_type: 'people',
        url_token: 'eeygh',
        name: '公众蓝一天',
        headline: '相遇是一场不期而遇的聚会。我有我的朋友，你有你的同伴。',
        avatar_url:
          'https://picx.zhimg.com/50/v2-76ac6232552c4ad41b0a2888887386d7_l.jpg?source=b6762063',
        is_org: false,
        gender: 0,
        followers_count: 5944,
        is_following: false,
        is_followed: false,
      },
      title: '邯郸三个“渣滓”还没判，广东又一个“恶魔”出事了……',
      comment_permission: 'all',
      created: 1710862306,
      updated: 1710862306,
      voteup_count: 1132,
      voting: 0,
      comment_count: 123,
      linkbox: {
        category: '',
        pic: '',
        title: '',
        url: '',
      },
      excerpt:
        '1邯郸三害还没有除，广东梅州一个渣滓又冲上热搜。 3月17日，一则新闻引爆了全网的怒火，迅速冲上热搜第一，连央视都下场了。 看到视频那一刻，我感觉怒火快压不住了。 事情发生在广东梅州，时间是3月12日。 当天下午，13岁的在校学生李某，尾随一名小女孩，走到一栋居民楼。 当时正是放学时间，女孩根本没有设防。 突然，李某猛地抓住女孩，一边将女孩不停推推搡搡至路边。 女孩被突如其来的袭击吓坏了，可更令她恶心的一幕发…',
      excerpt_new:
        '1邯郸三害还没有除，广东梅州一个渣滓又冲上热搜。 3月17日，一则新闻引爆了全网的怒火，迅速冲上热搜第一，连央视都下场了。 看到视频那一刻，我感觉怒火快压不住了。 事情发生在广东梅州，时间是3月12日。 当天下午，13岁的在校学生李某，尾随一名小女孩，走到一栋居民楼。 当时正是放学时间，女孩根本没有设防。 突然，李某猛地抓住女孩，一边将女孩不停推推搡搡至路边。 女孩被突如其来的袭击吓坏了，可更令她恶心的一幕发…',
      preview_type: 'default',
      preview_text: '',
      content:
        '<p data-pid="lIkZ6L3h"><b>1</b></p><p data-pid="O8Uqj01f">邯郸三害还没有除，广东梅州一个渣滓又冲上热搜。</p><p data-pid="Da_nSATP">3月17日，一则新闻引爆了全网的怒火，迅速冲上热搜第一，连央视都下场了。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic2.zhimg.com/v2-0f29ea91c3a673256a91cff1dfd90a5d_b.jpg" data-caption="" data-size="normal" data-rawwidth="461" data-rawheight="643" data-original-token="v2-0f29ea91c3a673256a91cff1dfd90a5d" class="origin_image zh-lightbox-thumb" width="461" data-original="https://pic2.zhimg.com/v2-0f29ea91c3a673256a91cff1dfd90a5d_r.jpg"/></figure><p><br/><br/></p><p data-pid="kHfN5BjK">看到视频那一刻，我感觉怒火快压不住了。</p><p data-pid="y_ruHkoh">事情发生在广东梅州，时间是3月12日。</p><p data-pid="zv9C-UYK">当天下午，13岁的在校学生李某，尾随一名小女孩，走到一栋居民楼。</p><p data-pid="EP9QgM8P">当时正是放学时间，女孩根本没有设防。</p><p data-pid="Kb4vEOWv">突然，李某猛地抓住女孩，一边将女孩不停推推搡搡至路边。</p><p data-pid="a5AusmUU">女孩被突如其来的袭击吓坏了，可更令她恶心的一幕发生了。</p><p data-pid="5cDrvqsL">李某把她推到两台车的夹缝，这里比较隐蔽一些，随后，他的手在女孩身上开始乱摸。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://picx.zhimg.com/v2-db8120b92a3e125abd9d633761857413_b.jpg" data-caption="" data-size="normal" data-rawwidth="643" data-rawheight="449" data-original-token="v2-db8120b92a3e125abd9d633761857413" class="origin_image zh-lightbox-thumb" width="643" data-original="https://picx.zhimg.com/v2-db8120b92a3e125abd9d633761857413_r.jpg"/></figure><p><br/><br/></p><p data-pid="eam5oNLl">女孩的尖叫，痛哭声，听得我无比揪心。</p><p data-pid="wmGHVdky">她边哭，边挣扎着走了几步，可禽兽一样的李某根本没有停手。</p><p data-pid="ScHXcu88">在一览无余的空地上，他对着女孩上下其手。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-c6ebacd91c22aad24c7612bde61acd58_b.gif" data-caption="" data-size="normal" data-rawwidth="320" data-rawheight="208" data-thumbnail="https://pic1.zhimg.com/v2-c6ebacd91c22aad24c7612bde61acd58_b.jpg" data-original-token="v2-c6ebacd91c22aad24c7612bde61acd58" class="content_image" width="320"/></figure><p><br/><br/></p><p data-pid="AnA47Tar">体力上的悬殊，让女孩根本没有招架的余地，只能被他拖着，踉踉跄跄根本逃不开。</p><p data-pid="WpEe7CdP">他将女孩拖到一个草丛，在镜头里，我竟然看到，他动作娴熟地脱掉女孩的裤子……</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pica.zhimg.com/v2-55e9977bcabe17c0b88c121ca84f9b86_b.gif" data-caption="" data-size="normal" data-rawwidth="320" data-rawheight="189" data-thumbnail="https://pica.zhimg.com/v2-55e9977bcabe17c0b88c121ca84f9b86_b.jpg" data-original-token="v2-55e9977bcabe17c0b88c121ca84f9b86" class="content_image" width="320"/></figure><p><br/><br/></p><p data-pid="hk0GarKD">那一刻，我的愤怒值达到顶峰。</p><p data-pid="rUNzpQUz">我根本不敢想象，这竟然是一个13岁的未成年人能做出的事情。</p><p data-pid="gWrrm7H8">疯狂撕扯女孩的衣服，这不是一个活生生的畜生吗？</p><p data-pid="MFOj0j4t">女孩凄厉的哭喊，没有唤醒他一丝一毫的良知。</p><p data-pid="R554lEmx"><b>他身上那件校服，此刻显得无比讽刺。</b></p><p data-pid="BFzSdEZf">幸运的是，女孩的呼叫声，引来了路人。</p><p data-pid="Qsl0KE9s">路人发现后，李某停止了猥亵行为，女孩也因此得救。</p><p data-pid="OewTnOFl">很快，当地发布情况通报，称李某已被依法送到专门学校进行训诫教育。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pica.zhimg.com/v2-2658b4329d4e62f787f6fc227f286bba_b.jpg" data-caption="" data-size="normal" data-rawwidth="576" data-rawheight="643" data-original-token="v2-2658b4329d4e62f787f6fc227f286bba" class="origin_image zh-lightbox-thumb" width="576" data-original="https://pica.zhimg.com/v2-2658b4329d4e62f787f6fc227f286bba_r.jpg"/></figure><p><br/><br/></p><p data-pid="JcjXR6HK">对这个结果，我想很多人和我一样，心存疑虑。</p><p data-pid="tmjY4nUQ"><b>训诫，真的有效吗？</b></p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic2.zhimg.com/v2-5d64d24ddd0655b3da37dcf6c0c36853_b.jpg" data-caption="" data-size="normal" data-rawwidth="643" data-rawheight="94" data-original-token="v2-5d64d24ddd0655b3da37dcf6c0c36853" class="origin_image zh-lightbox-thumb" width="643" data-original="https://pic2.zhimg.com/v2-5d64d24ddd0655b3da37dcf6c0c36853_r.jpg"/></figure><p><br/><br/></p><p data-pid="-uHS7neV">李某会对自己的行为深刻的反省吗？</p><p data-pid="nA97a_uS">如果没有，那下一次又是哪一个无辜的小女孩落入他的魔爪？</p><p data-pid="DeLachcb">又是因为不满14岁。</p><p data-pid="ZYUj2BUq"><b>这未成年保护法到底是保护孩子，还是在保护恶魔？</b></p><p data-pid="zIPFBmI_">不敢想象，这个女孩当时怀着怎样的恐惧和绝望，度过那个黑暗的时刻。</p><p data-pid="1TZLMAvw">更不敢想象，今后她要怎样走出巨大的心理阴影。</p><p data-pid="KxUZSJFW">有的孩子，天生温柔单纯，而有的孩子，天生就是恶魔。</p><p data-pid="J4ecufPD">我也有女儿，这个视频给包括我在内的无数家长，狠狠一次叩问：</p><p data-pid="3hsgZhl5">我们天真无辜的女儿，如果遇到了这样的恶魔，那该怎么办？</p><p data-pid="H0BOZxiQ">难道我们家长连在放学回家的路上，也只能事无巨细地护送吗？</p><p data-pid="mrQUyPr-">2</p><p data-pid="H8AxEi0w">之前，大连10岁小女孩淇淇事件，撕碎了无数人的心。</p><p data-pid="EaVmdASE">事发当天，13岁的男孩蔡某以家中有小仓鼠为由，诱骗淇淇上门。</p><p data-pid="nOtZZcKa">等淇淇进入蔡某家中后，他迅速锁上房门，强行将淇淇抱上床，实施侵犯。</p><p data-pid="fyNgiu3M">淇淇拼命挣扎，哭喊，拳打脚踢。</p><p data-pid="oCvVkVSt">而面对琪琪激烈的反抗，蔡某失去了耐心，他疯狂挥舞着菜刀，对着淇淇砍下7刀，刀刀致命。</p><p data-pid="VCNPkMes">随后，他趁机将淇淇扔在家附近的树下，并压上垃圾，以免被发现。</p><p data-pid="xzv8BR-R">做完这一切，他回家清洗血迹，将凶器卖给废品站，用换来的钱买了零食，回家开电脑，打游戏，好像没事发生。</p><p data-pid="CNmqurfX">他冷静得就像刚刚不是杀了一个人，只是下楼遛了个弯。</p><p data-pid="7G7drNOO">事发后，他的表现，更令人毛骨悚然。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic2.zhimg.com/v2-76db8405d6030b22d93036dc0ea795a3_b.jpg" data-caption="" data-size="normal" data-rawwidth="568" data-rawheight="993" data-original-token="v2-76db8405d6030b22d93036dc0ea795a3" class="origin_image zh-lightbox-thumb" width="568" data-original="https://pic2.zhimg.com/v2-76db8405d6030b22d93036dc0ea795a3_r.jpg"/></figure><p><br/><br/></p><p data-pid="WRzVzOZD">淇淇父亲回忆，找孩子的过程中，蔡某主动问别人：“人找到没有”。</p><p data-pid="ALEAbQiZ">孩子母亲发现尸体时，蔡某某说了一句“真死了啊，谁干的”。</p><p data-pid="mFwuomuq">甚至，警察破案时，他拍摄视频，发到班级群进行“现场直播”。</p><p data-pid="Z1jWVESS">“妈的，我害怕啊，怀疑我了，我的指纹咋整？”</p><p data-pid="B4XclGDL">“他们警察办事这么草率的吗？给我加入嫌疑名单。”</p><p data-pid="qdHXfVZu">“我艹，我怕我的指纹和血在她身上，那我不就完了吗？”</p><p data-pid="047da12z"><b>他甚至洋洋得意地和同学炫耀：我不会坐牢，我才虚岁14。</b></p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic4.zhimg.com/v2-625975948ad4b2f122128a39262641cd_b.jpg" data-caption="" data-size="normal" data-rawwidth="550" data-rawheight="643" data-original-token="v2-625975948ad4b2f122128a39262641cd" class="origin_image zh-lightbox-thumb" width="550" data-original="https://pic4.zhimg.com/v2-625975948ad4b2f122128a39262641cd_r.jpg"/></figure><p><br/><br/></p><p data-pid="L6BeXWmj">最凶残的成年杀人犯身上，都很少见到这样的嘴脸，一个“孩子”竟然如此恐怖。</p><p data-pid="XMESaFEc">而这一次，未满14岁，又让他成功钻了法律的空子，拿到了免死金牌。</p><p data-pid="utsvE5ou">法律保护了未成年恶鬼，于是，他们比谁都清楚，自己几乎是“无敌”的。</p><p data-pid="QudUbB-5">未成年男孩性侵事件，这几年真的发生了太多太多。</p><p data-pid="rV-Odhs6">你不敢想象，那些令成年人都难以做出的邪恶行径，而那些小恶魔竟然能驾轻就熟。</p><p data-pid="Up-_gTDo"><b>他们有时单独作恶。</b></p><p data-pid="v-eXKwLq">上海，10岁男孩在书店诱骗5岁女童去男厕所。</p><p data-pid="6MMXYmYf">遭到拒绝后，男孩直接伸手脱女孩的内裤，摸她的下体。</p><p data-pid="3NDV-F00">更令人恶心的是，他岔开腿，甚至逼迫女孩舔他的下体。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic2.zhimg.com/v2-ee8a2ce7e0da3bd1f9cb6c3658f9750d_b.jpg" data-caption="" data-size="normal" data-rawwidth="643" data-rawheight="492" data-original-token="v2-ee8a2ce7e0da3bd1f9cb6c3658f9750d" class="origin_image zh-lightbox-thumb" width="643" data-original="https://pic2.zhimg.com/v2-ee8a2ce7e0da3bd1f9cb6c3658f9750d_r.jpg"/></figure><p><br/><br/></p><p data-pid="Wj4StL2C"><b>他们有时群体作恶。</b></p><p data-pid="C3Qsiqrw">山东11岁女孩，被两个十三四岁的男孩诱骗到家。</p><p data-pid="KK-gJdSO">对她甩耳光、踹肚子、性侵。</p><p data-pid="5rCXoD9h">最可恶的是，性侵完他们给女孩拍视频，威胁她不要说出去，不然就把视频发出去。</p><p data-pid="JolKtSq5">整整两天三夜的囚禁，女孩才逃出生天。</p><p data-pid="whZRnbsS">只在影视剧中看到的强奸犯的嘴脸，出现在两个未成年小畜生身上，甚至有过之无不及。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://picx.zhimg.com/v2-6d6194188e925b260263da3e976e1f77_b.jpg" data-caption="" data-size="normal" data-rawwidth="428" data-rawheight="643" data-original-token="v2-6d6194188e925b260263da3e976e1f77" class="origin_image zh-lightbox-thumb" width="428" data-original="https://picx.zhimg.com/v2-6d6194188e925b260263da3e976e1f77_r.jpg"/></figure><p><br/><br/></p><p data-pid="JaQK6bkR"><b>最令人细思极恐的是，他们竟然还敢对成人女性下手。</b></p><p data-pid="8x9ANJ7t">湖南衡阳，一女子在便利商店，被一名十二三岁的男孩袭胸，随后男孩嘻嘻哈哈跑开。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-19bc7d5f86a44c823c0a07031900323a_b.jpg" data-caption="" data-size="normal" data-rawwidth="578" data-rawheight="971" data-original-token="v2-19bc7d5f86a44c823c0a07031900323a" class="origin_image zh-lightbox-thumb" width="578" data-original="https://pic1.zhimg.com/v2-19bc7d5f86a44c823c0a07031900323a_r.jpg"/></figure><p><br/><br/></p><p data-pid="3IejMGuy">江苏连云港，一名十几岁的男孩尾随女子，竟然多次提出：我能摸你的大腿吗？我现在就想摸你一下。</p><p data-pid="T6QBdc3X">遭到严词拒绝后，男孩骂骂咧咧地离开。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://picx.zhimg.com/v2-f8336fe3d8f66c1f45c25ca4cb4bce55_b.jpg" data-caption="" data-size="normal" data-rawwidth="642" data-rawheight="483" data-original-token="v2-f8336fe3d8f66c1f45c25ca4cb4bce55" class="origin_image zh-lightbox-thumb" width="642" data-original="https://picx.zhimg.com/v2-f8336fe3d8f66c1f45c25ca4cb4bce55_r.jpg"/></figure><p><br/><br/></p><p data-pid="9URL8XCh">我极度怀疑，这些所谓的孩子，稚嫩的皮囊下到底藏着怎样罪恶的灵魂？</p><p data-pid="zNi3MRqI">《亲爱的弗洛伊德》里说：</p><p data-pid="fr11Ck2P"><b>“没有是非观的孩子，是这个地球上最可怕的生物。他们有好奇心、行动力、破坏力以及《未成年人保护法》。”</b></p><p data-pid="vbVXV--C">我们的法律，真的要保护这些令人胆寒的玩意儿？</p><p data-pid="pTPGI3sT">据最高人民检察院数据显示，近年来，未成年人犯罪总体呈上升趋势，低龄未成年人犯罪占比上升。</p><p data-pid="9z-6_Ptw">而在对未成年人犯罪情况进行统计发现，五大犯罪中，强奸罪位居第三。</p><p data-pid="gPkdCkF5"><b>那些你以为“什么都不懂”的孩子，被原始兽性支配，成为欲望的奴隶。</b></p><p data-pid="RqrF0wC8"><b>底线，不断击溃。</b></p><p data-pid="6yen3lv9"><b>人性，荡然无存。</b></p><p data-pid="Ss7KM_uh"><b>3</b></p><p data-pid="hgmxJvRT">说了这么多，其实就是想表达一个观点：</p><p data-pid="qmPjBxOB"><b>有些孩子，确实是天生的坏种，我们的法律没有必要因为年龄就一味地对他们放松惩罚。</b></p><p data-pid="436DROJj">罗翔在谈邯郸未成年杀人埋尸案时，说过一句话：</p><p data-pid="6HeURCtM"><b>人性从来都是弯曲的曲木，绝非虚无的白纸。</b></p><p data-pid="C2cL_7Oc"><b>你以为孩子天性纯洁无暇，只是一厢情愿。</b></p><p data-pid="9TCa1nc3"><b>事实上，带着本能的纯粹恶意，更为残酷。</b></p><p data-pid="HnqxtZ-m">就在警方刚刚出的调查报告显示，邯郸3个犯罪嫌疑人，属于有预谋作案。</p><p data-pid="AaSs3WcU">3月9号，他们就在废弃大棚，挖过一次坑。</p><p data-pid="kUH-FvTQ">案发当天，又挖了一次。</p><p data-pid="vdTtmoZk"><b>杀人，不是一时兴起，而是早有预谋。</b></p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://picx.zhimg.com/v2-9b23276ee9877d5d5faa8ed95c4b477f_b.jpg" data-caption="" data-size="normal" data-rawwidth="626" data-rawheight="617" data-original-token="v2-9b23276ee9877d5d5faa8ed95c4b477f" class="origin_image zh-lightbox-thumb" width="626" data-original="https://picx.zhimg.com/v2-9b23276ee9877d5d5faa8ed95c4b477f_r.jpg"/></figure><p><br/><br/></p><p data-pid="rvlX2hQ4">试问，这样的3个畜生，有从轻判处的必要吗？</p><p data-pid="KwgI-xVp">小小年纪，心思如此缜密、恶毒，这种人，还有被改造的可能吗？</p><p data-pid="4BOvLYUo">我根本不相信。</p><p data-pid="gNPV12o9">家庭的教育，社会的引导，法律的教化，对天生的坏人来说，并不会起到太多作用。</p><p data-pid="JqAm9e68">他们不会反省，不会对受害者有丝毫歉意。</p><p data-pid="CktKF4f_">他们只会觉得：杀人、强奸，不过如此。</p><p data-pid="7HBQsTnN">已经嗜过血的恶魔，不会满足于此。</p><p data-pid="SSra3HNF">下一次，下下一次，他们将会犯下更为可怕的罪行。</p><p data-pid="TCCTACI8">对他们宽容，就是对无辜的人不公。</p><p data-pid="PNV8zXb8">我强烈对如今的法律调整做两点建议：</p><p data-pid="zXc2qhIj"><b>1、引入“恶意补足年龄”条款。</b></p><p data-pid="5OiNbJuD">这个条款很多发达国家也在用。</p><p data-pid="bhrpR4qT">简而言之就是，如果这个孩子的犯罪恶意很大，就取消年龄保护的机制，按照正常人去判决，用恶意补足年龄。</p><p data-pid="iLpFSNGD"><b>2、采取未成年人抵消机制。</b></p><p data-pid="_aDTU8AA">也就是说，未成年人犯罪的时候，如果他侵犯的对象也是未成年人，那么就应该取消他未成年人保护的机制，不然未成人保护，就直接成了小恶魔的挡箭牌。</p><p data-pid="khuhAUes">是时候，对躲在法律暗处的渣滓，亮剑了！</p><p data-pid="rF1NqLFa">我们的法律，是时候给这些小恶魔以严惩了！</p><p data-pid="QcqM1uP6"><b>唯有最严厉的惩戒，才能带来震撼。</b></p><p data-pid="w1Ua8pED"><b>唯有不轻纵，才能真正带来改变。</b></p><p data-pid="bFqvDHuv"><b>社会已经宽容他们太久，就从现在开始，开战吧！</b></p>',
      is_labeled: false,
      visited_count: 33048,
      favorite_count: 89,
    },
    brief: '{"source": "TS", "type": "article", "id": 687949376}',
    attached_info:
      'CpEFCMq/ytySx+SvsAEQBxoJMjQxMDA3OTYwIOLf5q8GKOwIMHtAJkowChtUU19TT1VSQ0VfRkVFRFJFX1RJTUVMSU5FU1MSATAYACAAOgp7InJhdyI6IiJ9SigKE1RTX1NPVVJDRV9GRUVEUkVfVjcSATAYACAAOgp7InJhdyI6IiJ9YiBjY2RkNTVhMWRmNGY0ZDJlM2Y5NzljNzllYWQyYjA3M3IJNjg3OTQ5Mzc2qgEJcmVjb21tZW5kwgEgOWNmYWU2ZGUwMjFmNzFiZTkxOTAyNjc2ZTE2Y2M5MzfyAQoIDBIGTm9ybWFs8gEoCAoSJDc1NTQ3ZWJiLWZjYTgtNGM0Ni1iMTJmLTRmZDJhNGQ4NGY3OPIBBQgLEgE3ggIAiAKE3u3K5jGSAiA5Y2ZhZTZkZTAyMWY3MWJlOTE5MDI2NzZlMTZjYzkzN5oCAMoCGVVuZnJpZW5kbGluZXNzV2VpZ2h0UnVsZTHaAhtUU19TT1VSQ0VfRkVFRFJFX1RJTUVMSU5FU1PoAgL6AgtOT1JNQUxfRkxPV4oDIDg4N2RmNzgyMzdkNzQ0YWZiNDQ2NTNlZjY1NzZlNGJlmgMNCgJ2MBAAGgVvdGhlcqgDmIIC2AMA6gMRZmVlZHJlX3RpbWVsaW5lc3P6AxASDFVOS05PV05fTU9ERSAAgAQAiAQAkgQGTm9ybWFsmgQBMqAEAKgEALAEALoEBm1hbnVhbMIEAzE3MMgEANIED+aOqOiNkOW3suabtOaWsNgEAPAEAPkEAAAAgPKjqz+BBQAAAAAAAAAAiQV1LRYwrv+wP5IFCeatpuS+r+WMupoFA2RmdKIFA2RmdLIFATG5BQAAAAAAAAAA0AUA4AUA6AUA8AUHkgIkCgkyNDEwMDc5NjASCTY4Nzk0OTM3NhgHIgpJTUFHRV9URVhU',
    action_card: false,
  },
  {
    id: '39_1711164583.521',
    type: 'feed',
    offset: 39,
    verb: 'TOPIC_ACKNOWLEDGED_ANSWER',
    created_time: 1711164583,
    updated_time: 1711164583,
    target: {
      id: 3295436524,
      type: 'answer',
      url: 'https://api.zhihu.com/answers/3295436524',
      author: {
        id: 'a5de66a48ca9514b6e5732b8d01e775e',
        url: 'https://api.zhihu.com/people/a5de66a48ca9514b6e5732b8d01e775e',
        user_type: 'people',
        url_token: 'xiao-ming-73-83-23',
        name: '小明',
        headline: '搬砖的',
        avatar_url:
          'https://pic1.zhimg.com/50/v2-abed1a8c04700ba7d72b45195223e0ff_l.jpg?source=b6762063',
        is_org: false,
        gender: -1,
        followers_count: 1946,
        is_following: false,
        is_followed: false,
      },
      created_time: 1700454192,
      updated_time: 1700454192,
      voteup_count: 1296,
      thanks_count: 60,
      comment_count: 73,
      is_copyable: true,
      question: {
        id: 627335829,
        type: 'question',
        url: 'https://api.zhihu.com/questions/627335829',
        author: {
          id: '51bec78aad93f76be9b5d60a0f2b27ee',
          url: 'https://api.zhihu.com/people/51bec78aad93f76be9b5d60a0f2b27ee',
          user_type: 'people',
          url_token: '64-71-32-12',
          name: '郑州火车迷',
          headline: '',
          avatar_url:
            'https://pica.zhimg.com/50/v2-4f7f1b3a9da6ecfa7ccb3b82c3b2258e_l.jpg?source=b6762063',
          is_org: false,
          gender: -1,
          followers_count: 28,
          is_following: false,
          is_followed: false,
        },
        title: '月薪20k以上的程序员都能裸写代码吗？',
        created: 1698009754,
        answer_count: 0,
        follower_count: 0,
        comment_count: 10,
        bound_topic_ids: [707, 1354, 45502],
        is_following: false,
        excerpt: '',
        relationship: {
          is_author: false,
        },
        detail: '',
        question_type: 'normal',
      },
      excerpt:
        '互联网公司可能比较开放一点，我在银行做后端开发，行里要求必须穿衣服工作',
      excerpt_new:
        '互联网公司可能比较开放一点，我在银行做后端开发，行里要求必须穿衣服工作',
      preview_type: 'default',
      preview_text: '',
      reshipment_settings: 'allowed',
      content:
        '<p data-pid="kKNXL_KV">互联网公司可能比较开放一点，我在银行做后端开发，行里要求必须穿衣服工作</p>',
      relationship: {
        is_thanked: false,
        is_nothelp: false,
        voting: 0,
      },
      is_labeled: false,
      visited_count: 92221,
      favorite_count: 11,
      answer_type: 'normal',
    },
    brief: '{"source": "TS", "type": "answer", "id": 3295436524}',
    attached_info:
      'CvUECMq/ytySx+SvsAEQBBoJNjI5MjQ5NDcxILC+66oGKJAKMElAJ0ogChVUU19TT1VSQ0VfVEhFTUVfTUVSR0USATAYACAAOgBaCTEwMTY4NjgyNWIgY2NkZDU1YTFkZjRmNGQyZTNmOTc5Yzc5ZWFkMmIwNzNyCjMyOTU0MzY1MjSKAQk2MjczMzU4MjmqAQlyZWNvbW1lbmTCASBhNWRlNjZhNDhjYTk1MTRiNmU1NzMyYjhkMDFlNzc1ZfIBCggMEgZOb3JtYWzyASgIChIkODEyYTUwNDgtNzRlYS00YWY1LWFkYjMtYmYwMzUwODk1MWNi8gEFCAsSATeCAgCIAoTe7crmMZICIGE1ZGU2NmE0OGNhOTUxNGI2ZTU3MzJiOGQwMWU3NzVlmgIAygIbT2xkQ29udGVudFJlZHVjZTVXZWlnaHRSdWxl2gIVVFNfU09VUkNFX1RIRU1FX01FUkdF6AIC+gILTk9STUFMX0ZMT1eKAyA4ODdkZjc4MjM3ZDc0NGFmYjQ0NjUzZWY2NTc2ZTRiZZoDDQoCdjAQABoFb3RoZXKoA73QBdgDAOoDG3RoZW1lTWVyZ2VVcGdyYWRlVjFSZWNhbGxlcvoDEBIMVU5LTk9XTl9NT0RFIACABACIBACSBAZOb3JtYWyaBAEyoAQAqAQAsAQAugQGbWFudWFswgQDMTYwyAQA0gQP5o6o6I2Q5bey5pu05paw2AQA8AQA+QQAAADASaq1P4EFAAAAAAAAAACJBXUtFjCu/7A/kgUJ5q2m5L6v5Yy6mgUDZGZ0ogUDZGZ0sgUBMbkFAAAAAAAAAADQBQDgBQDoBQDwBQeSAiUKCTYyOTI0OTQ3MRIKMzI5NTQzNjUyNBgEIgpJTUFHRV9URVhU',
    action_card: false,
  },
  {
    id: '40_1711164583.993',
    type: 'feed',
    offset: 40,
    verb: 'TOPIC_ACKNOWLEDGED_ANSWER',
    created_time: 1711164583,
    updated_time: 1711164583,
    target: {
      id: 3249351308,
      type: 'answer',
      url: 'https://api.zhihu.com/answers/3249351308',
      author: {
        id: 'c5d4e52eaf5dcb1e368571d0143dcfce',
        url: 'https://api.zhihu.com/people/c5d4e52eaf5dcb1e368571d0143dcfce',
        user_type: 'people',
        url_token: 'jia-zhen-57',
        name: 'jzplp',
        headline: 'Web前端开发',
        avatar_url: 'https://picx.zhimg.com/50/39dd91656_l.jpg?source=b6762063',
        is_org: false,
        gender: 1,
        badge: [
          {
            type: 'identity_people',
            description: '华东师范大学 计算机硕士',
          },
        ],
        followers_count: 243,
        is_following: false,
        is_followed: false,
      },
      created_time: 1697255349,
      updated_time: 1697334824,
      voteup_count: 86,
      thanks_count: 35,
      comment_count: 6,
      is_copyable: true,
      question: {
        id: 456775221,
        type: 'question',
        url: 'https://api.zhihu.com/questions/456775221',
        author: {
          id: '712800d0dfc8a61f6edd4a549c2b73f6',
          url: 'https://api.zhihu.com/people/712800d0dfc8a61f6edd4a549c2b73f6',
          user_type: 'people',
          url_token: 'sun-hao-sheng-54',
          name: '痕迹',
          headline: '阅读理解都做不好，麻烦卸载文字软件',
          avatar_url:
            'https://pic1.zhimg.com/50/v2-262e86f1a4e7bf626ec6b2c0ebab5e10_l.jpg?source=b6762063',
          is_org: false,
          gender: -1,
          followers_count: 28,
          is_following: false,
          is_followed: false,
        },
        title: '原生 Promise 和手写 Promise 的区别是什么？',
        created: 1619488270,
        answer_count: 0,
        follower_count: 0,
        comment_count: 0,
        bound_topic_ids: [225, 6445, 9161, 33685, 159545],
        is_following: false,
        excerpt: '',
        relationship: {
          is_author: false,
        },
        detail: '',
        question_type: 'normal',
      },
      thumbnail:
        'https://picx.zhimg.com/50/v2-672fd04ed06c8dae45258978c99849ea_720w.jpg?source=b6762063',
      excerpt:
        '我们自己手写实现的Promise，即使不用宏任务的setTimeout，而是使用微任务的queueMicrotask作为任务延迟执行的方法，手写的Promise和原生Promise还是存在区别的。 我在自己实现Promise的过程中，发现了手写的Promise和原生Promise在异常处理方面是存在区别的，而且如果我们自己尝试实现了这些异常特性，会令我们手写的Promise不能通过Promises/A+规范测试。 下面我们就来手写一个Promise，在手写的过程中与原生Promise比较，看看…',
      excerpt_new:
        '我们自己手写实现的Promise，即使不用宏任务的setTimeout，而是使用微任务的queueMicrotask作为任务延迟执行的方法，手写的Promise和原生Promise还是存在区别的。 我在自己实现Promise的过程中，发现了手写的Promise和原生Promise在异常处理方面是存在区别的，而且如果我们自己尝试实现了这些异常特性，会令我们手写的Promise不能通过Promises/A+规范测试。 下面我们就来手写一个Promise，在手写的过程中与原生Promise比较，看看…',
      preview_type: 'default',
      preview_text: '',
      reshipment_settings: 'allowed',
      content:
        '<p data-pid="ASSjiYxX">我们自己手写实现的Promise，即使不用宏任务的setTimeout，而是使用微任务的queueMicrotask作为任务延迟执行的方法，手写的Promise和原生Promise还是存在区别的。</p><p data-pid="MOsT03tY">我在自己实现Promise的过程中，发现了手写的Promise和原生Promise在异常处理方面是存在区别的，而且如果我们自己尝试实现了这些异常特性，会令我们手写的Promise不能通过Promises/A+规范测试。</p><p data-pid="UtErd7IS">下面我们就来手写一个Promise，在手写的过程中与原生Promise比较，看看究竟有什么不同。</p><p data-pid="wwt_B9AC">我还在GitHub上新建了一个仓库，里面包含了我们实现的Promise的完整代码和每一部分的中间代码，还集成了Promises/A+规范测试工具，方便进行测试。</p><ul><li data-pid="Yz8EvGng">PromiseJz GitHub仓库</li><li data-pid="rQw_qhpg"><a href="https://link.zhihu.com/?target=https%3A//github.com/jzplp/PromiseJz" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">github.com/jzplp/Promis</span><span class="invisible">eJz</span><span class="ellipsis"></span></a></li></ul><h2>实现Promise前要了解的</h2><h3>Promise规范</h3><p data-pid="ChnSVoxI">大家或许听到过Promises/A+，这是ECMAScript选用的Promise规范。为什么叫“A+”？这是因为Promises/A+是在Promise/A的基础上进行扩展的。实际上，Promise有很多个规范，下面列出了部分较知名的：</p><ul><li data-pid="u5w3ie4n"><a href="https://link.zhihu.com/?target=https%3A//wiki.commonjs.org/wiki/Promises/A" class=" wrap external" target="_blank" rel="nofollow noreferrer">Promises/A</a></li><li data-pid="EoC3hwd9"><a href="https://link.zhihu.com/?target=https%3A//promisesaplus.com/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Promises/A+</a></li><li data-pid="muj9avTh"><a href="https://link.zhihu.com/?target=https%3A//wiki.commonjs.org/wiki/Promises/B" class=" wrap external" target="_blank" rel="nofollow noreferrer">Promises/B</a></li><li data-pid="wdUm9vjj"><a href="https://link.zhihu.com/?target=https%3A//wiki.commonjs.org/wiki/Promises/D" class=" wrap external" target="_blank" rel="nofollow noreferrer">Promises/D</a></li></ul><p data-pid="qzv2NHfn">其中除了Promises/A+之外，其他规范都是CommonJs组织提出的。查看A+规范的原文，我们发现其中详细的描述了Promise的状态和执行流程。但其中只定义了then方法。</p><h3>Promise测试工具</h3><p data-pid="j6hTTup6">Promises/A+不仅有规范，还有对应的测试工具。我们自己实现的Promise，需要通过检测工具的检测，才能算是合格的实现。</p><p data-pid="cCJIC-45">官方提供的工具为：<a href="https://link.zhihu.com/?target=https%3A//github.com/promises-aplus/promises-tests" class=" wrap external" target="_blank" rel="nofollow noreferrer">promises-aplus-tests</a>，是个npm包。在实现完成后，我们也会用这个工具进行测试。</p><h2>第一部分 Promise构造函数</h2><h3>新建类</h3><p data-pid="JlP-vx47">首先创建构造函数，接受一个函数作为入参，并执行。</p><div class="highlight"><pre><code class="language-js"><span class="kr">class</span> <span class="nx">PromiseJz</span> <span class="p">{</span>\n  <span class="c1">// 构造函数，接收一个函数作为入参\n</span><span class="c1"></span>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">executor</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 立即执行函数\n</span><span class="c1"></span>    <span class="nx">executor</span><span class="p">()</span>\n  <span class="p">}</span>\n\n  <span class="c1">// 实例属性 状态，默认为pending\n</span><span class="c1"></span>  <span class="nx">state</span> <span class="o">=</span> <span class="nx">STATE_PENDING</span>\n<span class="p">}</span>\n<span class="nx">module</span><span class="p">.</span><span class="kr">export</span> <span class="o">=</span> <span class="nx">PromiseJz</span>\n</code></pre></div><p data-pid="zVdjYs7X">设三个状态常量，表示Promise的三种状态。</p><div class="highlight"><pre><code class="language-js"><span class="kr">const</span> <span class="nx">STATE_PENDING</span> <span class="o">=</span> <span class="s1">&#39;pending&#39;</span>\n<span class="kr">const</span> <span class="nx">STATE_FULFILLED</span> <span class="o">=</span> <span class="s1">&#39;fulfilled&#39;</span>\n<span class="kr">const</span> <span class="nx">STATE_REJECTED</span> <span class="o">=</span> <span class="s1">&#39;rejected&#39;</span>\n</code></pre></div><h3>resolve和reject函数</h3><p data-pid="pZ-S6BTt">创建resolve和reject函数并处理状态。</p><div class="highlight"><pre><code class="language-js"><span class="nx">resolve</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>\n  <span class="c1">// 只处理pending状态\n</span><span class="c1"></span>  <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">!==</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="k">return</span>\n  <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">STATE_FULFILLED</span>\n<span class="p">}</span>\n<span class="nx">reject</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>\n  <span class="c1">// 只处理pending状态\n</span><span class="c1"></span>  <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">!==</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="k">return</span>\n  <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">STATE_REJECTED</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="7j9m6Tea">构造函数中使用这两个函数：</p><div class="highlight"><pre><code class="language-js"><span class="c1">// 构造函数，接收一个函数作为入参\n</span><span class="c1"></span><span class="nx">constructor</span><span class="p">(</span><span class="nx">executor</span><span class="p">)</span> <span class="p">{</span>\n  <span class="k">try</span> <span class="p">{</span>\n  <span class="c1">// 立即执行函数 需要手动指定bind指向\n</span><span class="c1"></span>  <span class="nx">executor</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">resolve</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">),</span> <span class="k">this</span><span class="p">.</span><span class="nx">reject</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">))</span>\n  <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 出现异常则认为rejected\n</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="GOVZTDR4">如果执行中出现异常，那么认为是reject状态。注意这里resolve和reject函数的执行位置实际上是在实例之外，因此需要手动bind。</p><h3>第一部分完整代码</h3><div class="highlight"><pre><code class="language-js"><span class="c1">// 三种状态常量\n</span><span class="c1"></span><span class="kr">const</span> <span class="nx">STATE_PENDING</span> <span class="o">=</span> <span class="s1">&#39;pending&#39;</span>\n<span class="kr">const</span> <span class="nx">STATE_FULFILLED</span> <span class="o">=</span> <span class="s1">&#39;fulfilled&#39;</span>\n<span class="kr">const</span> <span class="nx">STATE_REJECTED</span> <span class="o">=</span> <span class="s1">&#39;rejected&#39;</span>\n\n<span class="kr">class</span> <span class="nx">PromiseJz</span> <span class="p">{</span>\n  <span class="c1">// 构造函数，接收一个函数作为入参\n</span><span class="c1"></span>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">executor</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">try</span> <span class="p">{</span>\n    <span class="c1">// 立即执行函数 需要手动指定bind指向\n</span><span class="c1"></span>    <span class="nx">executor</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">resolve</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">),</span> <span class="k">this</span><span class="p">.</span><span class="nx">reject</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">))</span>\n    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n      <span class="c1">// 出现异常则认为rejected\n</span><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n\n  <span class="c1">// 实例属性 状态，默认为pending\n</span><span class="c1"></span>  <span class="nx">state</span> <span class="o">=</span> <span class="nx">STATE_PENDING</span>\n\n  <span class="nx">resolve</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 只处理pending状态\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">!==</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="k">return</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">STATE_FULFILLED</span>\n  <span class="p">}</span>\n  <span class="nx">reject</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 只处理pending状态\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">!==</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="k">return</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">STATE_REJECTED</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">PromiseJz</span>\n</code></pre></div><h3>第一部分测试</h3><p data-pid="xNFCn7sU">测试一下效果：</p><div class="highlight"><pre><code class="language-js"><span class="kr">const</span> <span class="nx">prom1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;立即执行&#39;</span><span class="p">)</span>\n  <span class="nx">resolve</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>\n  <span class="c1">// 状态改变一次之后，就不能再变化\n</span><span class="c1"></span>  <span class="nx">reject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">prom1</span><span class="p">)</span>\n\n<span class="kr">const</span> <span class="nx">prom2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;立即执行&#39;</span><span class="p">)</span>\n  <span class="nx">reject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>\n  <span class="nx">resolve</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">prom2</span><span class="p">)</span>\n</code></pre></div><p data-pid="OuAFrGek">输出：</p><div class="highlight"><pre><code class="language-js"><span class="nx">立即执行</span>\n<span class="nx">PromiseJz</span> <span class="p">{</span> <span class="nx">state</span><span class="o">:</span> <span class="s1">&#39;fulfilled&#39;</span> <span class="p">}</span>\n<span class="nx">立即执行</span>\n<span class="nx">PromiseJz</span> <span class="p">{</span> <span class="nx">state</span><span class="o">:</span> <span class="s1">&#39;rejected&#39;</span> <span class="p">}</span>\n</code></pre></div><h2>第二部分 then方法</h2><h3>保存promise结果</h3><p data-pid="tT9uFWDm">then状态需要获取promise的结果，因此需要在类中保存。首先创建两个实例属性：</p><div class="highlight"><pre><code class="language-js"><span class="c1">// 成功的值\n</span><span class="c1"></span>  <span class="nx">value</span> <span class="o">=</span> <span class="kc">null</span>\n  <span class="c1">// 失败的原因\n</span><span class="c1"></span>  <span class="nx">reason</span> <span class="o">=</span> <span class="kc">null</span>\n</code></pre></div><p data-pid="NnRz3nqq">然后在resolve和reject函数中将值保存到实例属性中。</p><div class="highlight"><pre><code class="language-js"><span class="nx">resolve</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>\n  <span class="c1">// 上面已有代码，因此省略\n</span><span class="c1"></span>  <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span>\n<span class="p">}</span>\n<span class="c1">// reject函数\n</span><span class="c1"></span><span class="nx">reject</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>\n  <span class="c1">// 上面已有代码，因此省略\n</span><span class="c1"></span>  <span class="k">this</span><span class="p">.</span><span class="nx">reason</span> <span class="o">=</span> <span class="nx">reason</span>\n<span class="p">}</span>\n</code></pre></div><h3>创建then方法</h3><p data-pid="e5vlCYPc">在then方法中获取promise的结果，传给回调函数。</p><div class="highlight"><pre><code class="language-js"><span class="nx">then</span><span class="p">(</span><span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">)</span> <span class="p">{</span>\n  <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_FULFILLED</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">onFulfilled</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span>\n  <span class="p">}</span>\n  <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_REJECTED</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">onRejected</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">reason</span><span class="p">)</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div><h3>then方法处理pending状态</h3><p data-pid="OQxcwsGu">上一节的then方法，我们只处理了fulfilled和reject的情况。也就是说，我们可以处理同步执行的方法了。但是异步情况下，即执行then方法时，我们的promise状态还是pending呢？这时候就需要保存下回调函数，等后续状态改变时在执行。</p><p data-pid="1ecq-Hxm">新建两个实例属性，用于保存then的回调函数。</p><div class="highlight"><pre><code class="language-js"><span class="c1">// 异步promise调用then时的回调\n</span><span class="c1"></span>  <span class="nx">onFulfilledCallback</span> <span class="o">=</span> <span class="kc">null</span>\n  <span class="nx">onRejectedCallback</span> <span class="o">=</span> <span class="kc">null</span>\n</code></pre></div><p data-pid="d3f-Rebt">then方法如果遇到pending状态，则把回调函数保存在属性中。</p><div class="highlight"><pre><code class="language-js"><span class="nx">then</span><span class="p">(</span><span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">)</span> <span class="p">{</span>\n  <span class="c1">// 上面已有代码，因此省略\n</span><span class="c1"></span>  <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// pending状态时，无法执行回调，因此把状态写入属性中，等后续状态改变时执行\n</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">onFulfilledCallback</span> <span class="o">=</span> <span class="nx">onFulfilled</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">onRejectedCallback</span> <span class="o">=</span> <span class="nx">onRejected</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="9xEWg_TR">既然保存下了回调函数，那么状态改变时，就需要执行回调。promise的状态何时改变呢？就是在执行resolve或者reject函数的时候。因此我们在这两个函数里面执行then的回调。</p><div class="highlight"><pre><code class="language-js"><span class="nx">resolve</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>\n  <span class="c1">// 上面已有代码，因此省略\n</span><span class="c1"></span>  <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">onFulfilledCallback</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">onFulfilledCallback</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>\n<span class="p">}</span>\n<span class="nx">reject</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>\n  <span class="c1">// 上面已有代码，因此省略\n</span><span class="c1"></span>  <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">onRejectedCallback</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">onRejectedCallback</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="R4icGk5B">到这里，我们就已经可以处理Promise的异步调用了，即这种形式的：</p><div class="highlight"><pre><code class="language-js"><span class="kr">const</span> <span class="nx">prom5</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">resolve</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="mi">1000</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="nx">prom5</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom5成功&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>\n<span class="p">},</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom5失败&#39;</span><span class="p">,</span> <span class="nx">reason</span><span class="p">)</span>\n<span class="p">})</span>\n</code></pre></div><h3>对同一个Promise多次调用then</h3><p data-pid="I87JUgkV">对于同一个Promise，如果多次调用then，上面的代码是无法处理的，例如：</p><div class="highlight"><pre><code class="language-js"><span class="kr">const</span> <span class="nx">prom7</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">resolve</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="mi">1000</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="nx">prom7</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom7成功1&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>\n<span class="p">},</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom7失败1&#39;</span><span class="p">,</span> <span class="nx">reason</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="nx">prom7</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom7成功2&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>\n<span class="p">},</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom7失败2&#39;</span><span class="p">,</span> <span class="nx">reason</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="c1">// 应该输出的结果:\n</span><span class="c1">// prom7成功1 1\n</span><span class="c1">// prom7成功2 1\n</span><span class="c1">// 目前输出的结果：\n</span><span class="c1">// prom7成功2 1\n</span></code></pre></div><p data-pid="pkCWVNNf">可以看到，对同一个promise调用了两次then方法，按道理我们应该输出两次结果，但现在仅输出了一次。这是因为，我们的then回调函数属性<code>onFulfilledCallback</code>只能保存一个回调函数。如果遇到多个then方法，新的回调函数会把原有的覆盖掉，所以旧的就不会被调用了。因此，我们把回调函数属性改成数组。</p><div class="highlight"><pre><code class="language-js"><span class="nx">onFulfilledCallback</span> <span class="o">=</span> <span class="p">[]</span>\n<span class="nx">onRejectedCallback</span> <span class="o">=</span> <span class="p">[]</span>\n</code></pre></div><p data-pid="8BmgmZxJ">同样的，处理一下then方法和resolve、reject函数，适配数组形式。</p><div class="highlight"><pre><code class="language-js"><span class="nx">then</span><span class="p">(</span><span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">)</span> <span class="p">{</span>\n  <span class="c1">// 上面已有代码，因此省略\n</span><span class="c1"></span>  <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">onFulfilledCallback</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">onFulfilled</span><span class="p">)</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">onRejectedCallback</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">onRejected</span><span class="p">)</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n<span class="nx">resolve</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>\n  <span class="c1">// 上面已有代码，因此省略\n</span><span class="c1"></span>  <span class="k">this</span><span class="p">.</span><span class="nx">onFulfilledCallbackList</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">callback</span> <span class="p">=&gt;</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">value</span><span class="p">))</span>\n  <span class="k">this</span><span class="p">.</span><span class="nx">onFulfilledCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n<span class="p">}</span>\n<span class="nx">reject</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>\n  <span class="c1">// 上面已有代码，因此省略\n</span><span class="c1"></span>  <span class="k">this</span><span class="p">.</span><span class="nx">onRejectedCallbackList</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">callback</span> <span class="p">=&gt;</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">reason</span><span class="p">))</span>\n  <span class="k">this</span><span class="p">.</span><span class="nx">onRejectedCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="RYYmPiuy">清空数组不是必须的，因为promise的状态只会改变一次。当状态改变之后，resolve、reject函数就没有执行的机会了。即使后面再调用then方法，回调函数也直接执行了，不会被加入数组中。因此即使不清空，也是可以的。</p><h3>第二部分完整代码</h3><div class="highlight"><pre><code class="language-js"><span class="c1">// 三种状态常量\n</span><span class="c1"></span><span class="kr">const</span> <span class="nx">STATE_PENDING</span> <span class="o">=</span> <span class="s1">&#39;pending&#39;</span>\n<span class="kr">const</span> <span class="nx">STATE_FULFILLED</span> <span class="o">=</span> <span class="s1">&#39;fulfilled&#39;</span>\n<span class="kr">const</span> <span class="nx">STATE_REJECTED</span> <span class="o">=</span> <span class="s1">&#39;rejected&#39;</span>\n\n<span class="kr">class</span> <span class="nx">PromiseJz</span> <span class="p">{</span>\n  <span class="c1">// 构造函数，接收一个函数作为入参\n</span><span class="c1"></span>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">executor</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">try</span> <span class="p">{</span>\n    <span class="c1">// 立即执行函数 需要手动指定bind指向\n</span><span class="c1"></span>    <span class="nx">executor</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">resolve</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">),</span> <span class="k">this</span><span class="p">.</span><span class="nx">reject</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">))</span>\n    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n      <span class="c1">// 出现异常则认为rejected\n</span><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n\n  <span class="c1">// 实例属性 状态，默认为pending\n</span><span class="c1"></span>  <span class="nx">state</span> <span class="o">=</span> <span class="nx">STATE_PENDING</span>\n  <span class="c1">// 成功的值\n</span><span class="c1"></span>  <span class="nx">value</span> <span class="o">=</span> <span class="kc">null</span>\n  <span class="c1">// 失败的原因\n</span><span class="c1"></span>  <span class="nx">reason</span> <span class="o">=</span> <span class="kc">null</span>\n  <span class="c1">// 异步promise调用then时的回调 处理对同一个Promise多次调用then的情况，需要用数组\n</span><span class="c1"></span>  <span class="nx">onFulfilledCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n  <span class="nx">onRejectedCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n\n  <span class="nx">resolve</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 只处理pending状态\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">!==</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="k">return</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">STATE_FULFILLED</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span>\n    <span class="c1">// 状态改变时如果有回调函数需要执行\n</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">onFulfilledCallbackList</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">callback</span> <span class="p">=&gt;</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">value</span><span class="p">))</span>\n    <span class="c1">// 处理完再清空数组\n</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">onFulfilledCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n  <span class="p">}</span>\n  <span class="nx">reject</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 只处理pending状态\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">!==</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="k">return</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">STATE_REJECTED</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">reason</span> <span class="o">=</span> <span class="nx">reason</span>\n    <span class="c1">// 状态改变时如果有回调函数需要执行\n</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">onRejectedCallbackList</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">callback</span> <span class="p">=&gt;</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">reason</span><span class="p">))</span>\n    <span class="c1">// 处理完再清空数组\n</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">onRejectedCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n  <span class="p">}</span>\n\n  <span class="nx">then</span><span class="p">(</span><span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_FULFILLED</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">onFulfilled</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span>\n    <span class="p">}</span>\n    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_REJECTED</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">onRejected</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">reason</span><span class="p">)</span>\n    <span class="p">}</span>\n    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="p">{</span>\n      <span class="c1">// pending状态时，无法执行回调，因此把状态写入属性中，等后续状态改变时执行\n</span><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">onFulfilledCallbackList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">onFulfilled</span><span class="p">)</span>\n      <span class="k">this</span><span class="p">.</span><span class="nx">onRejectedCallbackList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">onRejected</span><span class="p">)</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">PromiseJz</span>\n</code></pre></div><h2>第三部分 完善then方法</h2><h3>then的链式调用</h3><p data-pid="c_7D1jzT">Promise的then方法会返回一个promise，可以进行链式调用的，例如：</p><div class="highlight"><pre><code class="language-js"><span class="kr">const</span> <span class="nx">prom8</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">resolve</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="mi">1000</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="nx">prom8</span><span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">value</span> <span class="o">+</span> <span class="mi">1</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom8成功&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>\n<span class="p">})</span>\n</code></pre></div><p data-pid="Xi_6gZXr">但是目前我们的then方法没有返回值，因此目前会报错：</p><div class="highlight"><pre><code class="language-js"><span class="nx">prom8</span><span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">value</span> <span class="o">+</span> <span class="mi">1</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n                                <span class="o">^</span>\n<span class="nx">TypeError</span><span class="o">:</span> <span class="nx">Cannot</span> <span class="nx">read</span> <span class="nx">properties</span> <span class="k">of</span> <span class="kc">undefined</span> <span class="p">(</span><span class="nx">reading</span> <span class="s1">&#39;then&#39;</span><span class="p">)</span>\n</code></pre></div><p data-pid="SF72FGqf">这里我们处理一下then方法，返回一个Promise。同时加入了try/catch，当引发异常时会调用reject。</p><div class="highlight"><pre><code class="language-js"><span class="nx">then</span><span class="p">(</span><span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">)</span> <span class="p">{</span>\n  <span class="k">return</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_FULFILLED</span><span class="p">)</span> <span class="p">{</span>\n      <span class="k">try</span> <span class="p">{</span>\n        <span class="nx">resolve</span><span class="p">(</span><span class="nx">onFulfilled</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">))</span>\n      <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n      <span class="p">}</span>\n    <span class="p">}</span>\n    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_REJECTED</span><span class="p">)</span> <span class="p">{</span>\n      <span class="k">try</span> <span class="p">{</span>\n        <span class="nx">resolve</span><span class="p">(</span><span class="nx">onRejected</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">reason</span><span class="p">))</span>\n      <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n      <span class="p">}</span>\n    <span class="p">}</span>\n    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="p">{</span>\n      <span class="c1">// pending状态时，无法执行回调，因此把状态写入属性中，等后续状态改变时执行\n</span><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">onFulfilledCallbackList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">onFulfilled</span><span class="p">)</span>\n      <span class="k">this</span><span class="p">.</span><span class="nx">onRejectedCallbackList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">onRejected</span><span class="p">)</span>\n    <span class="p">}</span>\n  <span class="p">})</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="klkDp3Pg">可以看到，不管状态是fulfilled还是rejected，都会调用resolve函数。</p><h3>处理pending状态的then的链式调用</h3><p data-pid="hnopz3Ex">上面处理了fulfilled和rejected状态，pending状态也是需要处理的，但是由于是回调，因此处理上有点不同。</p><div class="highlight"><pre><code class="language-js"><span class="nx">then</span><span class="p">(</span><span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">)</span> <span class="p">{</span>\n  <span class="k">return</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="c1">// 上面已有代码，因此省略\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="p">{</span>\n      <span class="k">this</span><span class="p">.</span><span class="nx">onFulfilledCallbackList</span><span class="p">.</span><span class="nx">push</span><span class="p">((</span><span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="k">try</span> <span class="p">{</span>\n          <span class="nx">resolve</span><span class="p">(</span><span class="nx">onFulfilled</span><span class="p">(</span><span class="nx">value</span><span class="p">))</span>\n        <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n          <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n        <span class="p">}</span>\n      <span class="p">})</span>\n      <span class="k">this</span><span class="p">.</span><span class="nx">onRejectedCallbackList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="k">try</span> <span class="p">{</span>\n          <span class="nx">resolve</span><span class="p">(</span><span class="nx">onRejected</span><span class="p">(</span><span class="nx">reason</span><span class="p">))</span>\n        <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n          <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n        <span class="p">}</span>\n      <span class="p">})</span>\n    <span class="p">}</span>\n  <span class="p">})</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="qVHUjLyD">实际上就是将回调函数包裹了一层，接收结果，进行和上一节一样的处理。</p><p data-pid="YP4q1ODb">写到这里，上面的prom8测试也能够正常返回结果了：</p><div class="highlight"><pre><code class="language-text">prom8成功 2</code></pre></div><h3>then省略入参</h3><p data-pid="GvNo754T">then方法中的两个入参是可以不传的，例如：</p><div class="highlight"><pre><code class="language-js"><span class="kr">const</span> <span class="nx">prom9</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n  <span class="nx">reject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="nx">prom9</span><span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom9成功&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>\n<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom9失败&#39;</span><span class="p">,</span> <span class="nx">reason</span><span class="p">)</span>\n<span class="p">})</span>\n</code></pre></div><p data-pid="Ym6Mou_D">但是现在我们的代码没有处理这种情况，会报错。因此，我们为两个入参提供一个默认值，使Promise传递下去，后面也能接收到。</p><div class="highlight"><pre><code class="language-js"><span class="c1">// 错误的代码  仅为示例\n</span><span class="c1"></span><span class="nx">then</span><span class="p">(</span><span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">)</span> <span class="p">{</span>\n  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">onFulfilled</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">onFulfilled</span> <span class="o">=</span> <span class="nx">value</span> <span class="p">=&gt;</span> <span class="nx">value</span>\n  <span class="p">}</span>\n  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">onRejected</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">onRejected</span> <span class="o">=</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="nx">reason</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="cXQ8RtaR">上面的处理看起来还不错，提供了默认值，对于fulfilled状态的默认值处理也是正确的，例如：</p><div class="highlight"><pre><code class="language-js"><span class="kr">const</span> <span class="nx">prom10</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n  <span class="nx">resolve</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="nx">prom10</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom10失败&#39;</span><span class="p">,</span> <span class="nx">reason</span><span class="p">)</span>\n<span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom10成功&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>\n<span class="p">})</span>\n</code></pre></div><p data-pid="47f-57XB">prom10测试中，第一个then省略了onFulfilled函数，我们提供了默认值，并在第二个then中接收到。</p><p data-pid="cHzywDU0">但是对于上面的prom9测试，Promise的状态是rejected，第一个then省略了onRejected函数，但是第二个then的onRejected函数却没有捕捉到。因为我们的默认onRejected函数并没有传递rejected状态，而是把返回的新promise设置为了fulfilled状态。因此，默认的onRejected函数和入参中实际提供的onRejected函数效果是不一致的。</p><ul><li data-pid="JMcTXMob">入参中实际提供的onRejected函数相当于捕捉了异常，如果没有引发新的异常，则返回的新promise设置为fulfilled状态。</li><li data-pid="zx9Wr026">默认的onRejected函数不能捕捉异常，而是将rejected状态传递下去。</li></ul><p data-pid="zRC2sjhC">这里我们使用引发异常的方式来传递。</p><div class="highlight"><pre><code class="language-js"><span class="nx">then</span><span class="p">(</span><span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">)</span> <span class="p">{</span>\n  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">onRejected</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">onRejected</span> <span class="o">=</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">throw</span> <span class="nx">reason</span> <span class="p">}</span>\n  <span class="p">}</span>\n  <span class="c1">// 上面已有代码，因此省略\n</span><span class="c1"></span><span class="p">}</span>\n</code></pre></div><p data-pid="w7bbqBjT">到这里，我们的prom9测试也能通过了。</p><h3>then的回调函数返回Promise</h3><p data-pid="L00diSfq">如果then的回调函数中返回了一个Promise，那么then返回的新Promise就由这个回调函数中返回的Promise决定。说起来有点绕口，我们看下例子：</p><div class="highlight"><pre><code class="language-js"><span class="c1">// 使用ES官方的Promise查看效果\n</span><span class="c1"></span><span class="nx">PromiseJz</span> <span class="o">=</span> <span class="nb">Promise</span>\n\n<span class="kr">const</span> <span class="nx">prom13</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">resolve</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="mi">1000</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="nx">prom13</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="c1">// then中返回了新的promise\n</span><span class="c1"></span>  <span class="k">return</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">resolve</span><span class="p">(</span><span class="nx">value</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="mi">1000</span><span class="p">)</span>\n  <span class="p">})</span>\n<span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom13成功&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="c1">// 输出 prom13成功 2\n</span></code></pre></div><p data-pid="lb1YMwGY">可以看到，如果then方法的回调中返回的是一个新的Promise。这时候，下一个then中输出的不是一个Promise对象（目前我们的代码输出的是这个）。而是这个新的Promise的结果。因此，我们的也要加入返回Promise的判断。</p><div class="highlight"><pre><code class="language-js"><span class="nx">then</span><span class="p">(</span><span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">)</span> <span class="p">{</span>\n  <span class="c1">// 上面已有代码，因此省略\n</span><span class="c1"></span>  <span class="k">return</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_FULFILLED</span><span class="p">)</span> <span class="p">{</span>\n      <span class="k">try</span> <span class="p">{</span>\n        <span class="kr">const</span> <span class="nx">newValue</span> <span class="o">=</span> <span class="nx">onFulfilled</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span>\n        <span class="c1">// 如果返回一个Promise，那么状态要根据这个Promise来定\n</span><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="nx">newValue</span> <span class="k">instanceof</span> <span class="nx">PromiseJz</span><span class="p">)</span> <span class="p">{</span>\n          <span class="nx">newValue</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n          <span class="nx">resolve</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span>\n        <span class="p">}</span>\n      <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n      <span class="p">}</span>\n    <span class="p">}</span>\n    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_REJECTED</span><span class="p">)</span> <span class="p">{</span>\n      <span class="k">try</span> <span class="p">{</span>\n        <span class="kr">const</span> <span class="nx">newValue</span> <span class="o">=</span> <span class="nx">onRejected</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">reason</span><span class="p">)</span>\n        <span class="c1">// 如果返回一个Promise，那么状态要根据这个Promise来定\n</span><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="nx">newValue</span> <span class="k">instanceof</span> <span class="nx">PromiseJz</span><span class="p">)</span> <span class="p">{</span>\n          <span class="nx">newValue</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n          <span class="nx">resolve</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span>\n        <span class="p">}</span>\n      <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n      <span class="p">}</span>\n    <span class="p">}</span>\n    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="p">{</span>\n      <span class="c1">// pending状态时，无法执行回调，因此把状态写入属性中，等后续状态改变时执行\n</span><span class="c1"></span>      <span class="c1">// 处理链式调用，需要返回promise状态\n</span><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">onFulfilledCallbackList</span><span class="p">.</span><span class="nx">push</span><span class="p">((</span><span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="k">try</span> <span class="p">{</span>\n          <span class="kr">const</span> <span class="nx">newValue</span> <span class="o">=</span> <span class="nx">onFulfilled</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>\n          <span class="c1">// 如果返回一个Promise，那么状态要根据这个Promise来定\n</span><span class="c1"></span>          <span class="k">if</span><span class="p">(</span><span class="nx">newValue</span> <span class="k">instanceof</span> <span class="nx">PromiseJz</span><span class="p">)</span> <span class="p">{</span>\n            <span class="nx">newValue</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n            <span class="nx">resolve</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span>\n          <span class="p">}</span>\n        <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n          <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n        <span class="p">}</span>\n      <span class="p">})</span>\n      <span class="k">this</span><span class="p">.</span><span class="nx">onRejectedCallbackList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="k">try</span> <span class="p">{</span>\n          <span class="kr">const</span> <span class="nx">newValue</span> <span class="o">=</span> <span class="nx">onRejected</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span>\n          <span class="c1">// 如果返回一个Promise，那么状态要根据这个Promise来定\n</span><span class="c1"></span>          <span class="k">if</span><span class="p">(</span><span class="nx">newValue</span> <span class="k">instanceof</span> <span class="nx">PromiseJz</span><span class="p">)</span> <span class="p">{</span>\n            <span class="nx">newValue</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n            <span class="nx">resolve</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span>\n          <span class="p">}</span>\n        <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n          <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n        <span class="p">}</span>\n      <span class="p">})</span>\n    <span class="p">}</span>\n  <span class="p">})</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="_pBN71HO">可以看到，fulfilled和rejected状态的处理基本一致，同时pending的回调中处理方法也是一样的，因此，我们可以抽象出一个处理函数。这也是Promises/A+规范中的做法。</p><div class="highlight"><pre><code class="language-js"><span class="c1">// then中的回调处理\n</span><span class="c1">// value 返回值  onCallback 回调\n</span><span class="c1"></span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">onCallback</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n  <span class="k">try</span> <span class="p">{</span>\n    <span class="kr">const</span> <span class="nx">newValue</span> <span class="o">=</span> <span class="nx">onCallback</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>\n    <span class="c1">// 如果返回一个Promise，那么状态要根据这个Promise来定\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="nx">newValue</span> <span class="k">instanceof</span> <span class="nx">PromiseJz</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">newValue</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n      <span class="nx">resolve</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span>\n      <span class="p">}</span>\n  <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="qCklonVC">我们再将原来的代码使用处理函数改写下：</p><div class="highlight"><pre><code class="language-js"><span class="nx">then</span><span class="p">(</span><span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">)</span> <span class="p">{</span>\n  <span class="c1">// 上面已有代码，因此省略\n</span><span class="c1"></span>  <span class="k">return</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_FULFILLED</span><span class="p">)</span> <span class="p">{</span>\n      <span class="k">this</span><span class="p">.</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span> <span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n    <span class="p">}</span>\n    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_REJECTED</span><span class="p">)</span> <span class="p">{</span>\n      <span class="k">this</span><span class="p">.</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">reason</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n    <span class="p">}</span>\n    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="p">{</span>\n      <span class="k">this</span><span class="p">.</span><span class="nx">onFulfilledCallbackList</span><span class="p">.</span><span class="nx">push</span><span class="p">((</span><span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="k">this</span><span class="p">.</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n      <span class="p">})</span>\n      <span class="k">this</span><span class="p">.</span><span class="nx">onRejectedCallbackList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="k">this</span><span class="p">.</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">reason</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n      <span class="p">})</span>\n    <span class="p">}</span>\n  <span class="p">})</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="mi2IPWeq">改之后，代码看起来舒服多了!</p><h3>第三部分完整代码</h3><div class="highlight"><pre><code class="language-js"><span class="c1">// 三种状态常量\n</span><span class="c1"></span><span class="kr">const</span> <span class="nx">STATE_PENDING</span> <span class="o">=</span> <span class="s1">&#39;pending&#39;</span>\n<span class="kr">const</span> <span class="nx">STATE_FULFILLED</span> <span class="o">=</span> <span class="s1">&#39;fulfilled&#39;</span>\n<span class="kr">const</span> <span class="nx">STATE_REJECTED</span> <span class="o">=</span> <span class="s1">&#39;rejected&#39;</span>\n\n<span class="kr">class</span> <span class="nx">PromiseJz</span> <span class="p">{</span>\n  <span class="c1">// 构造函数，接收一个函数作为入参\n</span><span class="c1"></span>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">executor</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">try</span> <span class="p">{</span>\n    <span class="c1">// 立即执行函数 需要手动指定bind指向\n</span><span class="c1"></span>    <span class="nx">executor</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">resolve</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">),</span> <span class="k">this</span><span class="p">.</span><span class="nx">reject</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">))</span>\n    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n      <span class="c1">// 出现异常则认为rejected\n</span><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n\n  <span class="c1">// 实例属性 状态，默认为pending\n</span><span class="c1"></span>  <span class="nx">state</span> <span class="o">=</span> <span class="nx">STATE_PENDING</span>\n  <span class="c1">// 成功的值\n</span><span class="c1"></span>  <span class="nx">value</span> <span class="o">=</span> <span class="kc">null</span>\n  <span class="c1">// 失败的原因\n</span><span class="c1"></span>  <span class="nx">reason</span> <span class="o">=</span> <span class="kc">null</span>\n  <span class="c1">// 异步promise调用then时的回调 处理对同一个Promise多次调用then的情况，需要用数组\n</span><span class="c1"></span>  <span class="nx">onFulfilledCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n  <span class="nx">onRejectedCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n\n  <span class="nx">resolve</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 只处理pending状态\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">!==</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="k">return</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">STATE_FULFILLED</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span>\n    <span class="c1">// 状态改变时如果有回调函数需要执行\n</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">onFulfilledCallbackList</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">callback</span> <span class="p">=&gt;</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">value</span><span class="p">))</span>\n    <span class="c1">// 处理完再清空数组\n</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">onFulfilledCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n  <span class="p">}</span>\n  <span class="nx">reject</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 只处理pending状态\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">!==</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="k">return</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">STATE_REJECTED</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">reason</span> <span class="o">=</span> <span class="nx">reason</span>\n    <span class="c1">// 状态改变时如果有回调函数需要执行\n</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">onRejectedCallbackList</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">callback</span> <span class="p">=&gt;</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">reason</span><span class="p">))</span>\n    <span class="c1">// 处理完再清空数组\n</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">onRejectedCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n  <span class="p">}</span>\n\n  <span class="c1">// then中的回调处理\n</span><span class="c1"></span>  <span class="c1">// value 返回值  onCallback 回调\n</span><span class="c1"></span>  <span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">onCallback</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">try</span> <span class="p">{</span>\n      <span class="kr">const</span> <span class="nx">newValue</span> <span class="o">=</span> <span class="nx">onCallback</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>\n      <span class="c1">// 如果返回一个Promise，那么状态要根据这个Promise来定\n</span><span class="c1"></span>      <span class="k">if</span><span class="p">(</span><span class="nx">newValue</span> <span class="k">instanceof</span> <span class="nx">PromiseJz</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">newValue</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n        <span class="nx">resolve</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span>\n        <span class="p">}</span>\n    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n\n  <span class="nx">then</span><span class="p">(</span><span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 回调的默认值，适用于省略入参\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">onFulfilled</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">onFulfilled</span> <span class="o">=</span> <span class="nx">value</span> <span class="p">=&gt;</span> <span class="nx">value</span>\n    <span class="p">}</span>\n    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">onRejected</span><span class="p">)</span> <span class="p">{</span>\n      <span class="c1">// 使用引发异常的方式来传递 rejected状态\n</span><span class="c1"></span>      <span class="nx">onRejected</span> <span class="o">=</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">throw</span> <span class="nx">reason</span> <span class="p">}</span>\n    <span class="p">}</span>\n    <span class="c1">// 返回Promise，适配链式调用\n</span><span class="c1"></span>    <span class="k">return</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_FULFILLED</span><span class="p">)</span> <span class="p">{</span>\n        <span class="k">this</span><span class="p">.</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span> <span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n      <span class="p">}</span>\n      <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_REJECTED</span><span class="p">)</span> <span class="p">{</span>\n        <span class="k">this</span><span class="p">.</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">reason</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n      <span class="p">}</span>\n      <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="p">{</span>\n        <span class="c1">// pending状态时，无法执行回调，因此把状态写入属性中，等后续状态改变时执行\n</span><span class="c1"></span>        <span class="k">this</span><span class="p">.</span><span class="nx">onFulfilledCallbackList</span><span class="p">.</span><span class="nx">push</span><span class="p">((</span><span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n          <span class="k">this</span><span class="p">.</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n        <span class="p">})</span>\n        <span class="k">this</span><span class="p">.</span><span class="nx">onRejectedCallbackList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n          <span class="k">this</span><span class="p">.</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">reason</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n        <span class="p">})</span>\n      <span class="p">}</span>\n    <span class="p">})</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">PromiseJz</span>\n</code></pre></div><h2>第四部分 更多异常处理</h2><h3>Promise循环调用自身</h3><p data-pid="t14hkqDm">考虑这样一种情况，then中返回的Promise是它自身。看一下例子：</p><div class="highlight"><pre><code class="language-js"><span class="kr">const</span> <span class="nx">prom16</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">resolve</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="mi">1000</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="kr">const</span> <span class="nx">prom16Then</span> <span class="o">=</span> <span class="nx">prom16</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom16成功1&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>\n  <span class="k">return</span> <span class="nx">prom16Then</span>\n<span class="p">})</span>\n<span class="nx">prom16Then</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom16成功2&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>\n<span class="p">},</span> <span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom16失败2&#39;</span><span class="p">,</span> <span class="nx">reason</span><span class="p">)</span>\n<span class="p">})</span>\n</code></pre></div><p data-pid="jrNv6C0A">这时候，prom16Then这个Promise是then方法返回的这个Promise。但是这个Promise返回了prom16Then，因此是依赖于prom16Then的状态。此时prom16Then的更改状态是依赖于prom16Then自身的状态的。由于循环调用了自身，因此这个Promise永远都不会更改状态。</p><p data-pid="xlOvT2kS">Promises/A+规范要求遇到这种情况时，程序需要抛出TypeError异常，这个异常是可以被then方法的第二个回调函数捕获到的。我们参考Node.js中的异常提示来实现。</p><div class="highlight"><pre><code class="language-js"><span class="nx">TypeError</span><span class="o">:</span> <span class="nx">Chaining</span> <span class="nx">cycle</span> <span class="nx">detected</span> <span class="k">for</span> <span class="nx">promise</span> <span class="err">#</span><span class="o">&lt;</span><span class="nb">Promise</span><span class="o">&gt;</span>\n</code></pre></div><p data-pid="A2MONsRU">修改下resolutionProduce函数，加入识别自身的判断。这里我们直接引发了TypeError，由下面的catch去捕获处理。</p><div class="highlight"><pre><code class="language-js"><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">onCallback</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n  <span class="k">try</span> <span class="p">{</span>\n    <span class="kr">const</span> <span class="nx">newValue</span> <span class="o">=</span> <span class="nx">onCallback</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>\n    <span class="c1">// 如果循环调用自身，抛出TypeError\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="nx">thenPromise</span> <span class="o">===</span> <span class="nx">newValue</span><span class="p">)</span> <span class="p">{</span>\n      <span class="k">throw</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s1">&#39;Chaining cycle detected for promise #&lt;Promise&gt;&#39;</span><span class="p">)</span>\n    <span class="p">}</span>\n    <span class="c1">// 如果返回一个Promise，那么状态要根据这个Promise来定\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="nx">newValue</span> <span class="k">instanceof</span> <span class="nx">PromiseJz</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">newValue</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n      <span class="nx">resolve</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span>\n    <span class="p">}</span>\n  <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="7fbc50qB">这样上面的prom16测试也可以通过了。</p><h3>then异常处理的问题</h3><p data-pid="zShEV_W8">但上面的代码还是有问题：如果我们把prom16测试中then的第二个入参，即onRejected回调删除，JS中原生的Promise是会引发异常的。但是我们的Promise拦截了。我们抛开循环调用自身的场景，看一个简单的例子：</p><div class="highlight"><pre><code class="language-js"><span class="nx">PromiseJz</span> <span class="o">=</span> <span class="nb">Promise</span>\n<span class="kr">const</span> <span class="nx">prom21</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">resolve</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="mi">1000</span><span class="p">)</span>\n<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="c1">// 情况1\n</span><span class="c1"></span><span class="nx">prom21</span><span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{})</span>\n<span class="c1">// 情况2\n</span><span class="c1"></span><span class="nx">prom21</span><span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{},</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom21失败2&#39;</span><span class="p">,</span><span class="nx">reason</span><span class="p">)</span>\n<span class="p">})</span>\n</code></pre></div><p data-pid="IQp1jPRq">对于prom21测试，JS中原生的Promise的现象是：情况1应该未捕获异常，情况2捕获则到了这个异常，然后输出。最后程序还是会异常终止。如果只保留情况2，则程序可以正常结束。而我们的代码在情况2可以正常运行，情况1则不会有任何输出或异常终止。</p><p data-pid="YKwGyA2x">这是因为即使我们没有手动捕获，resolutionProduce函数也替我们捕获了异常，给了reject函数。即使后续没有then来处理这个reject，异常也不会再抛出了。</p><p data-pid="USmX3554">但是如果我们去掉resolutionProduce函数中的try/catch，或者捕获并提供给reject之后再抛出，这个异常都无法被捕获，都不能实现和JS中原生的Promise一样的效果。这是因为我们需要在前一个then方法上抛出一个真正的异常，然后在后一个then方法中捕获。如果后一个then方法的onRejected回调不存在，则异常被真正抛出，如果onRejected回调存在，则不抛出，而是被捕获。</p><p data-pid="xU2k0eW3">我们再尝试把then放到setTimeout中，让捕获的时间晚于抛出异常的时间。</p><div class="highlight"><pre><code class="language-js"><span class="kr">const</span> <span class="nx">prom22</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">resolve</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="mi">1000</span><span class="p">)</span>\n<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">prom22</span><span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{},</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom22失败2&#39;</span><span class="p">,</span><span class="nx">reason</span><span class="p">)</span>\n  <span class="p">})</span>\n<span class="p">},</span> <span class="mi">1000</span><span class="p">)</span>\n</code></pre></div><p data-pid="BjytbnLo">在Node.js中，依旧是抛出异常结束程序。而在Chrome浏览器的Console中，先是抛出了红字的未捕获异常，然后过了一秒当then方法执行后，红字又变成黑字，意思是异常被捕获到了。</p><figure data-size="normal"><img src="https://picx.zhimg.com/v2-94c63f57bd80a5081ae0998ba9c7527b_b.jpg" data-rawwidth="1301" data-rawheight="506" data-size="normal" data-caption="" data-original-token="v2-94c63f57bd80a5081ae0998ba9c7527b" class="origin_image zh-lightbox-thumb" width="1301" data-original="https://picx.zhimg.com/v2-94c63f57bd80a5081ae0998ba9c7527b_r.jpg"/></figure><p data-pid="WOmUzu0A">这部分在Promises/A+规范中并未要求，但我还是尝试实现一下。（Chrome中的这种操作肯定是做不到的）</p><p data-pid="tr571gGs">首先增加一个实例属性，代表then中的onRejected是否传入过。然后修改resolutionProduce函数，在捕获异常的同时，如果新生成的Promise已经传入过onRejected回调，这时说明异常会被新的Promise中的then捕获到，因此不抛出异常。反之则抛出异常。</p><div class="highlight"><pre><code class="language-js"><span class="nx">thenOnRejectedFlag</span> <span class="o">=</span> <span class="kc">false</span>\n\n<span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">onCallback</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n  <span class="k">try</span> <span class="p">{</span>\n    <span class="c1">// 上面已有代码，因此省略\n</span><span class="c1"></span>  <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">thenPromise</span><span class="p">.</span><span class="nx">thenOnRejectedFlag</span><span class="p">)</span>\n      <span class="k">throw</span> <span class="nx">err</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div><h3>Promise构造函数回调中resolve值为Promise</h3><p data-pid="G18vPAdU">上一步我们处理了then方法中返回Promise的情况，此时后一个then方法的状态是由这个返回的Promise来确定的。同样的，Promise构造函数的回调中如果resolve返回的是一个Promise，后续then方法的状态也是由返回的Promise来确定的。我们看一下例子：</p><div class="highlight"><pre><code class="language-js"><span class="kr">const</span> <span class="nx">prom24</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n  <span class="kr">const</span> <span class="nx">returnProm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolveItem</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">resolveItem</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>\n  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">resolve</span><span class="p">(</span><span class="nx">returnProm</span><span class="p">),</span> <span class="mi">1000</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="nx">prom24</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom24成功&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>\n<span class="p">})</span>\n\n<span class="c1">// JS原生Promise输出 prom24成功 10\n</span><span class="c1">// 我们的PromiseJz输出 prom24成功 PromiseJz { ...省略 }\n</span></code></pre></div><p data-pid="oChaaCWF">使用JS中原生的Promise，输出的是returnProm最终resolve的值，也就是10。但是我们的Promise输出的却是一个Promise对象。这部分在Promises/A+规范中也没有涉及，但我们这里还是做一下处理。</p><p data-pid="S3HDMZKT">此时有一个疑问，我们是在then中判断当前的Promise值为一个Promise，再进行处理；还是在resolve和reject的时候，判断如果接收到的是一个Promise，则等待这个Promise状态改变后再改变本身的状态？JS中原生的Promise选择了后者。我们再看一个例子：</p><div class="highlight"><pre><code class="language-js"><span class="nx">PromiseJz</span> <span class="o">=</span> <span class="nb">Promise</span>\n<span class="kr">const</span> <span class="nx">prom25</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n  <span class="kr">const</span> <span class="nx">returnProm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolveItem</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">resolveItem</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span> <span class="mi">3000</span><span class="p">))</span>\n  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">resolve</span><span class="p">(</span><span class="nx">returnProm</span><span class="p">)</span>\n    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;1秒时&#39;</span><span class="p">)</span>\n    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;2秒时&#39;</span><span class="p">,</span> <span class="nx">prom25</span><span class="p">)</span> <span class="p">},</span> <span class="mi">1000</span><span class="p">)</span>\n  <span class="p">},</span> <span class="mi">1000</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="nx">prom25</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;3秒时 prom25成功&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="cm">/* 输出结果\n</span><span class="cm">1秒时\n</span><span class="cm">2秒时 Promise { &lt;pending&gt; }\n</span><span class="cm">3秒时 prom25成功 10\n</span><span class="cm">*/</span>\n</code></pre></div><p data-pid="4shmcIhb">可以看到当第二秒时，此时已经调用过resolve了，但是resolve的值为一个Promise，这个Promise的状态还是Pending。这时候我们输出一下这个原始的Promise，发现还是Pending。所以，我们原始的Promise状态是由这个新的Promise决定的。</p><p data-pid="k2HGiHNV">再看看一个奇怪的现象：</p><div class="highlight"><pre><code class="language-js"><span class="nx">PromiseJz</span> <span class="o">=</span> <span class="nb">Promise</span>\n<span class="kr">const</span> <span class="nx">prom26</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n  <span class="kr">const</span> <span class="nx">returnProm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolveItem</span><span class="p">,</span> <span class="nx">rejectItem</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">resolveItem</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span> <span class="mi">3000</span><span class="p">))</span>\n  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">reject</span><span class="p">(</span><span class="nx">returnProm</span><span class="p">)</span>\n    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;1秒时&#39;</span><span class="p">)</span>\n    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;2秒时&#39;</span><span class="p">,</span> <span class="nx">prom26</span><span class="p">)</span> <span class="p">},</span> <span class="mi">1000</span><span class="p">)</span>\n  <span class="p">},</span> <span class="mi">1000</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="nx">prom26</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;3秒时 prom25成功&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>\n<span class="p">},</span> <span class="nx">resaon</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;3秒时 prom25失败&#39;</span><span class="p">,</span> <span class="nx">resaon</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="cm">/* 输出结果\n</span><span class="cm">1秒时\n</span><span class="cm">3秒时 prom25失败 Promise { &lt;pending&gt; }\n</span><span class="cm">2秒时 Promise { &lt;rejected&gt; Promise { &lt;pending&gt; } }\n</span><span class="cm">*/</span>\n</code></pre></div><p data-pid="4YegzEqq">prom26实例reject了一个新的Promise，这个Promise最终是<code>fulfilled</code>状态。这时候then反而先输出，捕获到了rejected状态，但此时新的Promise还在Pending。因此，resolve和reject的处理是不同的。更确切的说，reject调用时，不需要等待新的Promise状态变化，还是使用原来的方式处理即可。我们处理下resolve函数。</p><div class="highlight"><pre><code class="language-js"><span class="nx">resolve</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>\n  <span class="c1">// 只处理pending状态\n</span><span class="c1"></span>  <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">!==</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="k">return</span>\n  <span class="c1">// 如果值为一个新的Promise，那么状态由这个新的Promise确定\n</span><span class="c1"></span>  <span class="k">if</span><span class="p">(</span><span class="nx">value</span> <span class="k">instanceof</span> <span class="nx">PromiseJz</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">value</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">newValue</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">!==</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="k">return</span>\n      <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">STATE_FULFILLED</span>\n      <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">newValue</span>\n      <span class="c1">// 状态改变时如果有回调函数需要执行\n</span><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">onFulfilledCallbackList</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">callback</span> <span class="p">=&gt;</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">newValue</span><span class="p">))</span>\n      <span class="c1">// 处理完再清空数组\n</span><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">onFulfilledCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n    <span class="p">},</span> <span class="nx">newReason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="c1">// 只处理pending状态\n</span><span class="c1"></span>      <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">!==</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="k">return</span>\n      <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">STATE_REJECTED</span>\n      <span class="k">this</span><span class="p">.</span><span class="nx">reason</span> <span class="o">=</span> <span class="nx">newReason</span>\n      <span class="c1">// 状态改变时如果有回调函数需要执行\n</span><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">onRejectedCallbackList</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">callback</span> <span class="p">=&gt;</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">newReason</span><span class="p">))</span>\n      <span class="c1">// 处理完再清空数组\n</span><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">onRejectedCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n    <span class="p">})</span>\n  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">STATE_FULFILLED</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span>\n    <span class="c1">// 状态改变时如果有回调函数需要执行\n</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">onFulfilledCallbackList</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">callback</span> <span class="p">=&gt;</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">value</span><span class="p">))</span>\n    <span class="c1">// 处理完再清空数组\n</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">onFulfilledCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n  <span class="p">}</span>\n</code></pre></div><p data-pid="HL3VENb6">可以看到还是存在冗余的逻辑，我们再抽象出一个函数。</p><div class="highlight"><pre><code class="language-js"><span class="nx">resolve</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>\n  <span class="c1">// 如果值为一个新的Promise，那么状态由这个新的Promise确定\n</span><span class="c1"></span>  <span class="k">if</span><span class="p">(</span><span class="nx">value</span> <span class="k">instanceof</span> <span class="nx">PromiseJz</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">value</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">newValue</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">this</span><span class="p">.</span><span class="nx">resolveHandle</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span>\n    <span class="p">},</span> <span class="nx">newReason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">this</span><span class="p">.</span><span class="nx">rejectHandle</span><span class="p">(</span><span class="nx">newReason</span><span class="p">)</span>\n    <span class="p">})</span>\n  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">resolveHandle</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n<span class="c1">// resolve函数状态变更的处理逻辑\n</span><span class="c1"></span><span class="nx">resolveHandle</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>\n  <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">!==</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="k">return</span>\n  <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">STATE_FULFILLED</span>\n  <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span>\n  <span class="k">this</span><span class="p">.</span><span class="nx">onFulfilledCallbackList</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">callback</span> <span class="p">=&gt;</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">value</span><span class="p">))</span>\n  <span class="k">this</span><span class="p">.</span><span class="nx">onFulfilledCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n<span class="p">}</span>\n\n<span class="nx">reject</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>\n  <span class="k">this</span><span class="p">.</span><span class="nx">rejectHandle</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span>\n<span class="p">}</span>\n\n<span class="c1">// reject函数状态变更的处理逻辑\n</span><span class="c1"></span><span class="nx">rejectHandle</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>\n  <span class="c1">// 只处理pending状态\n</span><span class="c1"></span>  <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">!==</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="k">return</span>\n  <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">STATE_REJECTED</span>\n  <span class="k">this</span><span class="p">.</span><span class="nx">reason</span> <span class="o">=</span> <span class="nx">reason</span>\n  <span class="k">this</span><span class="p">.</span><span class="nx">onRejectedCallbackList</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">callback</span> <span class="p">=&gt;</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">reason</span><span class="p">))</span>\n  <span class="k">this</span><span class="p">.</span><span class="nx">onRejectedCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="4-aW3IZz">这下看起来又清爽多了，上面的例子也可以成功输出结果。不过这里的执行顺序目前还和JS原生的Promise不一致，而且prom24测试并未成功。我们下一步再完善。</p><h3>then的执行逻辑使用微任务</h3><p data-pid="s_QFa8BV">上面的测试24并未成功，我们的Promise不会返回结果。我调试了一下，简化为这样的场景：</p><div class="highlight"><pre><code class="language-js"><span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolveItem</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">resolveItem</span><span class="p">(</span><span class="mi">10</span><span class="p">)).</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;prom27成功&#34;</span><span class="p">,</span> <span class="nx">value</span><span class="p">))</span>\n</code></pre></div><p data-pid="rdE2SUUU">这种基础的场景，我们的Promise竟然没有输出！这是在第二部分时我们就已经测试过的。我调试了一下，发现是我们在then中处理重复调用自身抛出异常的逻辑时，使用到了then方法返回的Promise。在异步状态下，这个Promise肯定已经初始化完毕了，但如果是同步执行，这个新的Promise还没有初始化完毕。这时候我们拿它做判断是不对的。</p><p data-pid="RQ9aMtaB">规范中也要求了then中的回调要异步执行，在ECMAScript中设立了一个单独的微任务给Promise，规范中要求用宏任务或者微任务都可以。这里我们就采用在浏览器和Node.js中都可以使用的queueMicrotask作为延迟执行的方法。（至于兼容性？这里不考虑）对事件循环不熟悉的同学可以看一下我之前写的文章：<a href="https://link.zhihu.com/?target=https%3A//jzplp.github.io/2023/macro-micro-task.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">谈一谈浏览器与Node.js中的JavaScript事件循环，宏任务与微任务机制</a></p><p data-pid="Mmr-B1H5">我们改造一下then方法：</p><div class="highlight"><pre><code class="language-js"><span class="nx">then</span><span class="p">(</span><span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">)</span> <span class="p">{</span>\n  <span class="c1">// 上面已有代码，因此省略\n</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">thenPromise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_FULFILLED</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">queueMicrotask</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="k">this</span><span class="p">.</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span> <span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n      <span class="p">})</span>\n    <span class="p">}</span>\n    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_REJECTED</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">queueMicrotask</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="k">this</span><span class="p">.</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">reason</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n      <span class="p">})</span>\n    <span class="p">}</span>\n    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="p">{</span>\n      <span class="k">this</span><span class="p">.</span><span class="nx">onFulfilledCallbackList</span><span class="p">.</span><span class="nx">push</span><span class="p">((</span><span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="nx">queueMicrotask</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n          <span class="k">this</span><span class="p">.</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n        <span class="p">})</span>\n      <span class="p">})</span>\n      <span class="k">this</span><span class="p">.</span><span class="nx">onRejectedCallbackList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="nx">queueMicrotask</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n          <span class="k">this</span><span class="p">.</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="nx">reason</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n        <span class="p">})</span>\n      <span class="p">})</span>\n    <span class="p">}</span>\n  <span class="p">})</span>\n  <span class="k">return</span> <span class="nx">thenPromise</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="fzVC_Nsc">这里有几点需要注意： 1. 为了保持执行逻辑的一致，我们对于pending状态的处理也加入了微任务。 2. 作为函数参数传递也算“使用它的值”，因此即使上面的逻辑一样，也无法在resolutionProduce函数中统一处理，必须写在外面。</p><p data-pid="0Q03SODH">到这里，prom24和prom27测试都可以通过了。prom25和prom26测试的输出顺序也和JS中原生的Promise一致了。</p><h3>处理构造函数回调中返回自身</h3><p data-pid="EqM8aL4D">之前我们处理过then函数循环调用自身的情况，会抛出TypeError。如果构造函数的回调中也出现了调用自身的情况，ECMAScript中的Promise也会抛出同样的异常。看这个例子：</p><div class="highlight"><pre><code class="language-js"><span class="nx">PromiseJz</span> <span class="o">=</span> <span class="nb">Promise</span>\n<span class="kr">const</span> <span class="nx">prom28</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">resolve</span><span class="p">(</span><span class="nx">prom28</span><span class="p">),</span> <span class="mi">1000</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="nx">prom28</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom28成功&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="c1">// 输出结果\n</span><span class="c1">// TypeError: Chaining cycle detected for promise #&lt;Promise&gt;\n</span></code></pre></div><p data-pid="2wVWgAYH">经过测试，这里和then中的逻辑类似：如果没有then方法的onRejected回调，或者在执行到resolve时then方法还获取不到，就抛出异常，否则异常可以被捕获。</p><p data-pid="lgizDz-C">我们这里也做下处理：</p><div class="highlight"><pre><code class="language-js"><span class="nx">resolve</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>\n  <span class="c1">// 在构造函数回调中返回自身\n</span><span class="c1"></span>  <span class="k">if</span><span class="p">(</span><span class="nx">value</span> <span class="o">===</span> <span class="k">this</span><span class="p">)</span> <span class="p">{</span>\n    <span class="kr">const</span> <span class="nx">err</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s1">&#39;Chaining cycle detected for promise #&lt;Promise&gt;&#39;</span><span class="p">)</span>\n    <span class="c1">// 如果then传入过onRejected，则不抛出异常，而是触发rejected状态 否则抛出异常\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">thenOnRejectedFlag</span><span class="p">)</span> <span class="p">{</span>\n      <span class="k">this</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n      <span class="k">throw</span> <span class="nx">err</span>\n    <span class="p">}</span>\n    <span class="k">return</span>\n  <span class="p">}</span>\n  <span class="c1">// 上面已有代码，因此省略\n</span><span class="c1"></span><span class="p">}</span>\n</code></pre></div><p data-pid="oPqmdoo8">对于prom28测试，这段代码是生效的。但prom28是异步返回then，如果是同步返回呢？会不会遇到上面then使用微任务一样的问题，即这个Promise还没有创建完毕，就开始比较了？我们试一下：</p><div class="highlight"><pre><code class="language-js"><span class="nx">PromiseJz</span> <span class="o">=</span> <span class="nb">Promise</span>\n<span class="kr">const</span> <span class="nx">prom29</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n  <span class="nx">resolve</span><span class="p">(</span><span class="nx">prom29</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="c1">// 输出结果\n</span><span class="c1">// ReferenceError: Cannot access &#39;prom29&#39; before initialization\n</span></code></pre></div><p data-pid="RgB_ylB2">可以看到，如果是同步执行，还没进入到Promise内部的比较，就因为在初始化完成前就使用作为函数入参而抛出异常了。这个异常也可以被then中的onRejected回调捕获。但是在没有使用then的情况下，prom29在我们的代码上测试，没有抛出异常。这个问题我们在下一节处理。</p><h3>构造函数中所有rejected都作为异常</h3><p data-pid="yhCpT90D">上一节中，我们实际上在构造函数的回调中抛出了异常。这个异常会被构造函数捕获，并交给reject函数处理。但如果then中的onRejected回调不存在呢？此时我们的代码并不会输出异常。而是当作无事发生。更进一步，JS中原生的Promise，对于rejected状态的promise，如果没有then捕获，都会抛出异常，例如：</p><div class="highlight"><pre><code class="language-js"><span class="nx">PromiseJz</span> <span class="o">=</span> <span class="nb">Promise</span>\n<span class="kr">const</span> <span class="nx">prom30</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">reject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">})</span>\n</code></pre></div><p data-pid="hkQYy1Rd">上面这个测试在Chrome浏览器和Node.js中都会抛出未捕获的异常。因此，我们也做一下处理。</p><div class="highlight"><pre><code class="language-js"><span class="nx">constructor</span><span class="p">(</span><span class="nx">executor</span><span class="p">)</span> <span class="p">{</span>\n  <span class="k">try</span> <span class="p">{</span>\n    <span class="nx">executor</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">resolve</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">),</span> <span class="k">this</span><span class="p">.</span><span class="nx">reject</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">))</span>\n  <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">queueMicrotask</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">this</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">thenOnRejectedFlag</span><span class="p">)</span>\n        <span class="k">throw</span> <span class="nx">err</span>\n    <span class="p">})</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n<span class="c1">// reject函数状态变更的处理逻辑\n</span><span class="c1"></span><span class="nx">rejectHandle</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>\n  <span class="c1">// 上面已有代码，因此省略\n</span><span class="c1"></span>  <span class="k">throw</span> <span class="nx">reason</span>\n<span class="p">}</span>\n<span class="nx">resolve</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>\n  <span class="c1">// 在构造函数回调中返回自身的处理逻辑进行了简化\n</span><span class="c1"></span>  <span class="k">if</span><span class="p">(</span><span class="nx">value</span> <span class="o">===</span> <span class="k">this</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">rejectHandle</span><span class="p">(</span><span class="nx">TypeError</span><span class="p">(</span><span class="s1">&#39;Chaining cycle detected for promise #&lt;Promise&gt;&#39;</span><span class="p">))</span>\n    <span class="k">return</span>\n  <span class="p">}</span>\n  <span class="c1">// 上面已有代码，因此省略\n</span><span class="c1"></span><span class="p">}</span>\n</code></pre></div><p data-pid="30ox2BVU">首先是reject函数处理逻辑，这里判断如果没有捕获到就抛出异常。但是，这个异常又可能会被构造函数的捕获。这时候的异常来源主要有几种：</p><ol><li data-pid="sUydmK2w">constructor的executor回调产生的异常。会被constructor中的try/catch捕获。</li><li data-pid="I4CY3z-M">reject函数调用引起的状态变化，会被reject函数抛出异常，又被constructor中的try/catch捕获。</li><li data-pid="PXBrC8QG">resolve函数中调用resolveHandle函数。</li></ol><p data-pid="j1I5Vw7Z">因此，我们除了要对reject函数逻辑做处理之外，构造函数的catch中还要将其抛出来。那什么这里还要再用一个微任务？考虑这样的情况：</p><div class="highlight"><pre><code class="language-js"><span class="kr">const</span> <span class="nx">prom30</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">reject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">})</span>\n<span class="nx">prom30</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom30失败&#39;</span><span class="p">,</span> <span class="nx">reason</span><span class="p">)</span>\n<span class="p">})</span>\n</code></pre></div><p data-pid="kGc4OQtQ">构造函数回调中是同步代码，执行到catch语句时，还没有碰到then方法，这种情况我们的代码会认为没有捕获到异常而抛出。因此，我们使用<code>queueMicrotask</code>，延迟异常的抛出，以便后面的then可以捕获到。这部分在Promises/A+规范中应该也并未要求。</p><h3>第四部分完整代码</h3><div class="highlight"><pre><code class="language-js"><span class="c1">// 三种状态常量\n</span><span class="c1"></span><span class="kr">const</span> <span class="nx">STATE_PENDING</span> <span class="o">=</span> <span class="s1">&#39;pending&#39;</span>\n<span class="kr">const</span> <span class="nx">STATE_FULFILLED</span> <span class="o">=</span> <span class="s1">&#39;fulfilled&#39;</span>\n<span class="kr">const</span> <span class="nx">STATE_REJECTED</span> <span class="o">=</span> <span class="s1">&#39;rejected&#39;</span>\n\n<span class="kr">class</span> <span class="nx">PromiseJz</span> <span class="p">{</span>\n  <span class="c1">// 构造函数，接收一个函数作为入参\n</span><span class="c1"></span>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">executor</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">try</span> <span class="p">{</span>\n      <span class="c1">// 立即执行函数 需要手动指定bind指向\n</span><span class="c1"></span>      <span class="nx">executor</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">resolve</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">),</span> <span class="k">this</span><span class="p">.</span><span class="nx">reject</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">))</span>\n    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n      <span class="c1">// 如果是同步代码，需要用微任务延迟执行，以获取到是否调用了then方法\n</span><span class="c1"></span>      <span class="nx">queueMicrotask</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="c1">// 出现异常则认为rejected\n</span><span class="c1"></span>        <span class="k">this</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n        <span class="c1">// 如果捕获不到就抛出\n</span><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">thenOnRejectedFlag</span><span class="p">)</span>\n          <span class="k">throw</span> <span class="nx">err</span>\n      <span class="p">})</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n\n  <span class="c1">// 实例属性 状态，默认为pending\n</span><span class="c1"></span>  <span class="nx">state</span> <span class="o">=</span> <span class="nx">STATE_PENDING</span>\n  <span class="c1">// 成功的值\n</span><span class="c1"></span>  <span class="nx">value</span> <span class="o">=</span> <span class="kc">null</span>\n  <span class="c1">// 失败的原因\n</span><span class="c1"></span>  <span class="nx">reason</span> <span class="o">=</span> <span class="kc">null</span>\n  <span class="c1">// 异步promise调用then时的回调 处理对同一个Promise多次调用then的情况，需要用数组\n</span><span class="c1"></span>  <span class="nx">onFulfilledCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n  <span class="nx">onRejectedCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n  <span class="c1">// 是否传入过then中的onRejected\n</span><span class="c1"></span>  <span class="nx">thenOnRejectedFlag</span> <span class="o">=</span> <span class="kc">false</span>\n\n  <span class="nx">resolve</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 在构造函数回调中返回自身\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="nx">value</span> <span class="o">===</span> <span class="k">this</span><span class="p">)</span> <span class="p">{</span>\n      <span class="c1">// 触发rejected状态\n</span><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">rejectHandle</span><span class="p">(</span><span class="nx">TypeError</span><span class="p">(</span><span class="s1">&#39;Chaining cycle detected for promise #&lt;Promise&gt;&#39;</span><span class="p">))</span>\n      <span class="k">return</span>\n    <span class="p">}</span>\n    <span class="c1">// 如果值为一个新的Promise，那么状态由这个新的Promise确定\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="nx">value</span> <span class="k">instanceof</span> <span class="nx">PromiseJz</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">value</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">newValue</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="k">this</span><span class="p">.</span><span class="nx">resolveHandle</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span>\n      <span class="p">},</span> <span class="nx">newReason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="k">this</span><span class="p">.</span><span class="nx">rejectHandle</span><span class="p">(</span><span class="nx">newReason</span><span class="p">)</span>\n      <span class="p">})</span>\n    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n      <span class="k">this</span><span class="p">.</span><span class="nx">resolveHandle</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n  <span class="c1">// resolve函数状态变更的处理逻辑\n</span><span class="c1"></span>  <span class="nx">resolveHandle</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 只处理pending状态\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">!==</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="k">return</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">STATE_FULFILLED</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span>\n    <span class="c1">// 状态改变时如果有回调函数需要执行\n</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">onFulfilledCallbackList</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">callback</span> <span class="p">=&gt;</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">value</span><span class="p">))</span>\n    <span class="c1">// 处理完再清空数组\n</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">onFulfilledCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n  <span class="p">}</span>\n\n  <span class="nx">reject</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">rejectHandle</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span>\n  <span class="p">}</span>\n\n  <span class="c1">// reject函数状态变更的处理逻辑\n</span><span class="c1"></span>  <span class="nx">rejectHandle</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 只处理pending状态\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">!==</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="k">return</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">STATE_REJECTED</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">reason</span> <span class="o">=</span> <span class="nx">reason</span>\n    <span class="c1">// 状态改变时如果有回调函数需要执行\n</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">onRejectedCallbackList</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">callback</span> <span class="p">=&gt;</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">reason</span><span class="p">))</span>\n    <span class="c1">// 处理完再清空数组\n</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">onRejectedCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n    <span class="c1">// 构造函数中所有rejected都作为异常\n</span><span class="c1"></span>    <span class="k">throw</span> <span class="nx">reason</span>\n  <span class="p">}</span>\n\n  <span class="c1">// then中的回调处理\n</span><span class="c1"></span>  <span class="c1">// thenPromise then返回的Promise value 返回值  onCallback 回调\n</span><span class="c1"></span>  <span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">onCallback</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">try</span> <span class="p">{</span>\n      <span class="kr">const</span> <span class="nx">newValue</span> <span class="o">=</span> <span class="nx">onCallback</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>\n      <span class="c1">// 如果循环调用自身，抛出TypeError\n</span><span class="c1"></span>      <span class="k">if</span><span class="p">(</span><span class="nx">thenPromise</span> <span class="o">===</span> <span class="nx">newValue</span><span class="p">)</span> <span class="p">{</span>\n        <span class="k">throw</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s1">&#39;Chaining cycle detected for promise #&lt;Promise&gt;&#39;</span><span class="p">)</span>\n      <span class="p">}</span>\n      <span class="c1">// 如果返回一个Promise，那么状态要根据这个Promise来定\n</span><span class="c1"></span>      <span class="k">if</span><span class="p">(</span><span class="nx">newValue</span> <span class="k">instanceof</span> <span class="nx">PromiseJz</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">newValue</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n        <span class="nx">resolve</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span>\n      <span class="p">}</span>\n    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n      <span class="c1">// 如果新Promise截止目前没有传入过onRejected，则抛出不能被捕获的异常\n</span><span class="c1"></span>      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">thenPromise</span><span class="p">.</span><span class="nx">thenOnRejectedFlag</span><span class="p">)</span>\n        <span class="k">throw</span> <span class="nx">err</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n\n  <span class="nx">then</span><span class="p">(</span><span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 回调的默认值，适用于省略入参\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">onFulfilled</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">onFulfilled</span> <span class="o">=</span> <span class="nx">value</span> <span class="p">=&gt;</span> <span class="nx">value</span>\n    <span class="p">}</span>\n    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">onRejected</span><span class="p">)</span> <span class="p">{</span>\n      <span class="c1">// 使用引发异常的方式来传递 rejected状态\n</span><span class="c1"></span>      <span class="nx">onRejected</span> <span class="o">=</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">throw</span> <span class="nx">reason</span> <span class="p">}</span>\n    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n      <span class="k">this</span><span class="p">.</span><span class="nx">thenOnRejectedFlag</span> <span class="o">=</span> <span class="kc">true</span>\n    <span class="p">}</span>\n    <span class="c1">// 返回Promise，适配链式调用\n</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">thenPromise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_FULFILLED</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">queueMicrotask</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n          <span class="k">this</span><span class="p">.</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span> <span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n        <span class="p">})</span>\n      <span class="p">}</span>\n      <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_REJECTED</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">queueMicrotask</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n          <span class="k">this</span><span class="p">.</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">reason</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n        <span class="p">})</span>\n      <span class="p">}</span>\n      <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="p">{</span>\n        <span class="c1">// pending状态时，无法执行回调，因此把状态写入属性中，等后续状态改变时执行\n</span><span class="c1"></span>        <span class="k">this</span><span class="p">.</span><span class="nx">onFulfilledCallbackList</span><span class="p">.</span><span class="nx">push</span><span class="p">((</span><span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n          <span class="nx">queueMicrotask</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n            <span class="k">this</span><span class="p">.</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n          <span class="p">})</span>\n        <span class="p">})</span>\n        <span class="k">this</span><span class="p">.</span><span class="nx">onRejectedCallbackList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n          <span class="nx">queueMicrotask</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n            <span class="k">this</span><span class="p">.</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="nx">reason</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n          <span class="p">})</span>\n        <span class="p">})</span>\n      <span class="p">}</span>\n    <span class="p">})</span>\n    <span class="k">return</span> <span class="nx">thenPromise</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">PromiseJz</span>\n</code></pre></div><h2>第五部分 满足规范要求</h2><p data-pid="1RE1Qggb">通过上面的步骤，我们实现了基本的Promise功能（标准未要求的功能在后面的步骤实现）。但是我们目前的Promise还是不符合部分规范的，无法通过测试，还需要进行部分改动。</p><h3>加入deferred函数</h3><p data-pid="MuINOyCZ">Promise/A+规范的测试工具需要使用deferred函数进行测试，因此在类中增加一个静态方法。</p><div class="highlight"><pre><code class="language-js"><span class="kr">static</span> <span class="nx">deferred</span><span class="p">()</span> <span class="p">{</span>\n  <span class="kr">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="p">{};</span>\n  <span class="nx">res</span><span class="p">.</span><span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">res</span><span class="p">.</span><span class="nx">resolve</span> <span class="o">=</span> <span class="nx">resolve</span><span class="p">;</span>\n    <span class="nx">res</span><span class="p">.</span><span class="nx">reject</span> <span class="o">=</span> <span class="nx">reject</span><span class="p">;</span>\n  <span class="p">})</span>\n  <span class="k">return</span> <span class="nx">res</span><span class="p">;</span>\n<span class="p">}</span>\n</code></pre></div><h3>兼容thenable对象</h3><p data-pid="FXAc25jJ">为了适配其他Promise实现和thenable对象，因此要考虑兼容的问题。这部分基本就是对Promises/A+规范中的2.3.3节的实现。</p><div class="highlight"><pre><code class="language-js"><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">onCallback</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n  <span class="k">try</span> <span class="p">{</span>\n    <span class="kr">const</span> <span class="nx">newValue</span> <span class="o">=</span> <span class="nx">onCallback</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>\n    <span class="c1">// 如果循环调用自身，抛出TypeError\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="nx">thenPromise</span> <span class="o">===</span> <span class="nx">newValue</span><span class="p">)</span> <span class="p">{</span>\n      <span class="k">throw</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s1">&#39;Chaining cycle detected for promise #&lt;Promise&gt;&#39;</span><span class="p">)</span>\n    <span class="p">}</span>\n    <span class="c1">// 如果返回一个Promise，那么状态要根据这个Promise来定\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="nx">newValue</span> <span class="k">instanceof</span> <span class="nx">PromiseJz</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">newValue</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">newValue</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">newValue</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>\n      <span class="c1">// 兼容其它的promise实现\n</span><span class="c1"></span>      <span class="kd">let</span> <span class="nx">then</span>\n      <span class="k">try</span> <span class="p">{</span>\n        <span class="nx">then</span> <span class="o">=</span> <span class="nx">newValue</span><span class="p">.</span><span class="nx">then</span>\n      <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 如果抛出异常则设为rejected状态\n</span><span class="c1"></span>        <span class="nx">reject</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>\n        <span class="k">return</span>\n      <span class="p">}</span>\n      <span class="c1">// 如果then不是函数，则设置fulfilled状态\n</span><span class="c1"></span>      <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">then</span> <span class="o">!==</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">resolve</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span> \n        <span class="k">return</span>\n      <span class="p">}</span>\n      <span class="c1">// 是否调用过的标志 只能调用一次\n</span><span class="c1"></span>      <span class="kd">let</span> <span class="nx">calledFlag</span> <span class="o">=</span> <span class="kc">false</span>\n      <span class="c1">// 调用then方法\n</span><span class="c1"></span>      <span class="nx">then</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">newValue</span><span class="p">,</span> <span class="nx">y</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="k">if</span><span class="p">(</span><span class="nx">calledFlag</span><span class="p">)</span> <span class="k">return</span>\n        <span class="nx">calledFlag</span> <span class="o">=</span> <span class="kc">true</span>\n        <span class="k">this</span><span class="p">.</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">v</span> <span class="p">=&gt;</span> <span class="nx">v</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n      <span class="p">},</span> <span class="nx">r</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="k">if</span><span class="p">(</span><span class="nx">calledFlag</span><span class="p">)</span> <span class="k">return</span>\n        <span class="nx">calledFlag</span> <span class="o">=</span> <span class="kc">true</span>\n        <span class="nx">reject</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span>\n      <span class="p">})</span>\n    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n      <span class="nx">resolve</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span>\n    <span class="p">}</span>\n  <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n    <span class="c1">// 如果新Promise截止目前没有传入过onRejected，则抛出不能被捕获的异常\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">thenPromise</span><span class="p">.</span><span class="nx">thenOnRejectedFlag</span><span class="p">)</span>\n      <span class="k">throw</span> <span class="nx">err</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div><h3>去掉大部分throw</h3><p data-pid="-y9fHwxU">ECMAScript的实现和Promises/A+规范的要求有些不一致。我们抛出的异常会造成后续测试失败。因此我们把大部分抛出异常都取消掉，对应的部分冗余逻辑也会删除。这里就不给出具体的代码了，后面会给出完整代码。</p><h3>修改resolutionProduce函数，处理递归解析</h3><p data-pid="LwqkFxyZ">我们的resolutionProduce函数是包含onFulfilled和onFulfilled回调处理的。但是Promises/A+规范中在处理thenable对象时，还需要传这个函数，因此我们要进行改造，把回调处理放到这个函数外面。对应调用resolutionProduce函数的地方也都做下处理。</p><div class="highlight"><pre><code class="language-js"><span class="c1">// 入参少了onCallback\n</span><span class="c1"></span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="nx">newValue</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n  <span class="k">try</span> <span class="p">{</span>\n    <span class="c1">// 这句去掉\n</span><span class="c1"></span>    <span class="c1">// const newValue = onCallback(value)\n</span><span class="c1"></span>    <span class="c1">// 上面已有代码，因此省略\n</span><span class="c1"></span>  <span class="p">}</span> <span class="k">catch</span> <span class="p">()</span> <span class="p">{</span>\n    <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="nx">then</span><span class="p">(</span><span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">)</span> <span class="p">{</span>\n  <span class="c1">// 其他已有代码，因此省略\n</span><span class="c1"></span>  <span class="c1">// 这里只列举fulfilled状态的代码，其他状态的处理基本相同。\n</span><span class="c1"></span>  <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_FULFILLED</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">queueMicrotask</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">try</span> <span class="p">{</span>\n        <span class="kr">const</span> <span class="nx">newValue</span> <span class="o">=</span> <span class="nx">onFulfilled</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span>\n        <span class="k">this</span><span class="p">.</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="nx">newValue</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n      <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n      <span class="p">}</span>\n    <span class="p">})</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="EK_GT6Lp">同样的，我们自己的Promise对象的处理考虑的不够全面，因此直接使用Promises/A+规范的方法处理。</p><div class="highlight"><pre><code class="language-js"><span class="c1">// 这部分代码删除\n</span><span class="c1"></span><span class="k">if</span><span class="p">(</span><span class="nx">newValue</span> <span class="k">instanceof</span> <span class="nx">PromiseJz</span><span class="p">)</span> <span class="p">{</span>\n  <span class="nx">newValue</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="0K-T-yRF">还有一个改动是，Promises/A+规范3.3.3.4中的thenable对象then执行中的异常处理。即如果newValue.then入参中的两个函数都已经被调用过，那么即使有异常，也要忽略。因此在then.call外面套一个try/catch处理。这时候，包裹整个resolutionProduce函数的try/catch已经没有用了，可以删除。</p><div class="highlight"><pre><code class="language-js"><span class="kd">let</span> <span class="nx">calledFlag</span> <span class="o">=</span> <span class="kc">false</span>\n<span class="k">try</span> <span class="p">{</span>\n  <span class="nx">then</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">newValue</span><span class="p">,</span> <span class="nx">y</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="k">if</span><span class="p">(</span><span class="nx">calledFlag</span><span class="p">)</span> <span class="k">return</span>\n    <span class="nx">calledFlag</span> <span class="o">=</span> <span class="kc">true</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n  <span class="p">},</span> <span class="nx">r</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="k">if</span><span class="p">(</span><span class="nx">calledFlag</span><span class="p">)</span> <span class="k">return</span>\n    <span class="nx">calledFlag</span> <span class="o">=</span> <span class="kc">true</span>\n    <span class="nx">reject</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span>\n  <span class="p">})</span>\n<span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n  <span class="k">if</span><span class="p">(</span><span class="nx">calledFlag</span><span class="p">)</span> <span class="k">return</span>\n  <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n<span class="p">}</span>\n</code></pre></div><h3>其他改动</h3><h3>then回调函数入参判断</h3><p data-pid="Ep7_i1n-">之前我们仅仅粗暴的判断了是否存在，现在修改成判断是否为函数，如果不是函数则使用默认值。</p><div class="highlight"><pre><code class="language-js"><span class="nx">then</span><span class="p">(</span><span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">)</span> <span class="p">{</span>\n  <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">onFulfilled</span> <span class="o">!==</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">onFulfilled</span> <span class="o">=</span> <span class="nx">value</span> <span class="p">=&gt;</span> <span class="nx">value</span>\n  <span class="p">}</span>\n  <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">onRejected</span> <span class="o">!==</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">onRejected</span> <span class="o">=</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">throw</span> <span class="nx">reason</span> <span class="p">}</span>\n  <span class="p">}</span>\n  <span class="c1">// 上面已有代码，因此省略\n</span><span class="c1"></span><span class="p">}</span>\n</code></pre></div><h3>object中加入null判断</h3><p data-pid="hrMLEGgD">typeof null 的值也是 &#39;object&#39;，因此我们要加入相关的处理。</p><div class="highlight"><pre><code class="language-js"><span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">newValue</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">newValue</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>\n  <span class="c1">// typeof null 也是 &#39;object&#39;\n</span><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="nx">newValue</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">resolve</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span> \n    <span class="k">return</span>\n  <span class="p">}</span>\n  <span class="c1">// 上面已有代码，因此省略\n</span><span class="c1"></span><span class="p">}</span>\n</code></pre></div><h3>设置私有方法和私有属性</h3><p data-pid="hR8TNWR0">不提供给外部调用的方法和属性设置成私有的，前面加#号。这并不是Promises/A+规范要求的，但是这样处理更规范，也更容易分清那些看起来名字一样的变量和方法。</p><p data-pid="51axUsCk">设置之后可以看到，其实Promises/A+规范就只要求的构造函数，then方法还有一个测试用的静态方法deferred而已。那些更多的方法是ECMAScript自己加的，不在Promises/A+规范内。</p><h3>第五部分完整代码</h3><p data-pid="CaZwy4hX">这个完整的代码已经可以通过Promises/A+规范的测试了。</p><div class="highlight"><pre><code class="language-js"><span class="c1">// 三种状态常量\n</span><span class="c1"></span><span class="kr">const</span> <span class="nx">STATE_PENDING</span> <span class="o">=</span> <span class="s1">&#39;pending&#39;</span>\n<span class="kr">const</span> <span class="nx">STATE_FULFILLED</span> <span class="o">=</span> <span class="s1">&#39;fulfilled&#39;</span>\n<span class="kr">const</span> <span class="nx">STATE_REJECTED</span> <span class="o">=</span> <span class="s1">&#39;rejected&#39;</span>\n\n<span class="kr">class</span> <span class="nx">PromiseJz</span> <span class="p">{</span>\n  <span class="c1">// 构造函数，接收一个函数作为入参\n</span><span class="c1"></span>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">executor</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">try</span> <span class="p">{</span>\n      <span class="c1">// 立即执行函数 需要手动指定bind指向\n</span><span class="c1"></span>      <span class="nx">executor</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">resolve</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">),</span> <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">reject</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">))</span>\n    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n      <span class="c1">// 出现异常则认为rejected\n</span><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n\n  <span class="c1">// 状态，默认为pending\n</span><span class="c1"></span>  <span class="err">#</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">STATE_PENDING</span>\n  <span class="c1">// 成功的值\n</span><span class="c1"></span>  <span class="err">#</span><span class="nx">value</span> <span class="o">=</span> <span class="kc">null</span>\n  <span class="c1">// 失败的原因\n</span><span class="c1"></span>  <span class="err">#</span><span class="nx">reason</span> <span class="o">=</span> <span class="kc">null</span>\n  <span class="c1">// 异步promise调用then时的回调 处理对同一个Promise多次调用then的情况，需要用数组\n</span><span class="c1"></span>  <span class="err">#</span><span class="nx">onFulfilledCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n  <span class="err">#</span><span class="nx">onRejectedCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n\n  <span class="err">#</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 在构造函数回调中返回自身\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="nx">value</span> <span class="o">===</span> <span class="k">this</span><span class="p">)</span> <span class="p">{</span>\n      <span class="c1">// 触发rejected状态\n</span><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">rejectHandle</span><span class="p">(</span><span class="nx">TypeError</span><span class="p">(</span><span class="s1">&#39;Chaining cycle detected for promise #&lt;Promise&gt;&#39;</span><span class="p">))</span>\n      <span class="k">return</span>\n    <span class="p">}</span>\n    <span class="c1">// 如果值为一个新的Promise，那么状态由这个新的Promise确定\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="nx">value</span> <span class="k">instanceof</span> <span class="nx">PromiseJz</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">value</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">newValue</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">resolveHandle</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span>\n      <span class="p">},</span> <span class="nx">newReason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">rejectHandle</span><span class="p">(</span><span class="nx">newReason</span><span class="p">)</span>\n      <span class="p">})</span>\n    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n      <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">resolveHandle</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n  <span class="c1">// resolve函数状态变更的处理逻辑\n</span><span class="c1"></span>  <span class="err">#</span><span class="nx">resolveHandle</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 只处理pending状态\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">state</span> <span class="o">!==</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="k">return</span>\n    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">STATE_FULFILLED</span>\n    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span>\n    <span class="c1">// 状态改变时如果有回调函数需要执行\n</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">onFulfilledCallbackList</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">callback</span> <span class="p">=&gt;</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">value</span><span class="p">))</span>\n    <span class="c1">// 处理完再清空数组\n</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">onFulfilledCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n  <span class="p">}</span>\n\n  <span class="err">#</span><span class="nx">reject</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">rejectHandle</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span>\n  <span class="p">}</span>\n\n  <span class="c1">// reject函数状态变更的处理逻辑\n</span><span class="c1"></span>  <span class="err">#</span><span class="nx">rejectHandle</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 只处理pending状态\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">state</span> <span class="o">!==</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="k">return</span>\n    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">STATE_REJECTED</span>\n    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">reason</span> <span class="o">=</span> <span class="nx">reason</span>\n    <span class="c1">// 状态改变时如果有回调函数需要执行\n</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">onRejectedCallbackList</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">callback</span> <span class="p">=&gt;</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">reason</span><span class="p">))</span>\n    <span class="c1">// 处理完再清空数组\n</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">onRejectedCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n  <span class="p">}</span>\n\n  <span class="c1">// then中的回调处理\n</span><span class="c1"></span>  <span class="c1">// thenPromise then返回的Promise newValue 回调的返回值  onCallback 回调\n</span><span class="c1"></span>  <span class="err">#</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="nx">newValue</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n      <span class="c1">// 如果循环调用自身，抛出TypeError\n</span><span class="c1"></span>      <span class="k">if</span><span class="p">(</span><span class="nx">thenPromise</span> <span class="o">===</span> <span class="nx">newValue</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">reject</span><span class="p">(</span><span class="nx">TypeError</span><span class="p">(</span><span class="s1">&#39;Chaining cycle detected for promise #&lt;Promise&gt;&#39;</span><span class="p">))</span>\n        <span class="k">return</span>\n      <span class="p">}</span>\n      <span class="c1">// 兼容的promise实现\n</span><span class="c1"></span>      <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">newValue</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">newValue</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>\n        <span class="c1">// typeof null 也是 &#39;object&#39;\n</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="nx">newValue</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>\n          <span class="nx">resolve</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span> \n          <span class="k">return</span>\n        <span class="p">}</span>\n        <span class="kd">let</span> <span class="nx">then</span>\n        <span class="k">try</span> <span class="p">{</span>\n          <span class="nx">then</span> <span class="o">=</span> <span class="nx">newValue</span><span class="p">.</span><span class="nx">then</span>\n        <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 如果抛出异常则设为rejected状态\n</span><span class="c1"></span>          <span class="nx">reject</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>\n          <span class="k">return</span>\n        <span class="p">}</span>\n        <span class="c1">// 如果then不是函数，则设置fulfilled状态\n</span><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">then</span> <span class="o">!==</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>\n          <span class="nx">resolve</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span> \n          <span class="k">return</span>\n        <span class="p">}</span>\n        <span class="c1">// 是否调用过的标志 只能调用一次\n</span><span class="c1"></span>        <span class="kd">let</span> <span class="nx">calledFlag</span> <span class="o">=</span> <span class="kc">false</span>\n        <span class="c1">// 调用then方法\n</span><span class="c1"></span>        <span class="k">try</span> <span class="p">{</span>\n          <span class="nx">then</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">newValue</span><span class="p">,</span> <span class="nx">y</span> <span class="p">=&gt;</span> <span class="p">{</span>\n            <span class="k">if</span><span class="p">(</span><span class="nx">calledFlag</span><span class="p">)</span> <span class="k">return</span>\n            <span class="nx">calledFlag</span> <span class="o">=</span> <span class="kc">true</span>\n            <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n          <span class="p">},</span> <span class="nx">r</span> <span class="p">=&gt;</span> <span class="p">{</span>\n            <span class="k">if</span><span class="p">(</span><span class="nx">calledFlag</span><span class="p">)</span> <span class="k">return</span>\n            <span class="nx">calledFlag</span> <span class="o">=</span> <span class="kc">true</span>\n            <span class="nx">reject</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span>\n          <span class="p">})</span>\n        <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n          <span class="k">if</span><span class="p">(</span><span class="nx">calledFlag</span><span class="p">)</span> <span class="k">return</span>\n          <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n        <span class="p">}</span>\n      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n        <span class="nx">resolve</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span>\n      <span class="p">}</span>\n  <span class="p">}</span>\n\n  <span class="nx">then</span><span class="p">(</span><span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 回调的默认值，适用于省略入参\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">onFulfilled</span> <span class="o">!==</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">onFulfilled</span> <span class="o">=</span> <span class="nx">value</span> <span class="p">=&gt;</span> <span class="nx">value</span>\n    <span class="p">}</span>\n    <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">onRejected</span> <span class="o">!==</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>\n      <span class="c1">// 使用引发异常的方式来传递 rejected状态\n</span><span class="c1"></span>      <span class="nx">onRejected</span> <span class="o">=</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">throw</span> <span class="nx">reason</span> <span class="p">}</span>\n    <span class="p">}</span>\n    <span class="c1">// 返回Promise，适配链式调用\n</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">thenPromise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_FULFILLED</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">queueMicrotask</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n          <span class="k">try</span> <span class="p">{</span>\n            <span class="kr">const</span> <span class="nx">newValue</span> <span class="o">=</span> <span class="nx">onFulfilled</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">value</span><span class="p">)</span>\n            <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="nx">newValue</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n          <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n            <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n          <span class="p">}</span>\n        <span class="p">})</span>\n      <span class="p">}</span>\n      <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_REJECTED</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">queueMicrotask</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n          <span class="k">try</span> <span class="p">{</span>\n            <span class="kr">const</span> <span class="nx">newValue</span> <span class="o">=</span> <span class="nx">onRejected</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">reason</span><span class="p">)</span>\n            <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="nx">newValue</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n          <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n            <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n          <span class="p">}</span>\n        <span class="p">})</span>\n      <span class="p">}</span>\n      <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="p">{</span>\n        <span class="c1">// pending状态时，无法执行回调，因此把状态写入属性中，等后续状态改变时执行\n</span><span class="c1"></span>        <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">onFulfilledCallbackList</span><span class="p">.</span><span class="nx">push</span><span class="p">((</span><span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n          <span class="nx">queueMicrotask</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n            <span class="k">try</span> <span class="p">{</span>\n              <span class="kr">const</span> <span class="nx">newValue</span> <span class="o">=</span> <span class="nx">onFulfilled</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>\n              <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="nx">newValue</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n            <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n              <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n            <span class="p">}</span>\n          <span class="p">})</span>\n        <span class="p">})</span>\n        <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">onRejectedCallbackList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n          <span class="nx">queueMicrotask</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n            <span class="k">try</span> <span class="p">{</span>\n              <span class="kr">const</span> <span class="nx">newValue</span> <span class="o">=</span> <span class="nx">onRejected</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span>\n              <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="nx">newValue</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n            <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n              <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n            <span class="p">}</span>\n          <span class="p">})</span>\n        <span class="p">})</span>\n      <span class="p">}</span>\n    <span class="p">})</span>\n    <span class="k">return</span> <span class="nx">thenPromise</span>\n  <span class="p">}</span>\n  <span class="c1">// Promise/A+规范的测试工具使用\n</span><span class="c1"></span>  <span class="kr">static</span> <span class="nx">deferred</span><span class="p">()</span> <span class="p">{</span>\n    <span class="kr">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="p">{};</span>\n    <span class="nx">res</span><span class="p">.</span><span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">res</span><span class="p">.</span><span class="nx">resolve</span> <span class="o">=</span> <span class="nx">resolve</span><span class="p">;</span>\n      <span class="nx">res</span><span class="p">.</span><span class="nx">reject</span> <span class="o">=</span> <span class="nx">reject</span><span class="p">;</span>\n    <span class="p">})</span>\n    <span class="k">return</span> <span class="nx">res</span><span class="p">;</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">PromiseJz</span>\n</code></pre></div><h2>Promises/A+规范测试</h2><h3>建立测试环境</h3><p data-pid="Rex3NB43">首先电脑上安装Node.js和npm等工具。然后创建项目，安装依赖并配置。</p><div class="highlight"><pre><code class="language-bash"><span class="c1">## 命令行执行</span>\n<span class="c1"># 创建工程</span>\nnpm init\n<span class="c1"># 安装依赖</span>\nnpm install -D promises-aplus-tests</code></pre></div><p data-pid="ezg19aCA">把我们的Promise实现放到工程中，例如放到 src/index.js。然后在package.json的scripts中增加命令：</p><div class="highlight"><pre><code class="language-bash"><span class="s2">&#34;test:APlus&#34;</span>: <span class="s2">&#34;promises-aplus-tests src/index.js&#34;</span></code></pre></div><p data-pid="_1jto7q9">然后就可以开始执行测试啦！</p><div class="highlight"><pre><code class="language-bash"><span class="c1">## 命令行执行</span>\nnpm run test:APlus</code></pre></div><p data-pid="Uf6GaKbD">命令行中会输出测试结果，如果测试失败会有红色的字来说明。</p><figure data-size="normal"><img src="https://pic4.zhimg.com/v2-75857b02915f54bdddde6df29c063a05_b.jpg" data-rawwidth="946" data-rawheight="914" data-size="normal" data-caption="" data-original-token="v2-75857b02915f54bdddde6df29c063a05" class="origin_image zh-lightbox-thumb" width="946" data-original="https://pic4.zhimg.com/v2-75857b02915f54bdddde6df29c063a05_r.jpg"/></figure><h3>测试结果</h3><p data-pid="vXd68h4M">测试结果肯定是通过啦，当然其中也遇到了部分问题，第五部分的大部分时间其实就是改Bug。秀一下通过测试的图。</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-8688002b07515ad5c7dcffe2c7b0a4fa_b.jpg" data-rawwidth="637" data-rawheight="489" data-size="normal" data-caption="" data-original-token="v2-8688002b07515ad5c7dcffe2c7b0a4fa" class="origin_image zh-lightbox-thumb" width="637" data-original="https://pic1.zhimg.com/v2-8688002b07515ad5c7dcffe2c7b0a4fa_r.jpg"/></figure><p data-pid="bBFCqPbi">通过测试并不是结束，后面的部分我们将继续实现与ECMAScript同样的实用函数。后面方法的实现基本不会改动我们已经实现的Promise的主体部分（因此后面的每一部分就不放完整代码了）。至于上面那些Promises/A+规范与ECMAScript不一致的地方，也只能先放着不管了。</p><h2>第六部分 静态resolve/reject方法</h2><p data-pid="dgTSesMy">静态的resolve/reject方法主要是将一个对象（可能是Promise，也可能是thenable对象，也可能是其他）转化为一个Promise对象。</p><h3>静态resolve方法</h3><div class="highlight"><pre><code class="language-js"><span class="kr">static</span> <span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>\n  <span class="k">if</span><span class="p">(</span><span class="nx">data</span> <span class="k">instanceof</span> <span class="nx">PromiseJz</span><span class="p">)</span>\n    <span class="k">return</span> <span class="nx">data</span>\n  <span class="k">return</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolveItem</span><span class="p">,</span> <span class="nx">rejectItem</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">resolveItem</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>\n  <span class="p">})</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="gNEFM0em">由于thenable对象等处理方法其实我们在then方法中已经处理过了，因此如果不是Promise的话，这里直接用一个Promise包裹即可。</p><h3>静态reject方法</h3><p data-pid="8BEd3weD">静态reject方法不需要处理入参是Promise或者thenable对象的情况。看一下这个例子：</p><div class="highlight"><pre><code class="language-js"><span class="nx">PromiseJz</span> <span class="o">=</span> <span class="nb">Promise</span>\n<span class="kr">const</span> <span class="nx">prom33</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">resolve</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="mi">1000</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="nx">PromiseJz</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">prom33</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom33成功&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>\n<span class="p">},</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom33失败&#39;</span><span class="p">,</span> <span class="nx">reason</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="c1">// 输出结果\n</span><span class="c1">// prom33失败 Promise { &lt;pending&gt; }\n</span></code></pre></div><p data-pid="M1T_1ewv">可以看到，实际上Promise.reject并没有等入参的Promise状态改变再返回。而即使传入的Promise状态是fulfilled，静态reject方法的状态还是rejected。那我们就很容易处理了，直接返回rejected状态即可。</p><div class="highlight"><pre><code class="language-js"><span class="kr">static</span> <span class="nx">reject</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>\n  <span class="k">return</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolveItem</span><span class="p">,</span> <span class="nx">rejectItem</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">rejectItem</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>\n  <span class="p">})</span>\n<span class="p">}</span>\n</code></pre></div><h2>第七部分 catch/finally方法</h2><p data-pid="eIWtrcKy">这一部分主要是实现ECMAScript提供的实例方法，其中then之前已经实现过，目前还剩catch和finally方法。</p><h3>catch方法</h3><p data-pid="LRn2w1b4">catch方法非常简单，实际上就是then方法不传onFulfilled即可。</p><div class="highlight"><pre><code class="language-js"><span class="k">catch</span><span class="p">(</span><span class="nx">onRejected</span><span class="p">)</span> <span class="p">{</span>\n  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">)</span>\n<span class="p">}</span>\n</code></pre></div><h3>finally方法</h3><p data-pid="gZpshh01">finally方法类似类似于try/catch/finally中的finally，不管状态如何都会执行。而且finally会把Promise的状态传递下去。看这个例子：</p><div class="highlight"><pre><code class="language-js"><span class="nx">PromiseJz</span> <span class="o">=</span> <span class="nb">Promise</span>\n<span class="kr">const</span> <span class="nx">prom34</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">reject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">}).</span><span class="k">finally</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom34 finally&#39;</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="nx">prom34</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom34成功&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>\n<span class="p">},</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom34失败&#39;</span><span class="p">,</span> <span class="nx">reason</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="c1">// 输出结果\n</span><span class="c1">// prom34 finally\n</span><span class="c1">// prom34失败 0\n</span></code></pre></div><p data-pid="VkrLINXw">可以看到，fulfilled或者rejected的状态会被传递下去，后面的then也能接收到。但是如果finally中抛出异常了，返回的Promise就是rejected状态。这里我们实现一下finally方法。</p><div class="highlight"><pre><code class="language-js"><span class="c1">// 错误的代码  仅为示例\n</span><span class="c1"></span><span class="k">finally</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>\n  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">callback</span><span class="p">()</span>\n    <span class="k">return</span> <span class="nx">value</span>\n  <span class="p">},</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">callback</span><span class="p">()</span>\n    <span class="k">throw</span> <span class="nx">reason</span>\n  <span class="p">})</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="EY26uIdw">上面的代码可以实现传递状态的功能，如果callback中引发异常也能正确识别。但是我们JS中原生的Promise还有一个功能。如果finally中返回了一个Promise：</p><ul><li data-pid="8BFHdzOP">这个Promise的状态是rejected，finally后面链式调用中接收的Promise状态也是rejected，而且reason为finally中返回的Promise的reason。</li><li data-pid="3X0xu6_4">这个Promise的状态是fulfilled，这个状态不会影响后面链式调用中接收的Promise状态。</li><li data-pid="pqWTO-t3">这个Promise的状态是pending，那么需要等待状态改变。</li></ul><p data-pid="h_kOcx95">比如这个例子：</p><div class="highlight"><pre><code class="language-js"><span class="nx">PromiseJz</span> <span class="o">=</span> <span class="nb">Promise</span>\n<span class="kr">const</span> <span class="nx">prom36</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">resolve</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">}).</span><span class="k">finally</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom36 finally&#39;</span><span class="p">)</span>\n  <span class="k">return</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolveItem</span><span class="p">,</span> <span class="nx">rejectItem</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">rejectItem</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="mi">2000</span><span class="p">)</span>\n  <span class="p">})</span>\n<span class="p">})</span>\n<span class="nx">prom36</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom36成功&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>\n<span class="p">},</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;prom36失败&#39;</span><span class="p">,</span> <span class="nx">reason</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="c1">// 输出结果\n</span><span class="c1">// prom36 finally\n</span><span class="c1">// prom36失败 2\n</span></code></pre></div><p data-pid="_cT1RnZZ">上面的代码显然没有做到这个逻辑。可以将callback包裹起来，转化为一个Promise，然后在then中实现上面的逻辑。正好这里可以用到上一部分实现的静态方法Promise.resolve()。我们来重新实现下。</p><div class="highlight"><pre><code class="language-js"><span class="k">finally</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>\n  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="nx">PromiseJz</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">callback</span><span class="p">()).</span><span class="nx">then</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">value</span><span class="p">)</span>\n  <span class="p">},</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="nx">PromiseJz</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">callback</span><span class="p">()).</span><span class="nx">then</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">throw</span> <span class="nx">reason</span> <span class="p">})</span>\n  <span class="p">})</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="hF_q2HTn">如果<code>PromiseJz.resolve(callback())</code>的状态为rejected，后面的then方法就不再执行了，直接返回rejected状态的Promise。到这里，上面的prom34和prom36都可以测试成功。</p><h2>第八部分 接收数组的静态方法</h2><p data-pid="OxUxUCcO">这部分的方法有：</p><ul><li data-pid="V0cn7_fk"><code>Promise.all()</code></li><li data-pid="IGomZerH"><code>Promise.race()</code></li><li data-pid="iR6lnstD"><code>Promise.allSettled()</code></li><li data-pid="-T33TFDe"><code>Promise.any()</code></li></ul><p data-pid="QWFIkFen">我们一一进行实现。</p><h3>Promise.all()</h3><p data-pid="pDLu3Shs">首先入参都是一个数组，但是也要支持Iterator对象。如果不是Iterator对象要抛出错误。由于这几种方法的入参是一致的，因此我们实现一个公共逻辑来判断，而且抛出的异常与JS中原生的Promise一致。</p><div class="highlight"><pre><code class="language-js"><span class="c1">// 判断入参是否为Iterator\n</span><span class="c1"></span><span class="kr">static</span> <span class="err">#</span><span class="nx">isIterator</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>\n  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">data</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">data</span><span class="p">[</span><span class="nx">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]</span> <span class="o">!==</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>\n    <span class="kr">const</span> <span class="nx">type</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">data</span>\n    <span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">type</span><span class="si">}</span><span class="sb"> </span><span class="si">${</span><span class="nx">data</span><span class="si">}</span><span class="sb"> is not iterable (cannot read property Symbol(Symbol.iterator))`</span><span class="p">)</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="wco6SnyF">然后是Promise.all方法。</p><div class="highlight"><pre><code class="language-js"><span class="kr">static</span> <span class="nx">all</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>\n  <span class="nx">PromiseJz</span><span class="p">.</span><span class="err">#</span><span class="nx">isIterator</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>\n  <span class="c1">// count为总数量，count为Promise完成的数量\n</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span>\n  <span class="c1">// 存储promise值的数组\n</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">valueList</span> <span class="o">=</span> <span class="p">[]</span>\n  <span class="k">return</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolveItem</span><span class="p">,</span> <span class="nx">rejectItem</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">item</span> <span class="k">of</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>\n      <span class="c1">// 当前的序号\n</span><span class="c1"></span>      <span class="kd">let</span> <span class="nx">tempi</span> <span class="o">=</span> <span class="nx">sum</span><span class="o">++</span>\n      <span class="nx">valueList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span>\n      <span class="nx">PromiseJz</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">item</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="o">++</span><span class="nx">count</span>\n        <span class="nx">valueList</span><span class="p">[</span><span class="nx">tempi</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span>\n        <span class="c1">// 全部完成\n</span><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="nx">count</span> <span class="o">===</span> <span class="nx">valueList</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>\n          <span class="nx">resolveItem</span><span class="p">(</span><span class="nx">valueList</span><span class="p">)</span>\n      <span class="p">},</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="c1">// 有一个出现rejected状态则返回rejected\n</span><span class="c1"></span>        <span class="nx">rejectItem</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span>\n      <span class="p">})</span>\n    <span class="p">}</span>\n    <span class="c1">// 循环一次都没进入，实际是空数组\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="nx">sum</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span>\n      <span class="nx">resolveItem</span><span class="p">([])</span>\n  <span class="p">})</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="4bPiIxvf">由于要适配Iterator对象，因此这里用了for of做循环。处理非Promise对象，thenable对象等则交给了PromiseJz.resolve统一转换。注意要处理下空数组。我们拿一个Iterator对象试一下：</p><div class="highlight"><pre><code class="language-js"><span class="kr">const</span> <span class="nx">prom37</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">resolve</span><span class="p">(</span><span class="mi">37</span><span class="p">)</span> <span class="p">})</span>\n<span class="kr">const</span> <span class="nx">prom38</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">resolve</span><span class="p">(</span><span class="mi">38</span><span class="p">),</span> <span class="mi">2000</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="kr">const</span> <span class="nx">prom39</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">resolve</span><span class="p">(</span><span class="mi">39</span><span class="p">),</span> <span class="mi">1000</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span>\n<span class="kr">const</span> <span class="nx">iteratorObj</span> <span class="o">=</span> <span class="p">{</span>\n  <span class="p">[</span><span class="nx">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]</span><span class="o">:</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="p">{</span>\n      <span class="nx">next</span><span class="o">:</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="o">++</span><span class="nx">count</span><span class="p">;</span>\n        <span class="kd">let</span> <span class="nx">value</span> <span class="o">=</span> <span class="kc">null</span>\n        <span class="k">switch</span><span class="p">(</span><span class="nx">count</span><span class="p">)</span> <span class="p">{</span>\n          <span class="k">case</span> <span class="mi">1</span><span class="o">:</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">prom37</span>\n            <span class="k">break</span>\n          <span class="k">case</span> <span class="mi">2</span><span class="o">:</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">prom38</span>\n            <span class="k">break</span>\n          <span class="k">case</span> <span class="mi">3</span><span class="o">:</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">prom39</span>\n            <span class="k">break</span>\n          <span class="k">case</span> <span class="mi">4</span><span class="o">:</span> <span class="nx">value</span> <span class="o">=</span> <span class="mi">40</span>\n            <span class="k">break</span>\n          <span class="k">default</span><span class="o">:</span> <span class="k">return</span> <span class="p">{</span> <span class="nx">done</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}</span>\n        <span class="p">}</span>\n        <span class="k">return</span> <span class="p">{</span>\n          <span class="nx">value</span><span class="o">:</span> <span class="nx">value</span><span class="p">,</span>\n          <span class="nx">done</span><span class="o">:</span> <span class="kc">false</span>\n        <span class="p">};</span>\n      <span class="p">}</span>\n    <span class="p">};</span>\n  <span class="p">}</span>\n<span class="p">};</span>\n\n<span class="nx">PromiseJz</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">iteratorObj</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>\n<span class="p">},</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="c1">// 输出结果\n</span><span class="c1">// [ 37, 38, 39, 40 ]\n</span></code></pre></div><p data-pid="dnRSVh0B">ECMAScript中Promise的输出和我们的PromiseJz输出结果是一致的，可以适配Iterator对象。</p><h3>Promise.race()</h3><p data-pid="LCEkxR2A">race方法的实现更简单，只要碰到Promise状态改变就输出即可。不用担心重复改变状态，之前在Promise内部就已经做过处理了。</p><div class="highlight"><pre><code class="language-js"><span class="kr">static</span> <span class="nx">race</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>\n  <span class="nx">PromiseJz</span><span class="p">.</span><span class="err">#</span><span class="nx">isIterator</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>\n  <span class="k">return</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolveItem</span><span class="p">,</span> <span class="nx">rejectItem</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">item</span> <span class="k">of</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">PromiseJz</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">item</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">resolveItem</span><span class="p">,</span> <span class="nx">rejectItem</span><span class="p">)</span>\n    <span class="p">}</span>\n  <span class="p">})</span>\n<span class="p">}</span>\n</code></pre></div><p data-pid="A068gF9F">如果入参是空数组，那么既不会触发fulfilled，也不会触发rejected。ECMAScript中的Promise经过测试也是如此：</p><div class="highlight"><pre><code class="language-js"><span class="nx">PromiseJz</span> <span class="o">=</span> <span class="nb">Promise</span>\n<span class="nx">PromiseJz</span><span class="p">.</span><span class="nx">race</span><span class="p">([]).</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>\n<span class="p">},</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nx">reason</span><span class="p">)</span>\n<span class="p">})</span>\n<span class="c1">// 无输出结果\n</span></code></pre></div><h3>Promise.allSettled()</h3><p data-pid="DNq3Qc3B">allSettled方法的逻辑和all非常像，只不过allSettled方法需要等所有Promise结束才行。和all方法一样，这里也要判断空数组。</p><div class="highlight"><pre><code class="language-js"><span class="kr">static</span> <span class="nx">allSettled</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>\n  <span class="nx">PromiseJz</span><span class="p">.</span><span class="err">#</span><span class="nx">isIterator</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>\n  <span class="c1">// count为总数量，count为Promise完成的数量\n</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span>\n  <span class="c1">// 存储promise值的数组\n</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">valueList</span> <span class="o">=</span> <span class="p">[]</span>\n  <span class="k">return</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolveItem</span><span class="p">,</span> <span class="nx">rejectItem</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">item</span> <span class="k">of</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>\n      <span class="c1">// 当前的序号\n</span><span class="c1"></span>      <span class="kd">let</span> <span class="nx">tempi</span> <span class="o">=</span> <span class="nx">sum</span><span class="o">++</span>\n      <span class="nx">valueList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span>\n      <span class="nx">PromiseJz</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">item</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="o">++</span><span class="nx">count</span>\n        <span class="nx">valueList</span><span class="p">[</span><span class="nx">tempi</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">status</span><span class="o">:</span> <span class="s1">&#39;fulfilled&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">value</span> <span class="p">}</span>\n        <span class="k">if</span><span class="p">(</span><span class="nx">count</span> <span class="o">===</span> <span class="nx">valueList</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>\n          <span class="nx">resolveItem</span><span class="p">(</span><span class="nx">valueList</span><span class="p">)</span>\n      <span class="p">},</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="o">++</span><span class="nx">count</span>\n        <span class="nx">valueList</span><span class="p">[</span><span class="nx">tempi</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">status</span><span class="o">:</span> <span class="s1">&#39;rejected&#39;</span><span class="p">,</span> <span class="nx">reason</span><span class="o">:</span> <span class="nx">reason</span> <span class="p">}</span>\n        <span class="k">if</span><span class="p">(</span><span class="nx">count</span> <span class="o">===</span> <span class="nx">valueList</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>\n          <span class="nx">resolveItem</span><span class="p">(</span><span class="nx">valueList</span><span class="p">)</span>\n      <span class="p">})</span>\n    <span class="p">}</span>\n    <span class="c1">// 循环一次都没进入，实际是空数组\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="nx">sum</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span>\n      <span class="nx">resolveItem</span><span class="p">([])</span>\n  <span class="p">})</span>\n<span class="p">}</span>\n</code></pre></div><h3>Promise.any()</h3><p data-pid="VUBacwWJ">any方法实际上类似于all方法的反向，计数器用到了onRejected回调中。与其他方法不同的是，这里空数组要设置为rejected状态。因为空数组没有任何一个元素可以变为fulfilled状态。</p><div class="highlight"><pre><code class="language-js"><span class="kr">static</span> <span class="nx">any</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>\n  <span class="nx">PromiseJz</span><span class="p">.</span><span class="err">#</span><span class="nx">isIterator</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>\n  <span class="c1">// count为总数量，count为Promise完成的数量\n</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span>\n  <span class="c1">// 存储promise值的数组\n</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">reasonList</span> <span class="o">=</span> <span class="p">[]</span>\n  <span class="k">return</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolveItem</span><span class="p">,</span> <span class="nx">rejectItem</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">item</span> <span class="k">of</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>\n      <span class="c1">// 当前的序号\n</span><span class="c1"></span>      <span class="kd">let</span> <span class="nx">tempi</span> <span class="o">=</span> <span class="nx">sum</span><span class="o">++</span>\n      <span class="nx">reasonList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span>\n      <span class="nx">PromiseJz</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">item</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="nx">resolveItem</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>\n      <span class="p">},</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="o">++</span><span class="nx">count</span>\n        <span class="nx">reasonList</span><span class="p">[</span><span class="nx">tempi</span><span class="p">]</span> <span class="o">=</span> <span class="nx">reason</span>\n        <span class="k">if</span><span class="p">(</span><span class="nx">count</span> <span class="o">===</span> <span class="nx">reasonList</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>\n        <span class="c1">// ECMAScript要求抛出AggregateError错误\n</span><span class="c1"></span>        <span class="nx">rejectItem</span><span class="p">(</span><span class="k">new</span> <span class="nx">AggregateError</span><span class="p">(</span><span class="nx">reasonList</span><span class="p">,</span> <span class="s1">&#39;All promises were rejected&#39;</span><span class="p">))</span>\n      <span class="p">})</span>\n    <span class="p">}</span>\n    <span class="c1">// 循环一次都没进入，实际是空数组 为rejected状态\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="nx">sum</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span>\n      <span class="nx">rejectItem</span><span class="p">(</span><span class="k">new</span> <span class="nx">AggregateError</span><span class="p">([],</span> <span class="s1">&#39;All promises were rejected&#39;</span><span class="p">))</span>\n  <span class="p">})</span>\n<span class="p">}</span>\n</code></pre></div><h2>最终版本完整代码</h2><p data-pid="QYSClHKT">到这里，Promise的完整功能已经基本实现。由于从第六部分开始就没有改动过Promise的主体部分，只是新增方法，因此最终版本也是可以通过Promises/A+规范测试的。看一下我们的最终版本代码：</p><div class="highlight"><pre><code class="language-js"><span class="c1">// 三种状态常量\n</span><span class="c1"></span><span class="kr">const</span> <span class="nx">STATE_PENDING</span> <span class="o">=</span> <span class="s1">&#39;pending&#39;</span>\n<span class="kr">const</span> <span class="nx">STATE_FULFILLED</span> <span class="o">=</span> <span class="s1">&#39;fulfilled&#39;</span>\n<span class="kr">const</span> <span class="nx">STATE_REJECTED</span> <span class="o">=</span> <span class="s1">&#39;rejected&#39;</span>\n\n<span class="kr">class</span> <span class="nx">PromiseJz</span> <span class="p">{</span>\n  <span class="c1">// 构造函数，接收一个函数作为入参\n</span><span class="c1"></span>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">executor</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">try</span> <span class="p">{</span>\n      <span class="c1">// 立即执行函数 需要手动指定bind指向\n</span><span class="c1"></span>      <span class="nx">executor</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">resolve</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">),</span> <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">reject</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">))</span>\n    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n      <span class="c1">// 出现异常则认为rejected\n</span><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n\n  <span class="c1">// 状态，默认为pending\n</span><span class="c1"></span>  <span class="err">#</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">STATE_PENDING</span>\n  <span class="c1">// 成功的值\n</span><span class="c1"></span>  <span class="err">#</span><span class="nx">value</span> <span class="o">=</span> <span class="kc">null</span>\n  <span class="c1">// 失败的原因\n</span><span class="c1"></span>  <span class="err">#</span><span class="nx">reason</span> <span class="o">=</span> <span class="kc">null</span>\n  <span class="c1">// 异步promise调用then时的回调 处理对同一个Promise多次调用then的情况，需要用数组\n</span><span class="c1"></span>  <span class="err">#</span><span class="nx">onFulfilledCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n  <span class="err">#</span><span class="nx">onRejectedCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n\n  <span class="err">#</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 在构造函数回调中返回自身\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="nx">value</span> <span class="o">===</span> <span class="k">this</span><span class="p">)</span> <span class="p">{</span>\n      <span class="c1">// 触发rejected状态\n</span><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">rejectHandle</span><span class="p">(</span><span class="nx">TypeError</span><span class="p">(</span><span class="s1">&#39;Chaining cycle detected for promise #&lt;Promise&gt;&#39;</span><span class="p">))</span>\n      <span class="k">return</span>\n    <span class="p">}</span>\n    <span class="c1">// 如果值为一个新的Promise，那么状态由这个新的Promise确定\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="nx">value</span> <span class="k">instanceof</span> <span class="nx">PromiseJz</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">value</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">newValue</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">resolveHandle</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span>\n      <span class="p">},</span> <span class="nx">newReason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n        <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">rejectHandle</span><span class="p">(</span><span class="nx">newReason</span><span class="p">)</span>\n      <span class="p">})</span>\n    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n      <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">resolveHandle</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n\n  <span class="c1">// resolve函数状态变更的处理逻辑\n</span><span class="c1"></span>  <span class="err">#</span><span class="nx">resolveHandle</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 只处理pending状态\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">state</span> <span class="o">!==</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="k">return</span>\n    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">STATE_FULFILLED</span>\n    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span>\n    <span class="c1">// 状态改变时如果有回调函数需要执行\n</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">onFulfilledCallbackList</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">callback</span> <span class="p">=&gt;</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">value</span><span class="p">))</span>\n    <span class="c1">// 处理完再清空数组\n</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">onFulfilledCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n  <span class="p">}</span>\n\n  <span class="err">#</span><span class="nx">reject</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">rejectHandle</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span>\n  <span class="p">}</span>\n\n  <span class="c1">// reject函数状态变更的处理逻辑\n</span><span class="c1"></span>  <span class="err">#</span><span class="nx">rejectHandle</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 只处理pending状态\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">state</span> <span class="o">!==</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="k">return</span>\n    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">STATE_REJECTED</span>\n    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">reason</span> <span class="o">=</span> <span class="nx">reason</span>\n    <span class="c1">// 状态改变时如果有回调函数需要执行\n</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">onRejectedCallbackList</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">callback</span> <span class="p">=&gt;</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">reason</span><span class="p">))</span>\n    <span class="c1">// 处理完再清空数组\n</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">onRejectedCallbackList</span> <span class="o">=</span> <span class="p">[]</span>\n  <span class="p">}</span>\n\n  <span class="c1">// then中的回调处理\n</span><span class="c1"></span>  <span class="c1">// thenPromise then返回的Promise newValue 回调的返回值  onCallback 回调\n</span><span class="c1"></span>  <span class="err">#</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="nx">newValue</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n      <span class="c1">// 如果循环调用自身，抛出TypeError\n</span><span class="c1"></span>      <span class="k">if</span><span class="p">(</span><span class="nx">thenPromise</span> <span class="o">===</span> <span class="nx">newValue</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">reject</span><span class="p">(</span><span class="nx">TypeError</span><span class="p">(</span><span class="s1">&#39;Chaining cycle detected for promise #&lt;Promise&gt;&#39;</span><span class="p">))</span>\n        <span class="k">return</span>\n      <span class="p">}</span>\n      <span class="c1">// 兼容的promise实现\n</span><span class="c1"></span>      <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">newValue</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">newValue</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>\n        <span class="c1">// typeof null 也是 &#39;object&#39;\n</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="nx">newValue</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>\n          <span class="nx">resolve</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span> \n          <span class="k">return</span>\n        <span class="p">}</span>\n        <span class="kd">let</span> <span class="nx">then</span>\n        <span class="k">try</span> <span class="p">{</span>\n          <span class="nx">then</span> <span class="o">=</span> <span class="nx">newValue</span><span class="p">.</span><span class="nx">then</span>\n        <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 如果抛出异常则设为rejected状态\n</span><span class="c1"></span>          <span class="nx">reject</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>\n          <span class="k">return</span>\n        <span class="p">}</span>\n        <span class="c1">// 如果then不是函数，则设置fulfilled状态\n</span><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">then</span> <span class="o">!==</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>\n          <span class="nx">resolve</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span> \n          <span class="k">return</span>\n        <span class="p">}</span>\n        <span class="c1">// 是否调用过的标志 只能调用一次\n</span><span class="c1"></span>        <span class="kd">let</span> <span class="nx">calledFlag</span> <span class="o">=</span> <span class="kc">false</span>\n        <span class="c1">// 调用then方法\n</span><span class="c1"></span>        <span class="k">try</span> <span class="p">{</span>\n          <span class="nx">then</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">newValue</span><span class="p">,</span> <span class="nx">y</span> <span class="p">=&gt;</span> <span class="p">{</span>\n            <span class="k">if</span><span class="p">(</span><span class="nx">calledFlag</span><span class="p">)</span> <span class="k">return</span>\n            <span class="nx">calledFlag</span> <span class="o">=</span> <span class="kc">true</span>\n            <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n          <span class="p">},</span> <span class="nx">r</span> <span class="p">=&gt;</span> <span class="p">{</span>\n            <span class="k">if</span><span class="p">(</span><span class="nx">calledFlag</span><span class="p">)</span> <span class="k">return</span>\n            <span class="nx">calledFlag</span> <span class="o">=</span> <span class="kc">true</span>\n            <span class="nx">reject</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span>\n          <span class="p">})</span>\n        <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n          <span class="k">if</span><span class="p">(</span><span class="nx">calledFlag</span><span class="p">)</span> <span class="k">return</span>\n          <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n        <span class="p">}</span>\n      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n        <span class="nx">resolve</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span>\n      <span class="p">}</span>\n  <span class="p">}</span>\n\n  <span class="nx">then</span><span class="p">(</span><span class="nx">onFulfilled</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 回调的默认值，适用于省略入参\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">onFulfilled</span> <span class="o">!==</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">onFulfilled</span> <span class="o">=</span> <span class="nx">value</span> <span class="p">=&gt;</span> <span class="nx">value</span>\n    <span class="p">}</span>\n    <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">onRejected</span> <span class="o">!==</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>\n      <span class="c1">// 使用引发异常的方式来传递 rejected状态\n</span><span class="c1"></span>      <span class="nx">onRejected</span> <span class="o">=</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">throw</span> <span class="nx">reason</span> <span class="p">}</span>\n    <span class="p">}</span>\n    <span class="c1">// 返回Promise，适配链式调用\n</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">thenPromise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_FULFILLED</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">queueMicrotask</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n          <span class="k">try</span> <span class="p">{</span>\n            <span class="kr">const</span> <span class="nx">newValue</span> <span class="o">=</span> <span class="nx">onFulfilled</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">value</span><span class="p">)</span>\n            <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="nx">newValue</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n          <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n            <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n          <span class="p">}</span>\n        <span class="p">})</span>\n      <span class="p">}</span>\n      <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_REJECTED</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">queueMicrotask</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n          <span class="k">try</span> <span class="p">{</span>\n            <span class="kr">const</span> <span class="nx">newValue</span> <span class="o">=</span> <span class="nx">onRejected</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">reason</span><span class="p">)</span>\n            <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="nx">newValue</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n          <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n            <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n          <span class="p">}</span>\n        <span class="p">})</span>\n      <span class="p">}</span>\n      <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">state</span> <span class="o">===</span> <span class="nx">STATE_PENDING</span><span class="p">)</span> <span class="p">{</span>\n        <span class="c1">// pending状态时，无法执行回调，因此把状态写入属性中，等后续状态改变时执行\n</span><span class="c1"></span>        <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">onFulfilledCallbackList</span><span class="p">.</span><span class="nx">push</span><span class="p">((</span><span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n          <span class="nx">queueMicrotask</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n            <span class="k">try</span> <span class="p">{</span>\n              <span class="kr">const</span> <span class="nx">newValue</span> <span class="o">=</span> <span class="nx">onFulfilled</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>\n              <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="nx">newValue</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n            <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n              <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n            <span class="p">}</span>\n          <span class="p">})</span>\n        <span class="p">})</span>\n        <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">onRejectedCallbackList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n          <span class="nx">queueMicrotask</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>\n            <span class="k">try</span> <span class="p">{</span>\n              <span class="kr">const</span> <span class="nx">newValue</span> <span class="o">=</span> <span class="nx">onRejected</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span>\n              <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">resolutionProduce</span><span class="p">(</span><span class="nx">thenPromise</span><span class="p">,</span> <span class="nx">newValue</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span>\n            <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n              <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>\n            <span class="p">}</span>\n          <span class="p">})</span>\n        <span class="p">})</span>\n      <span class="p">}</span>\n    <span class="p">})</span>\n    <span class="k">return</span> <span class="nx">thenPromise</span>\n  <span class="p">}</span>\n\n  <span class="c1">// Promise/A+规范的测试工具使用\n</span><span class="c1"></span>  <span class="kr">static</span> <span class="nx">deferred</span><span class="p">()</span> <span class="p">{</span>\n    <span class="kr">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="p">{};</span>\n    <span class="nx">res</span><span class="p">.</span><span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">res</span><span class="p">.</span><span class="nx">resolve</span> <span class="o">=</span> <span class="nx">resolve</span><span class="p">;</span>\n      <span class="nx">res</span><span class="p">.</span><span class="nx">reject</span> <span class="o">=</span> <span class="nx">reject</span><span class="p">;</span>\n    <span class="p">})</span>\n    <span class="k">return</span> <span class="nx">res</span><span class="p">;</span>\n  <span class="p">}</span>\n\n  <span class="kr">static</span> <span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 如果是Promise，则直接返回\n</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="nx">data</span> <span class="k">instanceof</span> <span class="nx">PromiseJz</span><span class="p">)</span>\n      <span class="k">return</span> <span class="nx">data</span>\n    <span class="c1">// thenable对象等由then方法处理\n</span><span class="c1"></span>    <span class="k">return</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolveItem</span><span class="p">,</span> <span class="nx">rejectItem</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">resolveItem</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>\n    <span class="p">})</span>\n  <span class="p">}</span>\n\n  <span class="kr">static</span> <span class="nx">reject</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolveItem</span><span class="p">,</span> <span class="nx">rejectItem</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">rejectItem</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>\n    <span class="p">})</span>\n  <span class="p">}</span>\n\n  <span class="k">catch</span><span class="p">(</span><span class="nx">onRejected</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">onRejected</span><span class="p">)</span>\n  <span class="p">}</span>\n\n  <span class="k">finally</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 如果callback()返回Promise且状态rejected，则后续状态为rejected\n</span><span class="c1"></span>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">return</span> <span class="nx">PromiseJz</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">callback</span><span class="p">()).</span><span class="nx">then</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">value</span><span class="p">)</span>\n    <span class="p">},</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">return</span> <span class="nx">PromiseJz</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">callback</span><span class="p">()).</span><span class="nx">then</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">throw</span> <span class="nx">reason</span> <span class="p">})</span>\n    <span class="p">})</span>\n  <span class="p">}</span>\n\n  <span class="c1">// 判断入参是否为Iterator\n</span><span class="c1"></span>  <span class="kr">static</span> <span class="err">#</span><span class="nx">isIterator</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">data</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">data</span><span class="p">[</span><span class="nx">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]</span> <span class="o">!==</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>\n      <span class="kr">const</span> <span class="nx">type</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">data</span>\n      <span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">type</span><span class="si">}</span><span class="sb"> </span><span class="si">${</span><span class="nx">data</span><span class="si">}</span><span class="sb"> is not iterable (cannot read property Symbol(Symbol.iterator))`</span><span class="p">)</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n\n  <span class="kr">static</span> <span class="nx">all</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">PromiseJz</span><span class="p">.</span><span class="err">#</span><span class="nx">isIterator</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>\n    <span class="c1">// count为总数量，count为Promise完成的数量\n</span><span class="c1"></span>    <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span>\n    <span class="c1">// 存储promise值的数组\n</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">valueList</span> <span class="o">=</span> <span class="p">[]</span>\n    <span class="k">return</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolveItem</span><span class="p">,</span> <span class="nx">rejectItem</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">item</span> <span class="k">of</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>\n        <span class="c1">// 当前的序号\n</span><span class="c1"></span>        <span class="kd">let</span> <span class="nx">tempi</span> <span class="o">=</span> <span class="nx">sum</span><span class="o">++</span>\n        <span class="nx">valueList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span>\n        <span class="nx">PromiseJz</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">item</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>\n          <span class="o">++</span><span class="nx">count</span>\n          <span class="nx">valueList</span><span class="p">[</span><span class="nx">tempi</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span>\n          <span class="c1">// 全部完成\n</span><span class="c1"></span>          <span class="k">if</span><span class="p">(</span><span class="nx">count</span> <span class="o">===</span> <span class="nx">valueList</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>\n            <span class="nx">resolveItem</span><span class="p">(</span><span class="nx">valueList</span><span class="p">)</span>\n        <span class="p">},</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n          <span class="c1">// 有一个出现rejected状态则返回rejected\n</span><span class="c1"></span>          <span class="nx">rejectItem</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span>\n        <span class="p">})</span>\n      <span class="p">}</span>\n      <span class="c1">// 循环一次都没进入，实际是空数组\n</span><span class="c1"></span>      <span class="k">if</span><span class="p">(</span><span class="nx">sum</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span>\n        <span class="nx">resolveItem</span><span class="p">([])</span>\n    <span class="p">})</span>\n  <span class="p">}</span>\n\n  <span class="kr">static</span> <span class="nx">race</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">PromiseJz</span><span class="p">.</span><span class="err">#</span><span class="nx">isIterator</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>\n    <span class="k">return</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolveItem</span><span class="p">,</span> <span class="nx">rejectItem</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">item</span> <span class="k">of</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">PromiseJz</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">item</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">resolveItem</span><span class="p">,</span> <span class="nx">rejectItem</span><span class="p">)</span>\n      <span class="p">}</span>\n    <span class="p">})</span>\n  <span class="p">}</span>\n\n  <span class="kr">static</span> <span class="nx">allSettled</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">PromiseJz</span><span class="p">.</span><span class="err">#</span><span class="nx">isIterator</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>\n    <span class="c1">// count为总数量，count为Promise完成的数量\n</span><span class="c1"></span>    <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span>\n    <span class="c1">// 存储promise值的数组\n</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">valueList</span> <span class="o">=</span> <span class="p">[]</span>\n    <span class="k">return</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolveItem</span><span class="p">,</span> <span class="nx">rejectItem</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">item</span> <span class="k">of</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>\n        <span class="c1">// 当前的序号\n</span><span class="c1"></span>        <span class="kd">let</span> <span class="nx">tempi</span> <span class="o">=</span> <span class="nx">sum</span><span class="o">++</span>\n        <span class="nx">valueList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span>\n        <span class="nx">PromiseJz</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">item</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>\n          <span class="o">++</span><span class="nx">count</span>\n          <span class="nx">valueList</span><span class="p">[</span><span class="nx">tempi</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">status</span><span class="o">:</span> <span class="s1">&#39;fulfilled&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">value</span> <span class="p">}</span>\n          <span class="k">if</span><span class="p">(</span><span class="nx">count</span> <span class="o">===</span> <span class="nx">valueList</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>\n            <span class="nx">resolveItem</span><span class="p">(</span><span class="nx">valueList</span><span class="p">)</span>\n        <span class="p">},</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n          <span class="o">++</span><span class="nx">count</span>\n          <span class="nx">valueList</span><span class="p">[</span><span class="nx">tempi</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">status</span><span class="o">:</span> <span class="s1">&#39;rejected&#39;</span><span class="p">,</span> <span class="nx">reason</span><span class="o">:</span> <span class="nx">reason</span> <span class="p">}</span>\n          <span class="k">if</span><span class="p">(</span><span class="nx">count</span> <span class="o">===</span> <span class="nx">valueList</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>\n            <span class="nx">resolveItem</span><span class="p">(</span><span class="nx">valueList</span><span class="p">)</span>\n        <span class="p">})</span>\n      <span class="p">}</span>\n      <span class="c1">// 循环一次都没进入，实际是空数组\n</span><span class="c1"></span>      <span class="k">if</span><span class="p">(</span><span class="nx">sum</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span>\n        <span class="nx">resolveItem</span><span class="p">([])</span>\n    <span class="p">})</span>\n  <span class="p">}</span>\n\n  <span class="kr">static</span> <span class="nx">any</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">PromiseJz</span><span class="p">.</span><span class="err">#</span><span class="nx">isIterator</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>\n    <span class="c1">// count为总数量，count为Promise完成的数量\n</span><span class="c1"></span>    <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span>\n    <span class="c1">// 存储promise值的数组\n</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">reasonList</span> <span class="o">=</span> <span class="p">[]</span>\n    <span class="k">return</span> <span class="k">new</span> <span class="nx">PromiseJz</span><span class="p">((</span><span class="nx">resolveItem</span><span class="p">,</span> <span class="nx">rejectItem</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>\n      <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">item</span> <span class="k">of</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>\n        <span class="c1">// 当前的序号\n</span><span class="c1"></span>        <span class="kd">let</span> <span class="nx">tempi</span> <span class="o">=</span> <span class="nx">sum</span><span class="o">++</span>\n        <span class="nx">reasonList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span>\n        <span class="nx">PromiseJz</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">item</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>\n          <span class="nx">resolveItem</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>\n        <span class="p">},</span> <span class="nx">reason</span> <span class="p">=&gt;</span> <span class="p">{</span>\n          <span class="o">++</span><span class="nx">count</span>\n          <span class="nx">reasonList</span><span class="p">[</span><span class="nx">tempi</span><span class="p">]</span> <span class="o">=</span> <span class="nx">reason</span>\n          <span class="k">if</span><span class="p">(</span><span class="nx">count</span> <span class="o">===</span> <span class="nx">reasonList</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>\n          <span class="c1">// ECMAScript要求抛出AggregateError错误\n</span><span class="c1"></span>          <span class="nx">rejectItem</span><span class="p">(</span><span class="k">new</span> <span class="nx">AggregateError</span><span class="p">(</span><span class="nx">reasonList</span><span class="p">,</span> <span class="s1">&#39;All promises were rejected&#39;</span><span class="p">))</span>\n        <span class="p">})</span>\n      <span class="p">}</span>\n      <span class="c1">// 循环一次都没进入，实际是空数组 为rejected状态\n</span><span class="c1"></span>      <span class="k">if</span><span class="p">(</span><span class="nx">sum</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span>\n        <span class="nx">rejectItem</span><span class="p">(</span><span class="k">new</span> <span class="nx">AggregateError</span><span class="p">([],</span> <span class="s1">&#39;All promises were rejected&#39;</span><span class="p">))</span>\n    <span class="p">})</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">PromiseJz</span>\n</code></pre></div><h2>总结</h2><p data-pid="_AqKUJwf">因为ECMAScript中已经包含了Promise的功能实现，因此即使我们写了自己的Promise，大概率也不会在项目中使用。即使我们自己用，别人也不会用的。那自己实现Promise有什么意义呢？</p><p data-pid="vOeKHY3Z">通过实现，可以详细了解Promise的原理和执行流程，对于JavaScript异步编程和事件循环也有更多认识。实现的过程中也是对类、异常、thenable对象、Iterator对象等语法的实践。代码量虽然不大，但是里面的设计思路是非常好的，可以吸收进来，提高我们的编程水平。</p><p data-pid="BdKFNcOR">总之，纸上得来终觉浅，绝知此事要躬行。实现一些经典的代码，对提高自己也是很有帮助的。</p><h2>参考</h2><ul><li data-pid="gbc4LXCj">ECMAScript6入门教程(阮一峰) —— Promise对象 <a href="https://link.zhihu.com/?target=https%3A//es6.ruanyifeng.com/%23docs/promise" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">es6.ruanyifeng.com/#</span><span class="invisible">docs/promise</span><span class="ellipsis"></span></a></li><li data-pid="JVEsb2y5">ECMAScript6入门教程(阮一峰) —— async函数 <a href="https://link.zhihu.com/?target=https%3A//es6.ruanyifeng.com/%23docs/async" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">es6.ruanyifeng.com/#</span><span class="invisible">docs/async</span><span class="ellipsis"></span></a></li><li data-pid="0LIPnlJ-">理解 Promise 的工作原理 <a href="https://link.zhihu.com/?target=https%3A//juejin.cn/post/6844903426006974477" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">juejin.cn/post/68449034</span><span class="invisible">26006974477</span><span class="ellipsis"></span></a></li><li data-pid="LTKDtyKe">Promises/A+ <a href="https://link.zhihu.com/?target=https%3A//promisesaplus.com/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">promisesaplus.com/</span><span class="invisible"></span></a></li><li data-pid="KHtpDneO">Promises CommonJs <a href="https://link.zhihu.com/?target=https%3A//wiki.commonjs.org/wiki/Promises" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">wiki.commonjs.org/wiki/</span><span class="invisible">Promises</span><span class="ellipsis"></span></a></li><li data-pid="VYWDFBu-">Promises/A CommonJs <a href="https://link.zhihu.com/?target=https%3A//wiki.commonjs.org/wiki/Promises/A" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">wiki.commonjs.org/wiki/</span><span class="invisible">Promises/A</span><span class="ellipsis"></span></a></li><li data-pid="e6g_4LtF">Promises/B CommonJs <a href="https://link.zhihu.com/?target=https%3A//wiki.commonjs.org/wiki/Promises/B" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">wiki.commonjs.org/wiki/</span><span class="invisible">Promises/B</span><span class="ellipsis"></span></a></li><li data-pid="Bnm0Ca7v">Promises/D CommonJs <a href="https://link.zhihu.com/?target=https%3A//wiki.commonjs.org/wiki/Promises/D" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">wiki.commonjs.org/wiki/</span><span class="invisible">Promises/D</span><span class="ellipsis"></span></a></li><li data-pid="4nF0V5ky">【译】 Promises/A+ 规范 <a href="https://link.zhihu.com/?target=https%3A//juejin.cn/post/6844903767654023182" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">juejin.cn/post/68449037</span><span class="invisible">67654023182</span><span class="ellipsis"></span></a></li><li data-pid="o_fyDc9E">promises-aplus-tests <a href="https://link.zhihu.com/?target=https%3A//github.com/promises-aplus/promises-tests" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">github.com/promises-apl</span><span class="invisible">us/promises-tests</span><span class="ellipsis"></span></a></li><li data-pid="uj3OzVRO">Promise实现原理 <a href="https://link.zhihu.com/?target=https%3A//juejin.cn/post/7259647015604863013" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">juejin.cn/post/72596470</span><span class="invisible">15604863013</span><span class="ellipsis"></span></a></li><li data-pid="7hPGKY-t">手写Promise完整介绍 <a href="https://link.zhihu.com/?target=https%3A//juejin.cn/post/7255855848836464677" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">juejin.cn/post/72558558</span><span class="invisible">48836464677</span><span class="ellipsis"></span></a></li><li data-pid="SbJaWF8T">从一道让我失眠的 Promise 面试题开始，深入分析 Promise 实现细节 <a href="https://link.zhihu.com/?target=https%3A//juejin.cn/post/6945319439772434469" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">juejin.cn/post/69453194</span><span class="invisible">39772434469</span><span class="ellipsis"></span></a></li><li data-pid="8HhSKguC">面试官：“你能手写一个 Promise 吗” <a href="https://link.zhihu.com/?target=https%3A//juejin.cn/post/6850037281206566919" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">juejin.cn/post/68500372</span><span class="invisible">81206566919</span><span class="ellipsis"></span></a></li><li data-pid="KS_XKPal">谈一谈浏览器与Node.js中的JavaScript事件循环，宏任务与微任务机制 <a href="https://link.zhihu.com/?target=https%3A//jzplp.github.io/2023/macro-micro-task.html" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">jzplp.github.io/2023/ma</span><span class="invisible">cro-micro-task.html</span><span class="ellipsis"></span></a></li><li data-pid="wPUEdldu">PromiseJz GitHub仓库 <a href="https://link.zhihu.com/?target=https%3A//github.com/jzplp/PromiseJz" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">github.com/jzplp/Promis</span><span class="invisible">eJz</span><span class="ellipsis"></span></a></li><li data-pid="nLEqhP2Q">MDN Promise <a href="https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">developer.mozilla.org/z</span><span class="invisible">h-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise</span><span class="ellipsis"></span></a></li></ul>',
      relationship: {
        is_thanked: false,
        is_nothelp: false,
        voting: 0,
      },
      is_labeled: false,
      visited_count: 29574,
      thumbnails: [
        'https://pic1.zhimg.com/50/v2-672fd04ed06c8dae45258978c99849ea_720w.jpg?source=b6762063',
      ],
      favorite_count: 213,
      answer_type: 'normal',
    },
    brief: '{"source": "TS", "type": "answer", "id": 3249351308}',
    attached_info:
      'Cs8FCMq/ytySx+SvsAEQBBoJNjIwODcxMTM1ILWfqKkGKFYwBkAoSkEKLFRTX1NPVVJDRV9UV09UT1dFUl9TSE9SVElOVEVSRVNUX1JFQ0FMTF9URVhUEgEwGAAgADoKeyJyYXciOiIifVoINjM3ODU2NTdiIGNjZGQ1NWExZGY0ZjRkMmUzZjk3OWM3OWVhZDJiMDczcgozMjQ5MzUxMzA4igEJNDU2Nzc1MjIxqgEJcmVjb21tZW5kwgEgYzVkNGU1MmVhZjVkY2IxZTM2ODU3MWQwMTQzZGNmY2XyAQoIDBIGTm9ybWFs8gEoCAoSJGFmYWI5MzQ4LTJkMDMtNDEyNi1iNTIyLWY1NGM2ZWU4MDg4MfIBBQgLEgE3ggIAiAKE3u3K5jGSAiBjNWQ0ZTUyZWFmNWRjYjFlMzY4NTcxZDAxNDNkY2ZjZZoCAMoCG09sZENvbnRlbnRSZWR1Y2U1V2VpZ2h0UnVsZcoCHEJheWVzRmlyc3RMZXZlbElzb2xhdGlvblJ1bGXaAixUU19TT1VSQ0VfVFdPVE9XRVJfU0hPUlRJTlRFUkVTVF9SRUNBTExfVEVYVOgCBPoCC05PUk1BTF9GTE9XigMgODg3ZGY3ODIzN2Q3NDRhZmI0NDY1M2VmNjU3NmU0YmWaAw0KAnYwEAAaBW90aGVyqAOG5wHYAwDqAyBmZWVkX3Nob3J0aW50ZXJlc3RfdHdvdG93ZXJfdGV4dPoDEBIMVU5LTk9XTl9NT0RFIACABACIBACSBAZOb3JtYWyaBAE0oAQAqAQAsAQAugQGbWFudWFswgQDMTcwyAQA0gQP5o6o6I2Q5bey5pu05paw2AQA8AQA+QQAAADAHdetP4EFAAAAAAAAAACJBXUtFjCu/7A/kgUJ5q2m5L6v5Yy6mgUDZGZ0ogUDZGZ0sgUBMbkFAAAAAAAAAADQBQDgBQDoBQDwBQeSAiUKCTYyMDg3MTEzNRIKMzI0OTM1MTMwOBgEIgpJTUFHRV9URVhU',
    action_card: false,
  },
  {
    id: '41_1711164583.600',
    type: 'feed',
    offset: 41,
    verb: 'TOPIC_ACKNOWLEDGED_ANSWER',
    created_time: 1711164583,
    updated_time: 1711164583,
    target: {
      id: 3283709734,
      type: 'answer',
      url: 'https://api.zhihu.com/answers/3283709734',
      author: {
        id: '251c195b50795dd231167aa86fcaeeed',
        url: 'https://api.zhihu.com/people/251c195b50795dd231167aa86fcaeeed',
        user_type: 'organization',
        url_token: 'ban-gong-zi-yuan-wang',
        name: '办公资源网',
        headline: '公众号【办公资源】，超过30万职场人士都在关注',
        avatar_url:
          'https://pic1.zhimg.com/50/v2-aad081512db9a2f3e854f00c0595187d_l.jpg?source=b6762063',
        is_org: true,
        gender: -1,
        followers_count: 32330,
        is_following: false,
        is_followed: false,
      },
      created_time: 1699588095,
      updated_time: 1708321175,
      voteup_count: 208,
      thanks_count: 672,
      comment_count: 14,
      is_copyable: true,
      question: {
        id: 364941648,
        type: 'question',
        url: 'https://api.zhihu.com/questions/364941648',
        author: {
          id: 'ba8e4fe96f7541073f769cb7596afe3d',
          url: 'https://api.zhihu.com/people/ba8e4fe96f7541073f769cb7596afe3d',
          user_type: 'people',
          url_token: 'kamar-78',
          name: 'Kamar',
          headline: '互联网的研究者',
          avatar_url:
            'https://picx.zhimg.com/50/v2-abed1a8c04700ba7d72b45195223e0ff_l.jpg?source=b6762063',
          is_org: false,
          gender: -1,
          followers_count: 2,
          is_following: false,
          is_followed: false,
        },
        title: '有什么不为人知的学习网站？',
        created: 1578284317,
        answer_count: 0,
        follower_count: 0,
        comment_count: 2,
        bound_topic_ids: [1746, 2083, 2547, 5493],
        is_following: false,
        excerpt: '',
        relationship: {
          is_author: false,
        },
        detail: '',
        question_type: 'normal',
      },
      thumbnail:
        'https://pica.zhimg.com/50/v2-9c18ef2240e8e31f3441bc7d59e084a9_720w.jpg?source=b6762063',
      excerpt:
        '分享10个不为人知的学习网站，电子版教材、试卷、课件、考研等学习资源，甚至连教师也在这里下载教案，非常值得收藏！ 1、高教书苑 https://ebook.hep.com.cn/index.html#/index 一个专门为大学生提供电子版教材书籍的网站，它按照不同年级以及专业对所有的书籍都进行了详细分类，打开首页点击上方的分类，接着会看到高等教育、高等职业皎月、五年制职高、教师教育等相关的学习教材。 点击高等教育，可以根据自己的专业找到对应的书籍，提供的专业包括…',
      excerpt_new:
        '分享10个不为人知的学习网站，电子版教材、试卷、课件、考研等学习资源，甚至连教师也在这里下载教案，非常值得收藏！ 1、高教书苑 https://ebook.hep.com.cn/index.html#/index 一个专门为大学生提供电子版教材书籍的网站，它按照不同年级以及专业对所有的书籍都进行了详细分类，打开首页点击上方的分类，接着会看到高等教育、高等职业皎月、五年制职高、教师教育等相关的学习教材。 点击高等教育，可以根据自己的专业找到对应的书籍，提供的专业包括…',
      preview_type: 'default',
      preview_text: '',
      reshipment_settings: 'allowed',
      content:
        '<p data-pid="rkVQXCWg">分享10个不为人知的学习网站，电子版教材、试卷、课件、考研等学习资源，甚至连教师也在这里下载教案，非常值得收藏！</p><h2>1、高教书苑</h2><p data-pid="SAYiOwwB"><a href="https://link.zhihu.com/?target=https%3A//ebook.hep.com.cn/index.html%23/index" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">ebook.hep.com.cn/index.</span><span class="invisible">html#/index</span><span class="ellipsis"></span></a></p><p data-pid="ENrBpCII">一个专门为大学生提供电子版教材书籍的网站，它按照不同年级以及专业对所有的书籍都进行了详细分类，打开首页点击上方的分类，接着会看到高等教育、高等职业皎月、五年制职高、教师教育等相关的学习教材。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic2.zhimg.com/v2-2dbb239b7c980f72acf686e573ce19b5_b.jpg" data-caption="" data-size="normal" data-rawwidth="1806" data-rawheight="929" data-qrcode-action="none" data-original-token="v2-2dbb239b7c980f72acf686e573ce19b5" data-default-watermark-src="https://pic4.zhimg.com/v2-37330d3e3f56d67fbf6b4e267d2c64f5_b.jpg" class="origin_image zh-lightbox-thumb" width="1806" data-original="https://pic2.zhimg.com/v2-2dbb239b7c980f72acf686e573ce19b5_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="1UA3XP6M">点击高等教育，可以根据自己的专业找到对应的书籍，提供的专业包括力学、数学与统计、材料、化学、外语、医护、财经等相关的专业都能找到，所有的书籍都支持在线阅读，还支持查看目录跳转到对应章节进行阅读以及做笔记。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-05e1136a485635d0fb54dcba50191236_b.jpg" data-caption="" data-size="normal" data-rawwidth="1726" data-rawheight="732" data-original-token="v2-05e1136a485635d0fb54dcba50191236" data-default-watermark-src="https://pic2.zhimg.com/v2-c642903fa6f1ca6877f8ac572a159b3f_b.jpg" class="origin_image zh-lightbox-thumb" width="1726" data-original="https://pic1.zhimg.com/v2-05e1136a485635d0fb54dcba50191236_r.jpg"/></figure><h2>2、中国国家图书馆</h2><p data-pid="MtzMj8kP"><a href="https://link.zhihu.com/?target=http%3A//www.nlc.cn/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://www.</span><span class="visible">nlc.cn/</span><span class="invisible"></span></a></p><p data-pid="nNWmvdJc">一个非常专业的学习教材搜索网站，涵盖了大量免费的大学电子版教材，提供了丰富的期刊、文献、古籍、音视频课件等，点击对应的分类就可以看到很多相关的电子版教材。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic4.zhimg.com/v2-92c53734d724e19739b10cfd5a122167_b.jpg" data-caption="" data-size="normal" data-rawwidth="1687" data-rawheight="909" data-original-token="v2-92c53734d724e19739b10cfd5a122167" data-default-watermark-src="https://pic2.zhimg.com/v2-346535139141b1ef85ee65290a10d83d_b.jpg" class="origin_image zh-lightbox-thumb" width="1687" data-original="https://pic4.zhimg.com/v2-92c53734d724e19739b10cfd5a122167_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="hdBvSt6G">还支持强大的电子书搜索功能，输入书名或作者名字就能找到对应的书籍，点击文献共享就可以免费下载正本的电子版书籍。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://picx.zhimg.com/v2-1bcb161d07823048102c314ce35985eb_b.jpg" data-caption="" data-size="normal" data-rawwidth="1718" data-rawheight="877" data-original-token="v2-1bcb161d07823048102c314ce35985eb" data-default-watermark-src="https://pic1.zhimg.com/v2-6eace767d250527da60219ea927ebb0c_b.jpg" class="origin_image zh-lightbox-thumb" width="1718" data-original="https://picx.zhimg.com/v2-1bcb161d07823048102c314ce35985eb_r.jpg"/></figure><h2>3、中国高效课件下载中心</h2><p data-pid="J4wgZ62n"><a href="https://link.zhihu.com/?target=http%3A//download.cucdc.com/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://</span><span class="visible">download.cucdc.com/</span><span class="invisible"></span></a></p><p data-pid="JtlXCSLq">一个专门用来下载大学课件的网站，提供了大学各个专业的课件，包括力学、农学、化学、统计、土木建筑、外语等，基本上能找到全国高效的课件。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://picx.zhimg.com/v2-07622d9a5d5ec1241856cbd024aa75f7_b.jpg" data-caption="" data-size="normal" data-rawwidth="1672" data-rawheight="904" data-original-token="v2-07622d9a5d5ec1241856cbd024aa75f7" data-default-watermark-src="https://pic2.zhimg.com/v2-dfe99cef172a7a3ce549a2d0999048c1_b.jpg" class="origin_image zh-lightbox-thumb" width="1672" data-original="https://picx.zhimg.com/v2-07622d9a5d5ec1241856cbd024aa75f7_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="64lkJsv7">还支持按照专业课程搜索课件，找到后直接点击查看详情页面就可以看到下载按钮，提供的课件基本上都是PDF、PPT格式文档，无需登录直接免费下载。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://picx.zhimg.com/v2-b5296a4404d0fde6c23c81296d6e3255_b.jpg" data-caption="" data-size="normal" data-rawwidth="1540" data-rawheight="733" data-original-token="v2-b5296a4404d0fde6c23c81296d6e3255" data-default-watermark-src="https://pic3.zhimg.com/v2-07d92c5e8790ea78be74600167a27602_b.jpg" class="origin_image zh-lightbox-thumb" width="1540" data-original="https://picx.zhimg.com/v2-b5296a4404d0fde6c23c81296d6e3255_r.jpg"/></figure><h2>4、田间小站</h2><p data-pid="HKHO7Ynx"><a href="https://link.zhihu.com/?target=https%3A//www.tjxz.cc/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://www.</span><span class="visible">tjxz.cc/</span><span class="invisible"></span></a></p><p data-pid="ISmc8rYf">一个质量超高的音乐学习网站，支持多种学习方式，你可以用它提高英语口语、单词、阅读、写作。</p><p data-pid="my8XS_Vv">为大家提供了多种学习内容，包括：英语漫画、英语短篇小说、经典台词、英语诗歌、英语演讲、英语写作、英语书籍等。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic3.zhimg.com/v2-5a56d30cd639fd0987fd5c36965bb7a2_b.jpg" data-caption="" data-size="normal" data-rawwidth="1185" data-rawheight="906" data-original-token="v2-5a56d30cd639fd0987fd5c36965bb7a2" data-default-watermark-src="https://pica.zhimg.com/v2-d5db95e7d462f553ba2145e6e272f9c2_b.jpg" class="origin_image zh-lightbox-thumb" width="1185" data-original="https://pic3.zhimg.com/v2-5a56d30cd639fd0987fd5c36965bb7a2_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="NEHxltcl">它所有的英语学习内容都是通过图文店方式呈现，你还可以这里找到考研英语写作模板、英语专业考研、考研必备单词等学习教程。</p><figure data-size="normal"><img src="https://picx.zhimg.com/v2-3d7746266241ca4cb2a312a302e79667_b.jpg" data-caption="" data-size="normal" data-rawwidth="1082" data-rawheight="774" data-original-token="v2-3d7746266241ca4cb2a312a302e79667" data-default-watermark-src="https://pic1.zhimg.com/v2-fcf76701342649463f08284987d2cca0_b.jpg" class="origin_image zh-lightbox-thumb" width="1082" data-original="https://picx.zhimg.com/v2-3d7746266241ca4cb2a312a302e79667_r.jpg"/></figure><h2>5、资源狗</h2><p data-pid="g0jyec_Q"><a href="https://link.zhihu.com/?target=https%3A//www.xuesousou.net/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://www.</span><span class="visible">xuesousou.net/</span><span class="invisible"></span></a></p><p data-pid="XtikNBuK">一个非常强大的资源搜索网站，打开页面就可以看到搜索框，支持免费搜索学习资料、办公教程、素材、动漫、影视等资源，并且搜索到的文件大部分都支持免费下载。</p><p data-pid="ONfVgZ9B">只需要输入关键词就能快速帮你找到对应的资源，根据提示操作就可以下载了。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-c550f7f6d7bf324a49d00011453eb2a2_b.jpg" data-caption="" data-size="normal" data-rawwidth="1473" data-rawheight="556" data-original-token="v2-c550f7f6d7bf324a49d00011453eb2a2" data-default-watermark-src="https://pic2.zhimg.com/v2-48806c31e39bce44595fb03b78c0fa09_b.jpg" class="origin_image zh-lightbox-thumb" width="1473" data-original="https://pic1.zhimg.com/v2-c550f7f6d7bf324a49d00011453eb2a2_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><h2>6、大学资源网</h2><p data-pid="4o1nELtd"><a href="https://link.zhihu.com/?target=http%3A//www.dxzy163.com/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://www.</span><span class="visible">dxzy163.com/</span><span class="invisible"></span></a></p><p data-pid="B5dsTf40">一个内容非常丰富的学习网站，提供的英语教程都是以视频教学为主。</p><p data-pid="aDZve0sQ">你能在这里找到各个年级的不同学科的教学内容，学习英语的话考研在这里找到小学英语语法、初中英语语法、考研英语等。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pica.zhimg.com/v2-d6ce0bcb6420d042d197308df78eae32_b.jpg" data-caption="" data-size="normal" data-rawwidth="1250" data-rawheight="925" data-original-token="v2-d6ce0bcb6420d042d197308df78eae32" data-default-watermark-src="https://pica.zhimg.com/v2-64d70af130012aab8b5c59ba272173bc_b.jpg" class="origin_image zh-lightbox-thumb" width="1250" data-original="https://pica.zhimg.com/v2-d6ce0bcb6420d042d197308df78eae32_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="OQCel4q-">它的每个英语教程都是通过视频教学为主，支持倍速播放，还考研下载到电脑上学习。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-5e819d07063458021d4c925a70d8bf20_b.jpg" data-caption="" data-size="normal" data-rawwidth="822" data-rawheight="336" data-original-token="v2-5e819d07063458021d4c925a70d8bf20" data-default-watermark-src="https://pic3.zhimg.com/v2-27ba5c6e5a33c6f1a7b140e883078b7e_b.jpg" class="origin_image zh-lightbox-thumb" width="822" data-original="https://pic1.zhimg.com/v2-5e819d07063458021d4c925a70d8bf20_r.jpg"/></figure><h2>7、办公资源网</h2><p data-pid="I1n9jCIk"><a href="https://link.zhihu.com/?target=https%3A//www.bangongziyuan.com/pptkj/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://www.</span><span class="visible">bangongziyuan.com/pptkj</span><span class="invisible">/</span><span class="ellipsis"></span></a></p><p data-pid="XCEGpDgQ">这是一个PPT模板资源网站，它涵盖的范围非常广泛，不仅有各式各样的PPT模板，还包含了丰富的PPT教学课件，包括小学、初中、高中。它将将每一本书按照章节、单元、课时整理成一个PPT文档，你只需要按照年级、科目进行下载就好了。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-0d1eeb306af3eccc31185d21f9be06fa_b.jpg" data-caption="" data-size="normal" data-rawwidth="1196" data-rawheight="966" data-original-token="v2-0d1eeb306af3eccc31185d21f9be06fa" data-default-watermark-src="https://pic1.zhimg.com/v2-735e115d45f78cc742e760d8a8cb1024_b.jpg" class="origin_image zh-lightbox-thumb" width="1196" data-original="https://pic1.zhimg.com/v2-0d1eeb306af3eccc31185d21f9be06fa_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="8-DorWER">除了有中小学课件之外，你还可以在这里找到关于Excel视频教程、PPT课程、PS零基础教程、以及平面设计等不同的办公教程。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-8debff8ed0f65b2ad0f18613ab49ec46_b.jpg" data-caption="" data-size="normal" data-rawwidth="1190" data-rawheight="869" data-original-token="v2-8debff8ed0f65b2ad0f18613ab49ec46" data-default-watermark-src="https://pica.zhimg.com/v2-c676c2fa1defd7d1bb2bdc8c5151fdda_b.jpg" class="origin_image zh-lightbox-thumb" width="1190" data-original="https://pic1.zhimg.com/v2-8debff8ed0f65b2ad0f18613ab49ec46_r.jpg"/></figure><h2>8、FORVO</h2><p data-pid="o5lqQz9W"><a href="https://link.zhihu.com/?target=https%3A//zh.forvo.com/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">zh.forvo.com/</span><span class="invisible"></span></a></p><p data-pid="hmrBYiMj">一个语种非常丰富的语言学习网站，同时也是一个好用的听力网站。</p><p data-pid="uYy5wZzQ">它支持的语种发音非常丰富，你可以在这里找到想要学习的语种，所有国家的语言都会根据字幕或热度进行排序，找到你想要学习的语种，点击后会看到详细的发音教学以及听力内容。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic3.zhimg.com/v2-d50933d02f6e95ab92fe1abc723c7a18_b.jpg" data-caption="" data-size="normal" data-rawwidth="1650" data-rawheight="907" data-original-token="v2-d50933d02f6e95ab92fe1abc723c7a18" data-default-watermark-src="https://pic1.zhimg.com/v2-4fa8fafe5b2360cca900a4f4f99ac0ec_b.jpg" class="origin_image zh-lightbox-thumb" width="1650" data-original="https://pic3.zhimg.com/v2-d50933d02f6e95ab92fe1abc723c7a18_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="nRZWEyvF">比如学习俄语，点击后会在俄语页面看到常用单词、发音最多的单词，其中常用单词包括问候、地点、饮品、天气、职业、购物、就医等。</p><p data-pid="hQwMGlwL">它的发音词语你可以直接点击，几乎全部都接近真人发音，而且还支持搜索词语播放单词的正确发音。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic3.zhimg.com/v2-287ef40d70400cb823cf6f4b834d74aa_b.jpg" data-caption="" data-size="normal" data-rawwidth="1507" data-rawheight="746" data-original-token="v2-287ef40d70400cb823cf6f4b834d74aa" data-default-watermark-src="https://pic3.zhimg.com/v2-d2cfe9edf05d922bcc947826f824c394_b.jpg" class="origin_image zh-lightbox-thumb" width="1507" data-original="https://pic3.zhimg.com/v2-287ef40d70400cb823cf6f4b834d74aa_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><h2>9、考研百科</h2><p data-pid="kaKfSzOI"><a href="https://link.zhihu.com/?target=https%3A//yz.chsi.com.cn/yzzt/kybk" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">yz.chsi.com.cn/yzzt/kyb</span><span class="invisible">k</span><span class="ellipsis"></span></a></p><p data-pid="G6v3kiVH">一个专门帮大家解锁考研问题的网站，对于打算考研的同学考研提前准备。</p><p data-pid="3lSE56UU">网站一共分为4大流程：考研常识、考研流程、考研目标、备考攻略。</p><p data-pid="PRwBCLrd">其中考研常识又为大家分为：研究生种类、学习方式、考试方式、英语数学；统考流程又分为报名时间、初试时间、复试、录取信息公开。</p><p data-pid="Hq-9OCXJ">考研目标分为专业选择、院校选择；备考攻略，网友分享的考研心得以及考研资料，考研专业课、考研英语、考研政治等方面的文章。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-69823df10c354e8fa0351460d33078cc_b.jpg" data-caption="" data-size="normal" data-rawwidth="1484" data-rawheight="878" data-original-token="v2-69823df10c354e8fa0351460d33078cc" data-default-watermark-src="https://pic1.zhimg.com/v2-ce8955425fcb26ad8b9d1811c67f1284_b.jpg" class="origin_image zh-lightbox-thumb" width="1484" data-original="https://pic1.zhimg.com/v2-69823df10c354e8fa0351460d33078cc_r.jpg"/></figure><h2>10、一键抠图</h2><p data-pid="h62-Oivx"><a href="https://link.zhihu.com/?target=https%3A//www.yijiankoutu.com/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://www.</span><span class="visible">yijiankoutu.com/</span><span class="invisible"></span></a></p><p data-pid="RNiJLu4O">一个非常简单好用的在线抠图网站，对不会用PS抠图的小白超友好，支持人像抠图、物品抠图，完成的抠图还支持在线更换背景模板，同时还提供了很多其他图片处理工具，包括图片压缩、改大小、裁剪、格式转换等</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://pica.zhimg.com/v2-ff191e72788ab25ba066c7e983ec4e52_b.jpg" data-caption="" data-size="normal" data-rawwidth="1732" data-rawheight="881" data-original-token="v2-ff191e72788ab25ba066c7e983ec4e52" class="origin_image zh-lightbox-thumb" width="1732" data-original="https://pica.zhimg.com/v2-ff191e72788ab25ba066c7e983ec4e52_r.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="88gnqFdm">比如将图片上的人物抠下来，直接点击物品抠图，上传抠图它会自动利用AI技术，将图片上的人物抠下来，完成的抠图还能自定义添加背景模板，支持免费下载完成的抠图文件。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img src="https://picx.zhimg.com/v2-0729f1b7a91076ea06755a6d6daed4af_b.jpg" data-caption="" data-size="normal" data-original-token="v2-0729f1b7a91076ea06755a6d6daed4af" class="content_image"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="vBD7Z49a">以上就是这次和大家分享的一些超级好用的不为人知的网站，看完有需要的可以直接添加到个人收藏夹中，随时都能打开使用！</p>',
      relationship: {
        is_thanked: false,
        is_nothelp: false,
        voting: 0,
      },
      is_labeled: false,
      visited_count: 59944,
      thumbnails: [
        'https://picx.zhimg.com/50/v2-9c18ef2240e8e31f3441bc7d59e084a9_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-69efb8e1e9b0306d6ed214591c9ed91a_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-a07e36e53c2a031b9695b31de5224e34_720w.jpg?source=b6762063',
        'https://pica.zhimg.com/50/v2-7443b0f7ac9767ffa62317fe53090983_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-029d123931ae3b3ec0c74767615b90e2_720w.jpg?source=b6762063',
        'https://pica.zhimg.com/50/v2-928f7caef4f62d97be88404716960285_720w.jpg?source=b6762063',
        'https://pic1.zhimg.com/50/v2-89f29fe31ac020d02668fb629f5159d8_720w.jpg?source=b6762063',
        'https://pic1.zhimg.com/50/v2-259cbc4294d0d7501ed31fe7d396cbdd_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-fd1cd02395e37a3158150156b8577393_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-34a5ad8cc43856139f4c0d39fe531e04_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-deb03bba3ad53e7b4040a70109a89910_720w.jpg?source=b6762063',
        'https://pica.zhimg.com/50/v2-cc125504a051bda81105be09e99e5b9a_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-370b303fab00b800958c8576617180df_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-3ffdf85929606595b40553fb196de52d_720w.jpg?source=b6762063',
        'https://picx.zhimg.com/50/v2-64eec01b0bf7bffe2232f4e09dd7d0e4_720w.jpg?source=b6762063',
      ],
      favorite_count: 3949,
      answer_type: 'normal',
    },
    brief: '{"source": "TS", "type": "answer", "id": 3283709734}',
    attached_info:
      'CpUFCMq/ytySx+SvsAEQBBoJNjI3MTE1OTAyIP/PtqoGKNABMA5AKUo0Ch9UU19TT1VSQ0VfTkVXQklFX1RFWFRfVFdPX1RPV0VSEgEwGAAgADoKeyJyYXciOiIifVoINDMzNzYzMDFiIGNjZGQ1NWExZGY0ZjRkMmUzZjk3OWM3OWVhZDJiMDczcgozMjgzNzA5NzM0igEJMzY0OTQxNjQ4qgEJcmVjb21tZW5kwgEgMjUxYzE5NWI1MDc5NWRkMjMxMTY3YWE4NmZjYWVlZWTyAQoIDBIGTm9ybWFs8gEoCAoSJGI4YWYyM2IyLWZiMTQtNDE1OC04NGFkLWI4ZDk5YTFkNzBjOPIBBQgLEgE3ggIAiAKE3u3K5jGSAiAyNTFjMTk1YjUwNzk1ZGQyMzExNjdhYTg2ZmNhZWVlZJoCAMoCG09sZENvbnRlbnRSZWR1Y2U1V2VpZ2h0UnVsZdoCH1RTX1NPVVJDRV9ORVdCSUVfVEVYVF9UV09fVE9XRVLoAgP6AgtOT1JNQUxfRkxPV4oDIDg4N2RmNzgyMzdkNzQ0YWZiNDQ2NTNlZjY1NzZlNGJlmgMNCgJ2MBAAGgVvdGhlcqgDqNQD2AMA6gMebmV3YmllX3RleHRfdG93X3Rvd2VyX25vX2xpbWl0+gMQEgxVTktOT1dOX01PREUgAIAEAIgEAJIEBk5vcm1hbJoEATOgBACoBACwBAC6BAZtYW51YWzCBAMxNjDIBADSBA/mjqjojZDlt7Lmm7TmlrDYBADwBAD5BAAAAIBpBYE/gQUAAAAAAAAAAIkFdS0WMK7/sD+SBQnmrabkvq/ljLqaBQNkZnSiBQNkZnSyBQExuQUAAAAAAAAAANAFAOAFAOgFAPAFB5ICJQoJNjI3MTE1OTAyEgozMjgzNzA5NzM0GAQiCklNQUdFX1RFWFQ=',
    action_card: false,
  },
]